import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone
import re
import json
import requests
from dotenv import load_dotenv

from flask import Flask, request

import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WEBHOOK_BASE_URL = os.environ.get("WEBHOOK_BASE_URL")  # –Ω–∞–ø—Ä. https://your-app.onrender.com

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "Webhook received!", 200
    return "Invalid request", 403


@app.before_first_request
def setup_webhook():
    bot.remove_webhook()
    full_webhook_url = f"{WEBHOOK_BASE_URL}/{BOT_TOKEN}"
    bot.set_webhook(url=full_webhook_url)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))


# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '0'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = os.getenv('GEMINI_API_URL', "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
def validate_env_vars():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è."""
    missing_vars = []
    if not TOKEN: missing_vars.append('TELEGRAM_BOT_TOKEN')
    if not WEBHOOK_URL: missing_vars.append('WEBHOOK_URL')
    if not DATABASE_URL: missing_vars.append('DATABASE_URL')
    if ADMIN_CHAT_ID == 0: missing_vars.append('ADMIN_CHAT_ID')
    if CHANNEL_ID == 0: missing_vars.append('CHANNEL_ID')

    if missing_vars:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è: {', '.join(missing_vars)}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        exit(1)

validate_env_vars()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TeleBot —Ç–∞ Flask
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ú–ï–†–ï–ñ–ï–í–ò–• –ó–ê–ü–ò–¢–Ü–í (RETRY-–ú–ï–•–ê–ù–Ü–ó–ú)
try:
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry

    retry_strategy = Retry(
        total=3,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=frozenset(['HEAD', 'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'TRACE']),
        backoff_factor=1,
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session = telebot.apihelper._get_req_session()
    session.mount("https://", adapter)
    logger.info("–ú–µ—Ä–µ–∂–µ–≤–∏–π –∞–¥–∞–ø—Ç–µ—Ä –∑ –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
except ImportError:
    logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ 'requests' –∞–±–æ 'urllib3'. –ú–µ—Ö–∞–Ω—ñ–∑–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞."""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID

            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: `{func.__name__}`\n–ü–æ–º–∏–ª–∫–∞: `{e}`\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö Render.")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (PostgreSQL)
def get_db_connection():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

@error_handler
def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å."""
    conn = get_db_connection()
    if not conn:
        logger.critical("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ë–î –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")
        exit(1)
    
    try:
        with conn.cursor() as cur:
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    is_blocked BOOLEAN DEFAULT FALSE,
                    blocked_by BIGINT,
                    blocked_at TIMESTAMP WITH TIME ZONE,
                    commission_paid REAL DEFAULT 0,
                    commission_due REAL DEFAULT 0,
                    last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    referrer_id BIGINT
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    seller_username TEXT,
                    product_name TEXT NOT NULL,
                    price TEXT NOT NULL,
                    description TEXT NOT NULL,
                    photos TEXT,
                    geolocation TEXT,
                    status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
                    commission_rate REAL DEFAULT 0.10,
                    commission_amount REAL DEFAULT 0,
                    moderator_id BIGINT,
                    moderated_at TIMESTAMP WITH TIME ZONE,
                    admin_message_id BIGINT,
                    channel_message_id BIGINT,
                    views INTEGER DEFAULT 0,
                    likes_count INTEGER DEFAULT 0,
                    shipping_options TEXT,
                    hashtags TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS favorites (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    UNIQUE(user_chat_id, product_id)
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    product_id INTEGER,
                    message_text TEXT,
                    sender_type TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS commission_transactions (
                    id SERIAL PRIMARY KEY,
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    amount REAL NOT NULL,
                    status TEXT DEFAULT 'pending_payment',
                    payment_details TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    paid_at TIMESTAMP WITH TIME ZONE
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS statistics (
                    id SERIAL PRIMARY KEY,
                    action TEXT NOT NULL,
                    user_id BIGINT,
                    product_id INTEGER,
                    details TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            
            # –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ö–µ–º–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤)
            migrations = {
                'products': [
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS shipping_options TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS hashtags TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0;"
                ],
                'users': [
                    "ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_id BIGINT;"
                ]
            }
            for table, columns in migrations.items():
                for column_sql in columns:
                    try:
                        cur.execute(pg_sql.SQL(column_sql))
                        conn.commit()
                        logger.info(f"–ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ '{table}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞: {column_sql}")
                    except psycopg2.Error as e:
                        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó '{column_sql}': {e}")
                        conn.rollback()
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        conn.rollback()
        exit(1)
    finally:
        if conn:
            conn.close()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
user_data = {}

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
@error_handler
def save_user(message_or_user, referrer_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT chat_id, referrer_id FROM users WHERE chat_id = %s;"), (chat_id,))
        existing_user = cur.fetchone()

        if existing_user:
            cur.execute(pg_sql.SQL("""
                UPDATE users SET username = %s, first_name = %s, last_name = %s, last_activity = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (user.username, user.first_name, user.last_name, chat_id))
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            cur.execute(pg_sql.SQL("""
                INSERT INTO users (chat_id, username, first_name, last_name, referrer_id)
                VALUES (%s, %s, %s, %s, %s)
                ON CONFLICT (chat_id) DO NOTHING;
            """), (chat_id, user.username, user.first_name, user.last_name, referrer_id))
            logger.info(f"–ù–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –¥–æ–¥–∞–Ω–æ. –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_id}")
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn: return True
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT is_blocked FROM users WHERE chat_id = %s;"), (chat_id,))
        result = cur.fetchone()
        return result and result['is_blocked']
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}", exc_info=True)
        return True
    finally:
        if conn:
            conn.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (True/False) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        if status:
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = TRUE, blocked_by = %s, blocked_at = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (admin_id, chat_id))
        else:
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = FALSE, blocked_by = NULL, blocked_at = NULL
                WHERE chat_id = %s;
            """), (chat_id,))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É."""
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set([
        '—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
        '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
        '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
        '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
        '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
        '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', 
        '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'
    ])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(dict.fromkeys(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    """–õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO statistics (action, user_id, product_id, details)
            VALUES (%s, %s, %s, %s)
        '''), (action, user_id, product_id, details))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

# Gemini AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
@error_handler
def get_gemini_response(prompt, conversation_history=None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini AI."""
    if not GEMINI_API_KEY:
        logger.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {"Content-Type": "application/json"}
    system_prompt = """–¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. 
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞: –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º, —ñ–Ω–æ–¥—ñ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, 
    –∞–ª–µ –∑–∞–≤–∂–¥–∏ –∫–æ—Ä–∏—Å–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º.
    –î–æ–ø–æ–º–∞–≥–∞–π –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂—ñ, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."""

    gemini_messages = [{"role": "user", "parts": [{"text": system_prompt}]}]
    
    if conversation_history:
        for msg in conversation_history:
            role = "user" if msg["sender_type"] == 'user' else "model"
            gemini_messages.append({"role": role, "parts": [{"text": msg["message_text"]}]})
    
    gemini_messages.append({"role": "user", "parts": [{"text": prompt}]})

    payload = {"contents": gemini_messages}

    try:
        api_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}"
        response = requests.post(api_url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        if data.get("candidates") and len(data["candidates"]) > 0 and \
           data["candidates"][0].get("content") and data["candidates"][0]["content"].get("parts"):
            content = data["candidates"][0]["content"]["parts"][0]["text"]
            logger.info(f"Gemini –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {data}")
            return generate_elon_style_response(prompt)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Gemini API: {e}", exc_info=True)
        return generate_elon_style_response(prompt)
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {e}", exc_info=True)
        return generate_elon_style_response(prompt)

def generate_elon_style_response(prompt):
    """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞."""
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å!"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ AI) –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ —É –ë–î."""
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO conversations (user_chat_id, product_id, message_text, sender_type)
            VALUES (%s, %s, %s, %s)
        '''), (chat_id, product_id, message_text, sender_type))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def get_conversation_history(chat_id, limit=5):
    """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î."""
    conn = get_db_connection()
    if not conn: return []
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            SELECT message_text, sender_type FROM conversations 
            WHERE user_chat_id = %s 
            ORDER BY timestamp DESC LIMIT %s
        '''), (chat_id, limit))
        results = cur.fetchall()
        
        history = [{"message_text": row['message_text'], "sender_type": row['sender_type']} 
                   for row in reversed(results)]
        
        return history
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤: {e}", exc_info=True)
        return []
    finally:
        if conn:
            conn.close()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚≠ê –û–±—Ä–∞–Ω—ñ"), types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"))
main_menu_markup.add(types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª"), types.KeyboardButton("ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫"))

back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
cancel_button = types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    referrer_id = None
    parts = message.text.split()
    if len(parts) > 1 and parts[0] == '/start':
        try:
            potential_referrer_id = int(parts[1])
            if potential_referrer_id != chat_id:
                referrer_id = potential_referrer_id
        except (ValueError, IndexError):
            pass

    save_user(message, referrer_id)
    log_statistics('start', chat_id, details=f"referrer: {referrer_id}")

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—Ç—É–∂–Ω–∏–π AI! üöÄ\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
        "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
        "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
        "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n"
        "‚≠ê –î–æ–¥–∞—é —Ç–æ–≤–∞—Ä–∏ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ\n"
        "üèÜ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin."""
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals")
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')

# –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/6: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", 'next_step': 2, 'prev_step': None},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/6: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `500 –≥—Ä–Ω`, `100 USD` –∞–±–æ `–î–æ–≥–æ–≤—ñ—Ä–Ω–∞`):", 'next_step': 3, 'prev_step': 1},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/6: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ':", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ', 'prev_step': 2},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/6: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é', 'prev_step': 3},
    5: {'name': 'waiting_shipping', 'prompt': "üöö *–ö—Ä–æ–∫ 5/6: –î–æ—Å—Ç–∞–≤–∫–∞*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):", 'next_step': 6, 'prev_step': 4},
    6: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 6/6: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:", 'next_step': 'confirm', 'prev_step': 5}
}

@error_handler
def start_add_product_flow(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é—á–∏ user_data."""
    chat_id = message.chat.id
    user_data[chat_id] = {
        'flow': 'add_product',
        'step_number': 1, 
        'data': {
            'photos': [], 
            'geolocation': None,
            'shipping_options': [],
            'product_name': '',
            'price': '',
            'description': '',
            'hashtags': ''
        }
    }
    send_product_step_message(chat_id)
    log_statistics('start_add_product', chat_id)

@error_handler
def send_product_step_message(chat_id):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_data[chat_id]['step'] = step_config['name']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if step_config['name'] == 'waiting_photos':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_location':
        markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_shipping':
        inline_markup = types.InlineKeyboardMarkup(row_width=2)
        shipping_options_list = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á"]
        selected_options = user_data[chat_id]['data'].get('shipping_options', [])

        buttons = []
        for opt in shipping_options_list:
            emoji = '‚úÖ ' if opt in selected_options else ''
            buttons.append(types.InlineKeyboardButton(f"{emoji}{opt}", callback_data=f"shipping_{opt}"))
        
        inline_markup.add(*buttons)
        inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
        
        bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=inline_markup)
        return
    
    if step_config['prev_step'] is not None:
        markup.add(back_button)
    
    markup.add(cancel_button)
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

@error_handler
def process_product_step(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        bot.send_message(chat_id, "–í–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é.", reply_markup=main_menu_markup)
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_text = message.text if message.content_type == 'text' else ""

    if user_text == cancel_button.text:
        del user_data[chat_id]
        bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        return

    if user_text == back_button.text:
        if step_config['prev_step'] is not None:
            user_data[chat_id]['step_number'] = step_config['prev_step']
            send_product_step_message(chat_id)
        else:
            bot.send_message(chat_id, "–í–∏ –≤–∂–µ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∫—Ä–æ—Ü—ñ.")
        return

    if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
        go_to_next_step(chat_id)
        return

    if step_config['name'] == 'waiting_name':
        if user_text and 3 <= len(user_text) <= 100:
            user_data[chat_id]['data']['product_name'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

    elif step_config['name'] == 'waiting_price':
        if user_text and len(user_text) <= 50:
            user_data[chat_id]['data']['price'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤):")

    elif step_config['name'] == 'waiting_photos':
        if user_text == "–î–∞–ª—ñ":
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'/'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'.")

    elif step_config['name'] == 'waiting_location':
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    
    elif step_config['name'] == 'waiting_shipping':
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏.")

    elif step_config['name'] == 'waiting_description':
        if user_text and 10 <= len(user_text) <= 1000:
            user_data[chat_id]['data']['description'] = user_text
            user_data[chat_id]['data']['hashtags'] = generate_hashtags(user_text)
            confirm_and_send_for_moderation(chat_id)
        else:
            bot.send_message(chat_id, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (10-1000 —Å–∏–º–≤–æ–ª—ñ–≤). –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:")

@error_handler
def go_to_next_step(chat_id):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    next_step_number = ADD_PRODUCT_STEPS[current_step_number]['next_step']
    
    if next_step_number == 'confirm':
        confirm_and_send_for_moderation(chat_id)
    else:
        user_data[chat_id]['step_number'] = next_step_number
        send_product_step_message(chat_id)

@error_handler
def process_product_photo(message):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–æ–≤–∞—Ä—É –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_photos':
        if len(user_data[chat_id]['data']['photos']) < 5:
            file_id = message.photo[-1].file_id
            user_data[chat_id]['data']['photos'].append(file_id)
            photos_count = len(user_data[chat_id]['data']['photos'])
            bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {photos_count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'")
        else:
            bot.send_message(chat_id, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def process_product_location(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_location':
        if message.location:
            user_data[chat_id]['data']['geolocation'] = {
                'latitude': message.location.latitude,
                'longitude': message.location.longitude
            }
            bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def confirm_and_send_for_moderation(chat_id):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä —É –ë–î —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    data = user_data[chat_id]['data']
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    cur = conn.cursor()
    product_id = None
    try:
        user_info = bot.get_chat(chat_id)
        seller_username = user_info.username if user_info.username else None

        cur.execute(pg_sql.SQL('''
            INSERT INTO products 
            (seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags, status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 'pending')
            RETURNING id;
        '''), (
            chat_id,
            seller_username,
            data['product_name'],
            data['price'],
            data['description'],
            json.dumps(data['photos']) if data['photos'] else None,
            json.dumps(data['geolocation']) if data['geolocation'] else None,
            json.dumps(data['shipping_options']) if data['shipping_options'] else None,
            data['hashtags'],
        ))
        
        product_id = cur.fetchone()[0]
        conn.commit()
        
        bot.send_message(chat_id, 
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
            reply_markup=main_menu_markup)
        
        send_product_for_admin_review(product_id)
        
        del user_data[chat_id]
        
        log_statistics('product_added', chat_id, product_id)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_for_admin_review(product_id):
    """–§–æ—Ä–º—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    conn = get_db_connection()
    if not conn: return

    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags
            FROM products WHERE id = %s;
        """), (product_id,))
        data = cur.fetchone()

        if not data:
            logger.error(f"–¢–æ–≤–∞—Ä –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–≤'—é.")
            return

        seller_chat_id = data['seller_chat_id']
        seller_username = data['seller_username'] if data['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        photos = json.loads(data['photos']) if data['photos'] else []
        geolocation = json.loads(data['geolocation']) if data['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(data['shipping_options'])) if data['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = data['hashtags'] if data['hashtags'] else ""

        review_text = (
            f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
            f"ID: {product_id}\n" # –ó–º—ñ–Ω–µ–Ω–æ: –ø—Ä–∏–±—Ä–∞–Ω–æ "üÜî"
            f"–ù–∞–∑–≤–∞: {data['product_name']}\n"
            f"–¶—ñ–Ω–∞: {data['price']}\n"
            f"–û–ø–∏—Å: {data['description'][:500]}...\n"
            f"–§–æ—Ç–æ: {len(photos)} —à—Ç.\n"
            f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {shipping_options_text}\n"
            f"–•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
            types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        )
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
            types.InlineKeyboardButton("üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ", callback_data=f"mod_request_photo_fix_{product_id}") 
        )
        
        try:
            admin_msg = None
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=review_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                
                sent_messages = bot.send_media_group(ADMIN_CHAT_ID, media)
                
                if sent_messages:
                    admin_msg = bot.send_message(ADMIN_CHAT_ID, 
                                                 f"üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                                 reply_markup=markup, 
                                                 parse_mode='Markdown',
                                                 reply_to_message_id=sent_messages[0].message_id)
                else:
                    admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                               parse_mode='Markdown',
                                               reply_markup=markup)
            else:
                admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                           parse_mode='Markdown',
                                           reply_markup=markup)
            
            if admin_msg:
                cur.execute(pg_sql.SQL("UPDATE products SET admin_message_id = %s WHERE id = %s;"),
                               (admin_msg.message_id, product_id))
                conn.commit()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)
            conn.rollback()
    finally:
        if conn:
            conn.close()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_messages(message):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""

    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(pg_sql.SQL("UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE chat_id = %s"), (chat_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
            conn.rollback()
        finally:
            conn.close()

    if chat_id in user_data and user_data[chat_id].get('flow'):
        current_flow = user_data[chat_id]['flow']
        if current_flow == 'add_product':
            if message.content_type == 'text':
                process_product_step(message)
            elif message.content_type == 'photo':
                process_product_photo(message)
            elif message.content_type == 'location':
                process_product_location(message)
            else:
                bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –∞–±–æ 'üîô –ù–∞–∑–∞–¥'.")
        elif current_flow == 'change_price':
            process_new_price(message)
        elif current_flow == 'mod_edit_tags':
            process_new_hashtags_mod(message)
        return

    if user_text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
        start_add_product_flow(message)
    elif user_text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
        send_my_products(message)
    elif user_text == "‚≠ê –û–±—Ä–∞–Ω—ñ":
        send_favorites(message)
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        send_help_message(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
        send_channel_link(message)
    elif user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫":
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å!\n\n(–ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ä–µ–∂–∏–º—É AI —á–∞—Ç—É.)", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat)
    elif message.content_type == 'text': 
        handle_ai_chat(message)
    elif message.content_type == 'photo':
        bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
    elif message.content_type == 'location':
        bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
    else:
        bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

@error_handler
def handle_ai_chat(message):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É."""
    chat_id = message.chat.id
    user_text = message.text

    if user_text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏" or user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(chat_id, "–ß–∞—Ç –∑ AI —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        return

    if user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫" or user_text == "/start":
        bot.send_message(chat_id, "–í–∏ –≤–∂–µ –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É. –ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat)
        return

    save_conversation(chat_id, user_text, 'user')
    
    conversation_history = get_conversation_history(chat_id, limit=10)
    
    ai_reply = get_gemini_response(user_text, conversation_history)
    save_conversation(chat_id, ai_reply, 'ai')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(chat_id, f"ü§ñ –î—É–º–∞—é...\n{ai_reply}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_ai_chat)

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª—ñ–≤ –º–µ–Ω—é
@error_handler
def send_my_products(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).")
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT id, product_name, status, price, created_at, channel_message_id, views, likes_count
            FROM products
            WHERE seller_chat_id = %s
            ORDER BY created_at DESC
        """), (chat_id,))
        user_products = cur.fetchall()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    finally:
        if conn:
            conn.close()

    if user_products:
        response_intro = "üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"
        bot.send_message(chat_id, response_intro, parse_mode='Markdown')

        for i, product in enumerate(user_products, 1):
            product_id = product['id']
            status_emoji = {
                'pending': '‚è≥',
                'approved': '‚úÖ',
                'rejected': '‚ùå',
                'sold': 'üí∞',
                'expired': 'üóëÔ∏è'
            }
            status_ukr = {
                'pending': '–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
                'approved': '–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ',
                'rejected': '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                'sold': '–ø—Ä–æ–¥–∞–Ω–æ',
                'expired': '—Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è'
            }.get(product['status'], product['status'])

            created_at_local = product['created_at'].astimezone(timezone.utc).strftime('%d.%m.%Y %H:%M')

            # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É –¥–ª—è "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏" - –ø—Ä–∏–±—Ä–∞—Ç–∏ ID —Ç–∞ —Ñ–æ—Ç–æ, –ø—Ä–∏–±—Ä–∞—Ç–∏ "–ù–∞–∑–≤–∞", "–¶—ñ–Ω–∞"
            product_text = f"{i}. {status_emoji.get(product['status'], '‚ùì')} *{product['product_name']}*\n"
            product_text += f"   {product['price']}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üí∞ "
            product_text += f"   üìÖ {created_at_local}\n"
            product_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status_ukr}\n"
            
            markup = types.InlineKeyboardMarkup(row_width=2)

            if product['status'] == 'approved':
                product_text += f"   üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥–∏: {product['views']}\n"
                product_text += f"   ‚ù§Ô∏è –õ–∞–π–∫–∏: {product['likes_count']}\n"
                
                channel_link_part = str(CHANNEL_ID).replace("-100", "") 
                channel_url = f"https://t.me/c/{channel_link_part}/{product['channel_message_id']}" if product['channel_message_id'] else None
                
                if channel_url:
                    markup.add(types.InlineKeyboardButton("üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ", url=channel_url))
                
                # –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ (–±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤)
                markup.add(types.InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"republish_{product_id}"))

                markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_my_{product_id}"))
                markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{product_id}"))
                markup.add(types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_my_{product_id}"))

            elif product['status'] in ['sold', 'pending', 'rejected', 'expired']:
                markup.add(types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_my_{product_id}"))
            
            bot.send_message(chat_id, product_text, parse_mode='Markdown', reply_markup=markup, disable_web_page_preview=True)

    else:
        bot.send_message(chat_id, "üì≠ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!")

@error_handler
def send_favorites(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤."""
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT p.id, p.product_name, p.price, p.status, p.channel_message_id, p.likes_count
            FROM products p
            JOIN favorites f ON p.id = f.product_id
            WHERE f.user_chat_id = %s AND p.status = 'approved'
            ORDER BY p.created_at DESC;
        """), (chat_id,))
        favorites = cur.fetchall()

        if not favorites:
            bot.send_message(chat_id, "üìú –í–∞—à —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ ‚ù§Ô∏è –ø—ñ–¥ –Ω–∏–º —É –∫–∞–Ω–∞–ª—ñ.")
            return

        bot.send_message(chat_id, "‚≠ê *–í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:*", parse_mode='Markdown')
        for fav in favorites:
            channel_link_part = str(CHANNEL_ID).replace("-100", "")
            url = f"https://t.me/c/{channel_link_part}/{fav['channel_message_id']}" if fav['channel_message_id'] else None

            text = (
                f"*{fav['product_name']}*\n"
                f"   {fav['price']}\n"
                f"   ‚ù§Ô∏è –õ–∞–π–∫–∏: {fav['likes_count']}\n"
            )
            markup = types.InlineKeyboardMarkup()
            if url:
                markup.add(types.InlineKeyboardButton("üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ", url=url))
            
            markup.add(types.InlineKeyboardButton("üíî –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ", callback_data=f"toggle_favorite_{fav['id']}_{fav['channel_message_id']}"))

            bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup, disable_web_page_preview=True)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_help_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ —Ç–∞ –π–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ—ó."""
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞*\n\n"
        "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –ø—Ä–æ–¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.\n"
        "‚≠ê *–û–±—Ä–∞–Ω—ñ* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –≤–∏ –ø–æ–∑–Ω–∞—á–∏–ª–∏ —è–∫ —É–ª—é–±–ª–µ–Ω—ñ.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö.\n"
        "ü§ñ *AI –ü–æ–º—ñ—á–Ω–∏–∫* - –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ AI.\n\n"
        "‚úçÔ∏è *–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤—ñ—Å—É*:\n"
        "‚Äì –î–æ—Å—Ç–∞–≤–∫—É –æ–ø–ª–∞—á—É—î *–ø–æ–∫—É–ø–µ—Ü—å*.\n"
        "‚Äì –ö–æ–º—ñ—Å—ñ—é —Å–µ—Ä–≤—ñ—Å—É —Å–ø–ª–∞—á—É—î *–ø—Ä–æ–¥–∞–≤–µ—Ü—å*.\n\n"
        "üó£Ô∏è *–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:* –ü—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —ñ –º—ñ–π –≤–±—É–¥–æ–≤–∞–Ω–∏–π AI —Å–ø—Ä–æ–±—É—î –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!\n\n"
        f"–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é", callback_data="show_commission_info"))
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=markup)

@error_handler
def send_commission_info(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é –±–æ—Ç–∞."""
    commission_rate_percent = 10
    text = (
        f"üí∞ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é*\n\n"
        f"–ó–∞ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ —Å—Ç—è–≥—É—î—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è —É —Ä–æ–∑–º—ñ—Ä—ñ **{commission_rate_percent}%** –≤—ñ–¥ –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n"
        f"–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ', —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö—É—î —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —ó—ó —Å–ø–ª–∞—Ç–∏.\n\n"
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó (Monobank):\n`{MONOBANK_CARD_NUMBER}`\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.\n\n"
        f"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –≤–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–ª–∞—Ç–∏ –º–æ–∂–Ω–∞ –±—É–¥–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏'."
    )
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, text, parse_mode='Markdown')

@error_handler
def send_channel_link(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É."""
    chat_id = message.chat.id
    try:
        if not CHANNEL_ID:
            raise ValueError("CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É .env. –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")

        chat_info = bot.get_chat(CHANNEL_ID)
        channel_link = ""
        if chat_info.invite_link:
            channel_link = chat_info.invite_link
        elif chat_info.username:
            channel_link = f"https://t.me/{chat_info.username}"
        else:
            try:
                invite_link_obj = bot.create_chat_invite_link(CHANNEL_ID, member_limit=1)
                channel_link = invite_link_obj.invite_link
                logger.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É: {channel_link}")
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL_ID}: {e}")
                channel_link_part = str(CHANNEL_ID).replace("-100", "") 
                channel_link = f"https://t.me/c/{channel_link_part}"


        if not channel_link:
             raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")

        bot_username = bot.get_me().username
        referral_link = f"https://t.me/{bot_username}?start={chat_id}"

        invite_text = (
            f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
            f"üèÜ *–ü—Ä–∏–≤–æ–¥—å—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –≥—Ä–æ—à—ñ!*\n"
            f"–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –æ—Å–æ–±–∏—Å—Ç–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏. "
            f"–ö–æ–ª–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è, –≤–∏ —Å—Ç–∞—î—Ç–µ —É—á–∞—Å–Ω–∏–∫–æ–º —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤!\n\n"
            f"üîó *–í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è:*\n`{referral_link}`"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üèÜ –ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤", callback_data="show_winners_menu"))

        bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
        log_statistics('channel_visit', chat_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–±–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ù–∞ –∂–∞–ª—å, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback Query
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def callback_inline(call):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    action, *params = call.data.split('_')

    if action == 'admin':
        handle_admin_callbacks(call)
    elif action == 'approve' or action == 'reject':
        handle_product_moderation_callbacks(call)
    elif action == 'mod':
        # –†–æ–∑—à–∏—Ä–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è mod_edit_tags_ —Ç–∞ mod_request_photo_fix_
        if call.data.startswith("mod_edit_tags_"):
            product_id = int(call.data.split("_")[-1])
            user_data[call.from_user.id] = {'flow': 'mod_edit_tags', 'product_id': product_id}
            bot.send_message(call.from_user.id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id} (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –±–µ–∑ #):", 
                             reply_markup=types.ForceReply(selective=True))
            bot.answer_callback_query(call.id)
        elif call.data.startswith("mod_request_photo_fix_"):
            product_id = int(call.data.split("_")[-1])
            conn = get_db_connection()
            if not conn:
                bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î.")
                return
            cur = conn.cursor()
            try:
                cur.execute(pg_sql.SQL("SELECT seller_chat_id, product_name FROM products WHERE id = %s"), (product_id,))
                product = cur.fetchone()
                if product:
                    bot.send_message(product['seller_chat_id'], 
                                     f"‚ùóÔ∏è *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product['product_name']}'* (ID: {product_id}).\n"
                                     "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–¥–∞–ª—ñ—Ç—å —Ü–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏.",
                                     parse_mode='Markdown')
                    bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—é.")
                else:
                    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
                bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É.")
            finally:
                if conn:
                    conn.close()
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
    elif action == 'user': 
        handle_user_block_callbacks(call)
    
    elif action == 'sold' and len(params) > 1 and params[0] == 'my':
        handle_seller_sold_product(call)
    elif action == 'delete' and len(params) > 1 and params[0] == 'my':
        handle_delete_my_product(call)
    elif action == 'republish':
        handle_republish_product(call)
    elif call.data == "republish_limit_reached":
        # –¶—è –∫–Ω–æ–ø–∫–∞ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑'—è–≤–ª—è—Ç–∏—Å—è, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫
        bot.answer_callback_query(call.id, "–õ—ñ–º—ñ—Ç –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –∑–Ω—è—Ç–æ, —Ü—è –∫–Ω–æ–ø–∫–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞.")
    elif action == 'change' and len(params) > 0 and params[0] == 'price':
        handle_change_price_init(call)

    elif action == 'toggle' and len(params) > 0 and params[0] == 'favorite':
        handle_toggle_favorite(call)

    elif action == 'shipping':
        handle_shipping_choice(call)

    elif call.data == 'show_commission_info':
        send_commission_info(call)
    elif call.data == 'show_winners_menu':
        handle_winners_menu(call)
    elif action == 'winners':
        handle_show_winners(call)
    elif action == 'runraffle':
        handle_run_raffle(call)
    
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")

# Callbacks –¥–ª—è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
@error_handler
def handle_admin_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    action = call.data.split('_')[1]

    if action == "stats":
        send_admin_statistics(call)
    elif action == "pending":
        send_pending_products_for_moderation(call)
    elif action == "users":
        send_users_list(call)
    elif action == "block":
        bot.edit_message_text("–í–≤–µ–¥—ñ—Ç—å `chat_id` –∞–±–æ `@username` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id, parse_mode='Markdown')
        bot.register_next_step_handler(call.message, process_user_for_block_unblock)
    elif action == "commissions":
        send_admin_commissions_info(call)
    elif action == "ai_stats":
        send_admin_ai_statistics(call)
    elif action == "referrals":
        send_admin_referral_stats(call)

    bot.answer_callback_query(call.id)

@error_handler
def send_admin_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT status, COUNT(*) FROM products GROUP BY status;"))
        product_stats = dict(cur.fetchall())

        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM users;"))
        total_users = cur.fetchone()[0]

        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM users WHERE is_blocked = TRUE;"))
        blocked_users_count = cur.fetchone()[0]

        today_utc = datetime.now(timezone.utc).date()
        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM products WHERE DATE(created_at) = %s;"), (today_utc,))
        today_products = cur.fetchone()[0]
        
        cur.execute(pg_sql.SQL("SELECT SUM(likes_count) FROM products;"))
        total_likes = cur.fetchone()[0] or 0

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {blocked_users_count}\n\n"
        f"üì¶ *–¢–æ–≤–∞—Ä–∏:*\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {product_stats.get('pending', 0)}\n"
        f"‚Ä¢ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_stats.get('approved', 0)}\n"
        f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {product_stats.get('rejected', 0)}\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ: {product_stats.get('sold', 0)}\n"
        f"‚Ä¢ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è: {product_stats.get('expired', 0)}\n\n"
        f"üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ –¥–æ–¥–∞–Ω–æ:* {today_products}\n"
        f"üìà *–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:* {sum(product_stats.values())}\n"
        f"‚ù§Ô∏è *–í—Å—å–æ–≥–æ –ª–∞–π–∫—ñ–≤:* {total_likes}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

    bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown', reply_markup=markup)

@error_handler
def send_users_list(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT chat_id, username, first_name, is_blocked FROM users ORDER BY joined_at DESC LIMIT 20;"))
        users = cur.fetchall()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    if not users:
        response_text = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
    else:
        response_text = "üë• *–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
        for user in users:
            block_status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if user['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            username = f"@{user['username']}" if user['username'] else "–ù–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É"
            first_name = user['first_name'] if user['first_name'] else "–ù–µ–≤—ñ–¥–æ–º–µ —ñ–º'—è"
            response_text += f"- {first_name} ({username}) [ID: `{user['chat_id']}`] - {block_status}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

    bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id,
                         parse_mode='Markdown', reply_markup=markup)

@error_handler
def process_user_for_block_unblock(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º chat_id –∞–±–æ username –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    admin_chat_id = message.chat.id
    target_identifier = message.text.strip()
    target_chat_id = None

    conn = get_db_connection()
    if not conn:
        bot.send_message(admin_chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()

    try:
        if target_identifier.startswith('@'):
            username = target_identifier[1:]
            cur.execute(pg_sql.SQL("SELECT chat_id FROM users WHERE username = %s;"), (username,))
            result = cur.fetchone()
            if result:
                target_chat_id = result['chat_id']
            else:
                bot.send_message(admin_chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º `{target_identifier}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return
        else:
            try:
                target_chat_id = int(target_identifier)
                cur.execute(pg_sql.SQL("SELECT chat_id FROM users WHERE chat_id = %s;"), (target_chat_id,))
                if not cur.fetchone():
                    bot.send_message(admin_chat_id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
                    return
            except ValueError:
                bot.send_message(admin_chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π `chat_id` (—á–∏—Å–ª–æ) –∞–±–æ `@username`.")
                return

        if target_chat_id == ADMIN_CHAT_ID:
            bot.send_message(admin_chat_id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–µ–±–µ.")
            return

        if target_chat_id:
            current_status = is_user_blocked(target_chat_id)
            action_text = "–∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not current_status else "—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
            confirmation_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ {action_text} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É)?\n"

            markup = types.InlineKeyboardMarkup()
            if not current_status:
                markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_block_{target_chat_id}"))
            else:
                markup.add(types.InlineKeyboardButton("‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"user_unblock_{target_chat_id}"))
            markup.add(types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel_main"))

            bot.send_message(admin_chat_id, confirmation_text, reply_markup=markup, parse_mode='Markdown')
        else:
            bot.send_message(admin_chat_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {e}", exc_info=True)
        bot.send_message(admin_chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
    finally:
        if conn:
            conn.close()

@error_handler
def handle_user_block_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—ñ–¥ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    admin_chat_id = call.message.chat.id
    data_parts = call.data.split('_')
    action = data_parts[1]
    target_chat_id = int(data_parts[2])

    if action == 'block':
        success = set_user_block_status(admin_chat_id, target_chat_id, True)
        if success:
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_blocked', admin_chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
    elif action == 'unblock':
        success = set_user_block_status(admin_chat_id, target_chat_id, False)
        if success:
            bot.edit_message_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}` —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_unblocked', admin_chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.",
                                  chat_id=admin_chat_id, message_id=call.message.message_id, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

@error_handler
def send_pending_products_for_moderation(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags, created_at
            FROM products
            WHERE status = 'pending'
            ORDER BY created_at ASC
            LIMIT 5
        """))
        pending_products = cur.fetchall()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    if not pending_products:
        response_text = "üéâ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
        bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        return

    for product in pending_products:
        product_id = product['id']
        seller_chat_id = product['seller_chat_id']
        seller_username = product['seller_username'] if product['seller_username'] else "–ù–µ–º–∞—î"
        photos = json.loads(product['photos']) if product['photos'] else []
        geolocation_data = json.loads(product['geolocation']) if product['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = product['hashtags'] if product['hashtags'] else generate_hashtags(product['description'])
        
        created_at_local = product['created_at'].astimezone(timezone.utc).strftime('%d.%m.%Y %H:%M')

        admin_message_text = (
            f"üì© *–¢–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (ID: {product_id})*\n\n"
            f"üì¶ *–ù–∞–∑–≤–∞:* {product['product_name']}\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {product['price']}\n"
            f"üìù *–û–ø–∏—Å:* {product['description'][:500]}...\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation_data else '–ù—ñ'}\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {shipping_options_text}\n"
            f"üè∑Ô∏è *–•–µ—à—Ç–µ–≥–∏:* {hashtags}\n\n"
            f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* [{'@' + seller_username if seller_username != '–ù–µ–º–∞—î' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})\n"
            f"üì∏ *–§–æ—Ç–æ:* {len(photos)} —à—Ç.\n"
            f"üìÖ *–î–æ–¥–∞–Ω–æ:* {created_at_local}"
        )

        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(
            types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{product_id}"),
            types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        )
        markup_admin.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
            types.InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ", callback_data=f"mod_request_photo_fix_{product_id}") 
        )
        
        try:
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=admin_message_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                bot.send_media_group(call.message.chat.id, media)
                
                bot.send_message(call.message.chat.id, f"üëÜ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", reply_markup=markup_admin, parse_mode='Markdown')
            else:
                bot.send_message(call.message.chat.id, admin_message_text,
                                   parse_mode='Markdown',
                                   reply_markup=markup_admin)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.send_message(call.message.chat.id, "‚¨ÜÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤–∏—â–µ.", reply_markup=markup)

@error_handler
def send_admin_commissions_info(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                SUM(CASE WHEN status = 'pending_payment' THEN amount ELSE 0 END) AS total_pending,
                SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS total_paid
            FROM commission_transactions;
        """))
        commission_summary = cur.fetchone()

        cur.execute(pg_sql.SQL("""
            SELECT ct.product_id, p.product_name, p.seller_chat_id, u.username, ct.amount, ct.status, ct.created_at
            FROM commission_transactions ct
            JOIN products p ON ct.product_id = p.id
            JOIN users u ON p.seller_chat_id = u.chat_id
            ORDER BY ct.created_at DESC
            LIMIT 10;
        """))
        recent_transactions = cur.fetchall()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    text = (
        f"üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º—ñ—Å—ñ–π*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è: *{commission_summary['total_pending'] or 0:.2f} –≥—Ä–Ω*\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ —Å–ø–ª–∞—á–µ–Ω–æ: *{commission_summary['total_paid'] or 0:.2f} –≥—Ä–Ω*\n\n"
        f"üìä *–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:*\n"
    )

    if recent_transactions:
        for tx in recent_transactions:
            username = f"@{tx['username']}" if tx['username'] else f"ID: {tx['seller_chat_id']}"
            created_at_local = tx['created_at'].astimezone(timezone.utc).strftime('%d.%m.%Y %H:%M')
            text += (
                f"- –¢–æ–≤–∞—Ä ID `{tx['product_id']}` ({tx['product_name']})\n"
                f"  –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {username}\n"
                f"  –°—É–º–∞: {tx['amount']:.2f} –≥—Ä–Ω, –°—Ç–∞—Ç—É—Å: {tx['status']}\n"
                f"  –î–∞—Ç–∞: {created_at_local}\n\n"
            )
    else:
        text += "  –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ–º—ñ—Å—ñ–π.\n\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@error_handler
def send_admin_ai_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –ø–æ–º—ñ—á–Ω–∏–∫–∞."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM conversations WHERE sender_type = 'user';"))
        total_user_queries = cur.fetchone()[0]

        cur.execute(pg_sql.SQL("""
            SELECT user_chat_id, COUNT(*) as query_count
            FROM conversations
            WHERE sender_type = 'user'
            GROUP BY user_chat_id
            ORDER BY query_count DESC
            LIMIT 5;
        """))
        top_ai_users = cur.fetchall()

        cur.execute(pg_sql.SQL("""
            SELECT DATE(timestamp) as date, COUNT(*) as query_count
            FROM conversations
            WHERE sender_type = 'user'
            GROUP BY DATE(timestamp)
            ORDER BY date DESC
            LIMIT 7;
        """))
        daily_ai_queries = cur.fetchall()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    text = (
        f"ü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ü–æ–º—ñ—á–Ω–∏–∫–∞*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ AI: *{total_user_queries}*\n\n"
        f"üìä *–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ AI:*\n"
    )
    if top_ai_users:
        for user_data_row in top_ai_users:
            user_id = user_data_row['user_chat_id']
            query_count = user_data_row['query_count']
            user_info = None
            try:
                user_info = bot.get_chat(user_id)
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")

            username = f"@{user_info.username}" if user_info and user_info.username else f"ID: {user_id}"
            text += f"- {username}: {query_count} –∑–∞–ø–∏—Ç—ñ–≤\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    text += "\nüìÖ *–ó–∞–ø–∏—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n"
    if daily_ai_queries:
        for day_data_row in daily_ai_queries:
            text += f"- {day_data_row['date']}: {day_data_row['query_count']} –∑–∞–ø–∏—Ç—ñ–≤\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

@error_handler
def send_admin_referral_stats(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM users WHERE referrer_id IS NOT NULL;"))
        total_referrals = cur.fetchone()[0]

        cur.execute(pg_sql.SQL("""
            SELECT referrer_id, COUNT(*) as invited_count
            FROM users
            WHERE referrer_id IS NOT NULL
            GROUP BY referrer_id
            ORDER BY invited_count DESC
            LIMIT 5;
        """))
        top_referrers = cur.fetchall()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", call.message.chat.id, call.message.message_id)
        return
    finally:
        if conn:
            conn.close()

    text = (
        f"üèÜ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤*\n\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *{total_referrals}*\n\n"
        f"üìä *–¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤:*\n"
    )
    if top_referrers:
        for referrer_row in top_referrers:
            referrer_id = referrer_row['referrer_id']
            invited_count = referrer_row['invited_count']
            referrer_info = None
            try:
                referrer_info = bot.get_chat(referrer_id)
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
            username = f"@{referrer_info.username}" if referrer_info and referrer_info.username else f"ID: {referrer_id}"
            text += f"- {username}: {invited_count} –∑–∞–ø—Ä–æ—à–µ–Ω—å\n"
    else:
        text += "  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))
    markup.add(types.InlineKeyboardButton("üé≤ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à", callback_data="runraffle_week"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

# Callbacks –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑ —á–∞—Å—Ç–∏–Ω–∏ 1)
@error_handler
def handle_product_moderation_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑—ñ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è–º, –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è–º –∞–±–æ –≤—ñ–¥–º—ñ—Ç–∫–æ—é "–ø—Ä–æ–¥–∞–Ω–æ" –¥–ª—è —Ç–æ–≤–∞—Ä—É."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    data_parts = call.data.split('_')
    action = data_parts[0]
    product_id = int(data_parts[1])

    conn = get_db_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()
    product_info = None
    try:
        cur.execute(pg_sql.SQL("""
            SELECT seller_chat_id, product_name, price, description, photos, geolocation, admin_message_id, channel_message_id, status
            FROM products WHERE id = %s;
        """), (product_id,))
        product_info = cur.fetchone()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä.")
        if conn: conn.close()
        return

    if not product_info:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        if conn: conn.close()
        return

    seller_chat_id = product_info['seller_chat_id']
    product_name = product_info['product_name']
    price_str = product_info['price']
    description = product_info['description']
    photos_str = product_info['photos']
    geolocation_str = product_info['geolocation']
    admin_message_id = product_info['admin_message_id']
    channel_message_id = product_info['channel_message_id']
    current_status = product_info['status']

    photos = json.loads(photos_str) if photos_str else []
    geolocation = json.loads(geolocation_str) if geolocation_str else None
    hashtags = generate_hashtags(description)

    try:
        if action == 'approve':
            if current_status != 'pending':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                return

            shipping_options_text = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            try:
                cur.execute(pg_sql.SQL("SELECT shipping_options, hashtags FROM products WHERE id = %s;"), (product_id,))
                product_details_for_publish = cur.fetchone()
                if product_details_for_publish:
                    if product_details_for_publish['shipping_options']:
                        shipping_options_text = ", ".join(json.loads(product_details_for_publish['shipping_options']))
                    if product_details_for_publish['hashtags']:
                        hashtags = product_details_for_publish['hashtags']
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ shipping_options –∞–±–æ hashtags –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")
            
            # –ó–º—ñ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–∞–Ω–∞–ª—É
            channel_text = (
                f"*{product_name}*\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üì¶ –ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä: "
                f"{price_str}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üí∞ –¶—ñ–Ω–∞: "
                f"{shipping_options_text}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üöö –î–æ—Å—Ç–∞–≤–∫–∞: "
                f"{description}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üìù –û–ø–∏—Å:\n"
            )
            if geolocation: # –î–æ–¥–∞–Ω–æ —É–º–æ–≤—É –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
                channel_text += f"{geolocation['latitude']}, {geolocation['longitude']}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: "
            
            channel_text += f"{hashtags}\n\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: "
            channel_text += f"–ö–æ–Ω—Ç–∞–∫—Ç: [–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é](tg://user?id={seller_chat_id})" # –ó–º—ñ–Ω–µ–Ω–æ "üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: "

            published_message = None
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=channel_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                sent_messages = bot.send_media_group(CHANNEL_ID, media)
                published_message = sent_messages[0] if sent_messages else None
            else:
                published_message = bot.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown')

            if published_message:
                like_markup = types.InlineKeyboardMarkup()
                like_markup.add(types.InlineKeyboardButton("‚ù§Ô∏è 0", callback_data=f"toggle_favorite_{product_id}_{published_message.message_id}")) 
                
                like_message = bot.send_message(CHANNEL_ID, "üëá –û—Ü—ñ–Ω—ñ—Ç—å —Ç–æ–≤–∞—Ä!", 
                                                 reply_to_message_id=published_message.message_id, 
                                                 reply_markup=like_markup,
                                                 parse_mode='Markdown')


                new_channel_message_id = like_message.message_id
                cur.execute(pg_sql.SQL("""
                    UPDATE products SET status = 'approved', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP,
                    channel_message_id = %s, views = 0, likes_count = 0
                    WHERE id = %s;
                """), (call.message.chat.id, new_channel_message_id, product_id))
                conn.commit()
                log_statistics('product_approved', call.message.chat.id, product_id)

                bot.send_message(seller_chat_id,
                                 f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ! [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](https://t.me/c/{str(CHANNEL_ID).replace('-100', '')}/{published_message.message_id})",
                                 parse_mode='Markdown', disable_web_page_preview=True)
                
                if admin_message_id:
                    bot.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.",
                                          chat_id=call.message.chat.id, message_id=admin_message_id, parse_mode='Markdown')
                    markup_sold = types.InlineKeyboardMarkup()
                    markup_sold.add(types.InlineKeyboardButton("üí∞ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_{product_id}"))
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=admin_message_id, reply_markup=markup_sold)
                else:
                    bot.send_message(call.message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")

            else:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª.")

        elif action == 'reject':
            if current_status != 'pending':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'.")
                return

            cur.execute(pg_sql.SQL("""
                UPDATE products SET status = 'rejected', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP
                WHERE id = %s;
            """), (call.message.chat.id, product_id))
            conn.commit()
            log_statistics('product_rejected', call.message.chat.id, product_id)

            bot.send_message(seller_chat_id,
                             f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                             "–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏: –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º, –Ω–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–µ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å.\n"
                             "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–Ω–æ–≤—É.",
                             parse_mode='Markdown')
            
            if admin_message_id:
                bot.edit_message_text(f"‚ùå –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.",
                                      chat_id=call.message.chat.id, message_id=admin_message_id, parse_mode='Markdown')
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=admin_message_id, reply_markup=None)
            else:
                bot.send_message(call.message.chat.id, f"‚ùå –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")


        elif action == 'sold':
            if current_status != 'approved':
                bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: '{current_status}').")
                return

            if channel_message_id:
                try:
                    cur.execute(pg_sql.SQL("""
                        UPDATE products SET status = 'sold', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP
                        WHERE id = %s;
                    """), (call.message.chat.id, product_id))
                    conn.commit()
                    log_statistics('product_sold', call.message.chat.id, product_id)

                    original_message_for_edit = None
                    try:
                        # Attempt to get the original message from the channel using forward (might fail for media groups directly)
                        # This part is complex due to Telegram API limitations on editing media groups.
                        # For simplicity, we'll construct a new sold message.
                        sold_text = (
                            f"üì¶ *–ü–†–û–î–ê–ù–û!* {product_name}\n\n"
                            f"{price_str}\n" # –ó–º—ñ–Ω–µ–Ω–æ: –ø—Ä–∏–±—Ä–∞–Ω–æ "üí∞ –¶—ñ–Ω–∞: "
                            f"{description}\n\n" # –ó–º—ñ–Ω–µ–Ω–æ: –ø—Ä–∏–±—Ä–∞–Ω–æ "üìù –û–ø–∏—Å:\n"
                            f"*–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.*"
                        )
                        # –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–π–∫-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        bot.delete_message(CHANNEL_ID, channel_message_id)
                        # –Ø–∫—â–æ —Ü–µ –±—É–ª–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∞, —Ç–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –π –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        # –¢—É—Ç –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ channel_message_id - —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ª–∞–π–∫–∞–º–∏, —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–µ.
                        # –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –æ–∫—Ä–µ–º–∏–º —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç–æ–º, –π–æ–≥–æ message_id –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.
                        # –©–æ–± –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Ç—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –π–æ–≥–æ message_id –æ–∫—Ä–µ–º–æ.
                        # –ù–∞—Ä–∞–∑—ñ, –±—É–¥–µ–º–æ –≤–≤–∞–∂–∞—Ç–∏, —â–æ –∫–∞–Ω–∞–ª_–º–µ—Å—Å–µ–¥–∂_—ñ–¥ - —Ü–µ —Ç–µ, —â–æ –º–∏ –≤–∏–¥–∞–ª—è—î–º–æ.
                    except Exception as e_fetch_original:
                        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –∑ –∫–∞–Ω–∞–ª—É: {e_fetch_original}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç.")
                        sold_text = (
                            f"üì¶ *–ü–†–û–î–ê–ù–û!* {product_name}\n\n"
                            f"{price_str}\n"
                            f"{description}\n\n"
                            f"*–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.*"
                        )

                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é "–ü–†–û–î–ê–ù–û"
                    if photos:
                        media_group_id = photos[0] # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π —Ñ–æ—Ç–æ ID –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏
                        # bot.edit_message_caption –Ω–µ –ø—Ä–∞—Ü—é—î –¥–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø, —Ç–æ–º—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        bot.send_photo(CHANNEL_ID, photos[0], caption=sold_text, parse_mode='Markdown', reply_markup=None)
                        # –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É
                    else:
                        bot.send_message(CHANNEL_ID, sold_text, parse_mode='Markdown', reply_markup=None)
                    
                    bot.send_message(seller_chat_id, f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ *'–ü–†–û–î–ê–ù–û'*. –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!", parse_mode='Markdown')
                    
                    if admin_message_id:
                        bot.edit_message_text(f"üí∞ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.",
                                              chat_id=call.message.chat.id, message_id=admin_message_id, parse_mode='Markdown')
                        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=admin_message_id, reply_markup=None)
                    else:
                        bot.send_message(call.message.chat.id, f"üí∞ –¢–æ–≤–∞—Ä *'{product_name}'* (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")

                except telebot.apihelper.ApiTelegramException as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –≤ –∫–∞–Ω–∞–ª—ñ: {e}", exc_info=True)
                    bot.send_message(call.message.chat.id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂—É –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}. –ú–æ–∂–ª–∏–≤–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                    bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
                    return
            else:
                bot.send_message(call.message.chat.id, "–¶–µ–π —Ç–æ–≤–∞—Ä —â–µ –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—î. –ù–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}, –¥—ñ—è {action}: {e}", exc_info=True)
        bot.send_message(call.message.chat.id, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó '{action}' –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}.")
    finally:
        if conn:
            conn.close()
    bot.answer_callback_query(call.id)

@error_handler
def handle_seller_sold_product(call):
    """–û–±—Ä–æ–±–ª—è—î –¥—ñ—é "–ü—Ä–æ–¥–∞–Ω–æ" –≤—ñ–¥ –ø—Ä–æ–¥–∞–≤—Ü—è."""
    seller_chat_id = call.message.chat.id
    product_id = int(call.data.split('_')[2])

    conn = get_db_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()
    product_info = None
    try:
        cur.execute(pg_sql.SQL("""
            SELECT product_name, price, description, photos, channel_message_id, status, commission_rate
            FROM products WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, seller_chat_id))
        product_info = cur.fetchone()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂—É: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä.")
        if conn: conn.close()
        return

    if not product_info:
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ —î –π–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–µ–º.")
        if conn: conn.close()
        return

    product_name = product_info['product_name']
    price_str = product_info['price']
    description = product_info['description']
    photos_str = product_info['photos']
    channel_message_id = product_info['channel_message_id']
    current_status = product_info['status']
    commission_rate = product_info['commission_rate']

    photos = json.loads(photos_str) if photos_str else []

    if current_status != 'approved':
        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –º–∞—î —Å—Ç–∞—Ç—É—Å '{current_status}'. –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–æ –º–æ–∂–Ω–∞ –ª–∏—à–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä.")
        return

    try:
        commission_amount = 0.0
        try:
            cleaned_price_str = re.sub(r'[^\d.]', '', price_str)
            if cleaned_price_str:
                numeric_price = float(cleaned_price_str)
                commission_amount = numeric_price * commission_rate
            else:
                bot.send_message(seller_chat_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞: –¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É '{product_name}' –Ω–µ —î —á–∏—Å–ª–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º ('{price_str}'). –ö–æ–º—ñ—Å—ñ—è –Ω–µ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–≥–æ–≤–æ—Ä—ñ—Ç—å —ó—ó –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except ValueError:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É '{price_str}' —Ç–æ–≤–∞—Ä—É {product_id} –≤ —á–∏—Å–ª–æ. –ö–æ–º—ñ—Å—ñ—è –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞.")
            bot.send_message(seller_chat_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product_name}' –∑ —Ü—ñ–Ω–æ—é '{price_str}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            
        cur.execute(pg_sql.SQL("""
            UPDATE products SET status = 'sold', commission_amount = %s, updated_at = CURRENT_TIMESTAMP
            WHERE id = %s;
        """), (commission_amount, product_id))

        if commission_amount > 0:
            cur.execute(pg_sql.SQL("""
                INSERT INTO commission_transactions (product_id, seller_chat_id, amount, status)
                VALUES (%s, %s, %s, 'pending_payment');
            """), (product_id, seller_chat_id, commission_amount))
            bot.send_message(seller_chat_id, 
                             f"üí∞ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ *'–ü–†–û–î–ê–ù–û'*! üéâ\n\n"
                             f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∫–æ–º—ñ—Å—ñ—è —Å–∫–ª–∞–¥–∞—î: *{commission_amount:.2f} –≥—Ä–Ω*.\n"
                             f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—Ç—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é –Ω–∞ –∫–∞—Ä—Ç–∫—É Monobank:\n`{MONOBANK_CARD_NUMBER}`\n\n"
                             f"–î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!", parse_mode='Markdown')
        else:
            bot.send_message(seller_chat_id, f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' (ID: {product_id}) –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ *'–ü–†–û–î–ê–ù–û'*! üéâ\n\n"
                             f"–û—Å–∫—ñ–ª—å–∫–∏ —Ü—ñ–Ω–∞ –±—É–ª–∞ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞ –∞–±–æ –Ω–µ—á–∏—Å–ª–æ–≤–∞, –∫–æ–º—ñ—Å—ñ—è –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –Ø–∫—â–æ –∫–æ–º—ñ—Å—ñ—è —î, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='Markdown')


        conn.commit()
        log_statistics('product_sold_by_seller', seller_chat_id, product_id, f"–ö–æ–º—ñ—Å—ñ—è: {commission_amount}")

        if channel_message_id:
            try:
                # –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–π–∫-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                bot.delete_message(CHANNEL_ID, channel_message_id)
                logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id} –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –∑ –∫–∞–Ω–∞–ª—É.")
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id} –∑ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            sold_text = (
                f"*{product_name}*\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üì¶ –ü–†–û–î–ê–ù–û! "
                f"{price_str}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üí∞ –¶—ñ–Ω–∞: "
                f"{description}\n\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üìù –û–ø–∏—Å:\n"
                f"*–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ –ø—Ä–æ–¥–∞–Ω–æ.*"
            )

            try:
                if photos:
                    # –Ø–∫—â–æ —Ü–µ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ, —Ç–æ–º—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    bot.send_photo(CHANNEL_ID, photos[0], caption=sold_text, parse_mode='Markdown', reply_markup=None)
                else:
                    # –Ø–∫—â–æ —Ü–µ –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
                    bot.send_message(CHANNEL_ID, sold_text, parse_mode='Markdown', reply_markup=None)
            except telebot.apihelper.ApiTelegramException as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
                bot.send_message(seller_chat_id, f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product_name}'. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ "–ú–æ—ó—Ö —Ç–æ–≤–∞—Ä–∞—Ö"
        current_message_text = call.message.text
        updated_message_text_lines = current_message_text.splitlines()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä—è–¥–∫–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ (–ø–µ—Ä–µ–≥–ª—è–¥–∏, –ª–∞–π–∫–∏, –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó/—Ü—ñ–Ω–∏)
        filtered_lines = [
            line for line in updated_message_text_lines 
            if not any(keyword in line for keyword in ["üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥–∏:", "‚ù§Ô∏è –õ–∞–π–∫–∏:", "üîÅ –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", "‚ùå –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É"])
        ]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—Å—Ç—ñ
        updated_message_text = "\n".join(filtered_lines)
        updated_message_text = updated_message_text.replace("üìä –°—Ç–∞—Ç—É—Å: –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", "üìä –°—Ç–∞—Ç—É—Å: –ø—Ä–æ–¥–∞–Ω–æ")

        bot.edit_message_text(updated_message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', disable_web_page_preview=True)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)


    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—É {product_id} –ø—Ä–æ–¥–∞–≤—Ü–µ–º: {e}", exc_info=True)
        bot.send_message(seller_chat_id, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–º—ñ—Ç—Ü—ñ —Ç–æ–≤–∞—Ä—É '{product_name}' —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ.")
    finally:
        if conn:
            conn.close()
    bot.answer_callback_query(call.id)


@error_handler
def handle_republish_product(call):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —Ç–æ–≤–∞—Ä—É."""
    seller_chat_id = call.message.chat.id
    product_id = int(call.data.split('_')[1])

    conn = get_db_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()

    try:
        cur.execute(pg_sql.SQL("""
            SELECT product_name, price, description, photos, channel_message_id, status, geolocation, shipping_options, hashtags
            FROM products WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, seller_chat_id))
        product_info = cur.fetchone()

        if not product_info:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ —î –π–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–µ–º.")
            return

        if product_info['status'] != 'approved':
            bot.answer_callback_query(call.id, "–ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä.")
            return

        if product_info['channel_message_id']:
            try:
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ª–∞–π–∫–æ–º (—è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è)
                bot.delete_message(CHANNEL_ID, product_info['channel_message_id']) 
                logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ª–∞–π–∫–æ–º {product_info['channel_message_id']} –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –∑ –∫–∞–Ω–∞–ª—É.")

                # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —è–∫—â–æ —î —Ñ–æ—Ç–æ, —Ç–æ –æ—Å–Ω–æ–≤–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ —è–∫ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∞ –∞–±–æ –æ–∫—Ä–µ–º–µ —Ñ–æ—Ç–æ,
                # —ñ –π–æ–≥–æ message_id –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ channel_message_id.
                # –î–ª—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–ª–æ –± –∑–±–µ—Ä–µ–≥—Ç–∏ ID –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
                # –Ø–∫—â–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –±–µ–∑ —Ñ–æ—Ç–æ, channel_message_id –±—É–¥–µ ID —Å–∞–º–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
                # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Å—Ç–∞—Ä–µ –±—É–¥–µ "–∑–∞–º—ñ–Ω–µ–Ω–æ".
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {product_info['channel_message_id']} –∑ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")
        
        photos = json.loads(product_info['photos']) if product_info['photos'] else []
        shipping_options_text = ", ".join(json.loads(product_info['shipping_options'])) if product_info['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = product_info['hashtags'] if product_info['hashtags'] else generate_hashtags(product_info['description'])
        geolocation_data = json.loads(product_info['geolocation']) if product_info['geolocation'] else None

        # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–∞–Ω–∞–ª—É
        channel_text = (
            f"*{product_info['product_name']}*\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üì¶ –ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä: "
            f"{product_info['price']}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üí∞ –¶—ñ–Ω–∞: "
            f"{shipping_options_text}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üöö –î–æ—Å—Ç–∞–≤–∫–∞: "
            f"{product_info['description']}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üìù –û–ø–∏—Å:\n"
        )
        if geolocation_data: # –î–æ–¥–∞–Ω–æ —É–º–æ–≤—É –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
            channel_text += f"{geolocation_data['latitude']}, {geolocation_data['longitude']}\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: "
        
        channel_text += f"{hashtags}\n\n" # –ü—Ä–∏–±—Ä–∞–Ω–æ "üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: "
        channel_text += f"–ö–æ–Ω—Ç–∞–∫—Ç: [–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é](tg://user?id={seller_chat_id})" # –ó–º—ñ–Ω–µ–Ω–æ "üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: "
        
        published_message = None
        if photos:
            media = [types.InputMediaPhoto(photo_id, caption=channel_text if i == 0 else None, parse_mode='Markdown') 
                     for i, photo_id in enumerate(photos)]
            sent_messages = bot.send_media_group(CHANNEL_ID, media)
            published_message = sent_messages[0] if sent_messages else None
        else:
            published_message = bot.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown')

        if published_message:
            # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            like_markup = types.InlineKeyboardMarkup()
            like_markup.add(types.InlineKeyboardButton("‚ù§Ô∏è 0", callback_data=f"toggle_favorite_{product_id}_{published_message.message_id}")) 
            
            like_message = bot.send_message(CHANNEL_ID, "üëá –û—Ü—ñ–Ω—ñ—Ç—å —Ç–æ–≤–∞—Ä!", 
                                             reply_to_message_id=published_message.message_id, 
                                             reply_markup=like_markup,
                                             parse_mode='Markdown')

            new_channel_message_id = like_message.message_id
            
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ `republish_count` —Ç–∞ `last_republish_date`
            cur.execute(pg_sql.SQL("""
                UPDATE products SET 
                    channel_message_id = %s, 
                    views = 0, 
                    likes_count = 0,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = %s;
            """), (new_channel_message_id, product_id))
            conn.commit()
            log_statistics('product_republished', seller_chat_id, product_id)

            bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä '{product_info['product_name']}' —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
            bot.send_message(seller_chat_id,
                             f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product_info['product_name']}' —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](https://t.me/c/{str(CHANNEL_ID).replace('-100', '')}/{published_message.message_id})",
                             parse_mode='Markdown', disable_web_page_preview=True)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ "–ú–æ—ó—Ö —Ç–æ–≤–∞—Ä–∞—Ö"
            current_message_text = call.message.text
            updated_message_text_lines = current_message_text.splitlines()
            
            new_lines = []
            for line in updated_message_text_lines:
                if "üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥–∏:" in line:
                    new_lines.append(f"   üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥–∏: 0")
                elif "‚ù§Ô∏è –õ–∞–π–∫–∏:" in line:
                    new_lines.append(f"   ‚ù§Ô∏è –õ–∞–π–∫–∏: 0")
                elif "üîÅ –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏" in line or "‚ùå –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏" in line: # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
                    new_lines.append(f"   üîÅ –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏") # –ë—ñ–ª—å—à–µ –±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤
                else:
                    new_lines.append(line)
            updated_message_text = "\n".join(new_lines)
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            channel_link_part = str(CHANNEL_ID).replace("-100", "") 
            channel_url = f"https://t.me/c/{channel_link_part}/{published_message.message_id}"
            markup.add(types.InlineKeyboardButton("üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ", url=channel_url))
            
            markup.add(types.InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"republish_{product_id}")) # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –ª—ñ–º—ñ—Ç—É

            markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_my_{product_id}"))
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{product_id}"))
            markup.add(types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_my_{product_id}"))

            bot.edit_message_text(updated_message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup, disable_web_page_preview=True)


        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä.")
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")

    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id} –≤ Telegram API: {e}", exc_info=True)
        bot.answer_callback_query(call.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram API –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        bot.answer_callback_query(call.id, f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É.")
    finally:
        if conn:
            conn.close()

@error_handler
def handle_delete_my_product(call):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –ø—Ä–æ–¥–∞–≤—Ü–µ–º."""
    seller_chat_id = call.message.chat.id
    product_id = int(call.data.split('_')[2]) 

    conn = get_db_connection()
    if not conn:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()

    try:
        cur.execute(pg_sql.SQL("""
            SELECT product_name, channel_message_id, status FROM products
            WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, seller_chat_id))
        product_info = cur.fetchone()

        if not product_info:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ —î –π–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–µ–º.")
            return

        product_name = product_info['product_name']
        channel_message_id = product_info['channel_message_id']
        current_status = product_info['status']

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        cur.execute(pg_sql.SQL("DELETE FROM commission_transactions WHERE product_id = %s;"), (product_id,))
        cur.execute(pg_sql.SQL("DELETE FROM favorites WHERE product_id = %s;"), (product_id,))
        cur.execute(pg_sql.SQL("DELETE FROM conversations WHERE product_id = %s;"), (product_id,))
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
        cur.execute(pg_sql.SQL("DELETE FROM products WHERE id = %s;"), (product_id,))
        conn.commit()
        
        if channel_message_id:
            try:
                bot.delete_message(CHANNEL_ID, channel_message_id)
                logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id} –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –∑ –∫–∞–Ω–∞–ª—É.")
            except telebot.apihelper.ApiTelegramException as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id} –∑ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")
        
        log_statistics('product_deleted', seller_chat_id, product_id)

        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        bot.send_message(seller_chat_id, f"üóëÔ∏è –í–∞—à —Ç–æ–≤–∞—Ä '{product_name}' (ID: {product_id}) –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu_markup)
        
        bot.delete_message(call.message.chat.id, call.message.message_id) 
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É {product_id} –ø—Ä–æ–¥–∞–≤—Ü–µ–º: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.")
    finally:
        if conn:
            conn.close()

@error_handler
def handle_change_price_init(call):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    chat_id = call.message.chat.id
    product_id = int(call.data.split('_')[2])

    user_data[chat_id] = {
        'flow': 'change_price',
        'product_id': product_id
    }
    
    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `500 –≥—Ä–Ω` –∞–±–æ `–î–æ–≥–æ–≤—ñ—Ä–Ω–∞`):", 
                     reply_markup=types.ForceReply(selective=True))

@error_handler
def process_new_price(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –Ω–æ–≤—É —Ü—ñ–Ω—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ç–æ–≤–∞—Ä —É –ë–î —Ç–∞ –∫–∞–Ω–∞–ª—ñ."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'change_price':
        bot.send_message(chat_id, "–í–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é.", reply_markup=main_menu_markup)
        return

    product_id = user_data[chat_id]['product_id']
    new_price = message.text.strip()

    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        del user_data[chat_id]
        return
    cur = conn.cursor()

    try:
        cur.execute(pg_sql.SQL("SELECT seller_chat_id, product_name, channel_message_id FROM products WHERE id = %s;"), (product_id,))
        product_info = cur.fetchone()

        if not product_info or product_info['seller_chat_id'] != chat_id:
            bot.send_message(chat_id, "‚ùå –í–∏ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É.")
            return

        cur.execute(pg_sql.SQL("""
            UPDATE products SET price = %s, updated_at = CURRENT_TIMESTAMP
            WHERE id = %s;
        """), (new_price, product_id))
        conn.commit()

        bot.send_message(chat_id, f"‚úÖ –¶—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product_info['product_name']}' (ID: {product_id}) –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu_markup)
        log_statistics('price_changed', chat_id, product_id, f"–ù–æ–≤–∞ —Ü—ñ–Ω–∞: {new_price}")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –∑ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é
        if product_info['channel_message_id']:
            conn_channel = get_db_connection()
            if conn_channel:
                try:
                    cur_channel = conn_channel.cursor()
                    cur_channel.execute(pg_sql.SQL("SELECT * FROM products WHERE id = %s"), (product_id,))
                    product_for_channel_update = cur_channel.fetchone()
                    if product_for_channel_update:
                        photos = json.loads(product_for_channel_update['photos'] or '[]')
                        shipping = ", ".join(json.loads(product_for_channel_update['shipping_options'] or '[]')) or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
                        product_hashtags = product_for_channel_update['hashtags'] if product_for_channel_update['hashtags'] else generate_hashtags(product_for_channel_update['description'])
                        geolocation_data = json.loads(product_for_channel_update['geolocation']) if product_for_channel_update['geolocation'] else None

                        channel_text = (
                            f"*{product_for_channel_update['product_name']}*\n"
                            f"{product_for_channel_update['price']}\n"
                            f"{shipping}\n"
                            f"{product_for_channel_update['description']}\n"
                        )
                        if geolocation_data:
                            channel_text += f"{geolocation_data['latitude']}, {geolocation_data['longitude']}\n"
                        
                        channel_text += f"{product_hashtags}\n\n"
                        channel_text += f"–ö–æ–Ω—Ç–∞–∫—Ç: [–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é](tg://user?id={product_for_channel_update['seller_chat_id']})"

                        # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É, –ª–æ–≥—ñ—á–Ω—ñ—à–µ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏, –∞ –Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        # –ê–±–æ, —è–∫—â–æ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª–∏—à–µ —á–∞—Å—Ç–∏–Ω—É.
                        # –ù–∞—Ä–∞–∑—ñ, –±—É–¥–µ–º–æ –≤–∏–¥–∞–ª—è—Ç–∏ —Å—Ç–∞—Ä–µ —ñ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤–µ, —è–∫ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                        if product_for_channel_update['channel_message_id']:
                            try:
                                bot.delete_message(CHANNEL_ID, product_for_channel_update['channel_message_id'])
                                logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {product_for_channel_update['channel_message_id']} –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –∑ –∫–∞–Ω–∞–ª—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏.")
                            except Exception as e:
                                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {product_for_channel_update['channel_message_id']} –∑ –∫–∞–Ω–∞–ª—É –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")

                        published_message = None
                        if photos:
                            media = [types.InputMediaPhoto(p, caption=channel_text if i == 0 else '', parse_mode='Markdown') for i, p in enumerate(photos)]
                            sent_messages = bot.send_media_group(CHANNEL_ID, media)
                            published_message = sent_messages[0]
                        else:
                            published_message = bot.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown')

                        if published_message:
                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ likes_count –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ, –Ω–µ —Å–∫–∏–¥–∞—î–º–æ
                            current_likes_count = product_for_channel_update['likes_count']
                            like_markup = types.InlineKeyboardMarkup()
                            like_markup.add(types.InlineKeyboardButton(f"‚ù§Ô∏è {current_likes_count}", callback_data=f"toggle_favorite_{product_id}_{published_message.message_id}")) 
                            
                            like_message = bot.send_message(CHANNEL_ID, "üëá –û—Ü—ñ–Ω—ñ—Ç—å —Ç–æ–≤–∞—Ä!", 
                                                             reply_to_message_id=published_message.message_id, 
                                                             reply_markup=like_markup,
                                                             parse_mode='Markdown')
                            
                            cur_channel.execute(pg_sql.SQL("""
                                UPDATE products SET channel_message_id = %s, updated_at = CURRENT_TIMESTAMP
                                WHERE id = %s;
                            """), (like_message.message_id, product_id))
                            conn_channel.commit()
                            bot.send_message(chat_id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é.")
                        else:
                            bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.")
                finally:
                    conn_channel.close()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ü—ñ–Ω–∏.")
    finally:
        if conn:
            conn.close()
        if chat_id in user_data:
            del user_data[chat_id]

# –õ–æ–≥—ñ–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@error_handler
def handle_moderator_actions(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –¥—ñ—è–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ö–µ—à—Ç–µ–≥—ñ–≤, –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ)."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    _, action, product_id_str = call.data.split('_', 2)

    product_id = int(product_id_str)

    if action == 'edit_tags':
        user_data[ADMIN_CHAT_ID] = {
            'flow': 'mod_edit_tags',
            'product_id': product_id
        }
        bot.answer_callback_query(call.id)
        bot.send_message(ADMIN_CHAT_ID, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id} (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –±–µ–∑ #):",
                         reply_markup=types.ForceReply(selective=True))
    elif action == 'request_photo_fix':
        conn = get_db_connection()
        if not conn:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î.")
            return
        cur = conn.cursor()
        try:
            cur.execute(pg_sql.SQL("SELECT seller_chat_id, product_name FROM products WHERE id = %s"), (product_id,))
            product = cur.fetchone()
            if product:
                bot.send_message(product['seller_chat_id'], 
                                 f"‚ùóÔ∏è *–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product['product_name']}'* (ID: {product_id}).\n"
                                 "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–¥–∞–ª—ñ—Ç—å —Ü–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏.",
                                 parse_mode='Markdown')
                bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—é.")
            else:
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        finally:
            if conn:
                conn.close()
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")


@error_handler
def process_new_hashtags_mod(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –≤–≤—ñ–¥ —Ö–µ—à—Ç–µ–≥—ñ–≤ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î —ó—Ö –≤ –ë–î."""
    chat_id = message.chat.id
    if chat_id != ADMIN_CHAT_ID or chat_id not in user_data or user_data[chat_id].get('flow') != 'mod_edit_tags':
        return

    product_id = user_data[chat_id]['product_id']
    new_hashtags_raw = message.text.strip()
    
    cleaned_hashtags = [f"#{word.lower()}" for word in re.findall(r'\b\w+\b', new_hashtags_raw) if len(word) > 0]
    final_hashtags_str = " ".join(cleaned_hashtags)

    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        del user_data[chat_id]
        return
    cur = conn.cursor()

    try:
        cur.execute(pg_sql.SQL("""
            UPDATE products SET hashtags = %s, updated_at = CURRENT_TIMESTAMP
            WHERE id = %s;
        """), (final_hashtags_str, product_id))
        conn.commit()

        bot.send_message(chat_id, f"‚úÖ –•–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: `{final_hashtags_str}`", parse_mode='Markdown')
        log_statistics('moderator_edited_hashtags', chat_id, product_id, f"–ù–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏: {final_hashtags_str}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –∑ –Ω–æ–≤–∏–º–∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏
        publish_product_to_channel(product_id)
        bot.send_message(chat_id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –Ω–æ–≤–∏–º–∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏.")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ö–µ—à—Ç–µ–≥—ñ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ö–µ—à—Ç–µ–≥—ñ–≤.")
    finally:
        if conn:
            conn.close()
        if chat_id in user_data:
            del user_data[chat_id]


# –õ–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@error_handler
def handle_toggle_favorite(call):
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–æ–≥–æ (–ª–∞–π–∫)."""
    user_chat_id = call.from_user.id
    _, _, product_id_str, channel_message_id_str = call.data.split('_')
    product_id = int(product_id_str)
    channel_message_id_for_edit = int(channel_message_id_str)

    conn = get_db_connection()
    if not conn: 
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("SELECT id FROM favorites WHERE user_chat_id = %s AND product_id = %s;"), (user_chat_id, product_id))
        is_favorited = cur.fetchone()

        likes_count = 0 # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        if is_favorited:
            cur.execute(pg_sql.SQL("DELETE FROM favorites WHERE id = %s;"), (is_favorited['id'],))
            cur.execute(pg_sql.SQL("UPDATE products SET likes_count = likes_count - 1 WHERE id = %s RETURNING likes_count;"), (product_id,))
            likes_count = cur.fetchone()['likes_count']
            bot.answer_callback_query(call.id, "üíî –í–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ")
        else:
            cur.execute(pg_sql.SQL("INSERT INTO favorites (user_chat_id, product_id) VALUES (%s, %s);"), (user_chat_id, product_id))
            cur.execute(pg_sql.SQL("UPDATE products SET likes_count = likes_count + 1 WHERE id = %s RETURNING likes_count;"), (product_id,))
            likes_count = cur.fetchone()['likes_count']
            bot.answer_callback_query(call.id, "‚ù§Ô∏è –î–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ!")
        
        conn.commit()

        new_markup = types.InlineKeyboardMarkup()
        new_markup.add(types.InlineKeyboardButton(f"‚ù§Ô∏è {likes_count}", callback_data=call.data)) 
        
        try:
            bot.edit_message_reply_markup(chat_id=CHANNEL_ID, message_id=channel_message_id_for_edit, reply_markup=new_markup)
        except telebot.apihelper.ApiTelegramException as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id_for_edit}: {e}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ –æ–±—Ä–∞–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_chat_id}, —Ç–æ–≤–∞—Ä {product_id}: {e}", exc_info=True)
        conn.rollback()
        bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–±—Ä–∞–Ω–æ–≥–æ.")
    finally:
        if conn:
            conn.close()

@error_handler
def handle_shipping_choice(call):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –æ–ø—Ü—ñ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = call.message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('step') != 'waiting_shipping':
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç.")
        return

    if call.data == 'shipping_next':
        if not user_data[chat_id]['data']['shipping_options']:
            bot.answer_callback_query(call.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏.", show_alert=True)
            return
        bot.delete_message(chat_id, call.message.message_id)
        go_to_next_step(chat_id)
        return

    option = call.data.replace('shipping_', '')
    selected = user_data[chat_id]['data'].get('shipping_options', [])

    if option in selected:
        selected.remove(option)
    else:
        selected.append(option)
    user_data[chat_id]['data']['shipping_options'] = selected

    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    shipping_options_list = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á"]

    buttons = []
    for opt in shipping_options_list:
        emoji = '‚úÖ ' if opt in selected else ''
        buttons.append(types.InlineKeyboardButton(f"{emoji}{opt}", callback_data=f"shipping_{opt}"))
    
    inline_markup.add(*buttons)
    inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
    
    try:
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=inline_markup)
    except telebot.apihelper.ApiTelegramException as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
    
    bot.answer_callback_query(call.id)

# –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ç–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
@error_handler
def handle_winners_menu(call):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤."""
    text = "üèÜ *–ü–µ—Ä–µ–º–æ–∂—Ü—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤*\n\n–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–ø-—Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤:"
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–ó–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="winners_week"),
        types.InlineKeyboardButton("–ó–∞ –º—ñ—Å—è—Ü—å", callback_data="winners_month"),
        types.InlineKeyboardButton("–ó–∞ —Ä—ñ–∫", callback_data="winners_year")
    )
    if call.from_user.id == ADMIN_CHAT_ID:
        markup.add(types.InlineKeyboardButton("üé≤ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à (Admin)", callback_data="runraffle_week"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

@error_handler
def handle_show_winners(call):
    """–ü–æ–∫–∞–∑—É—î —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥."""
    period = call.data.split('_')[1]
    intervals = {'week': 7, 'month': 30, 'year': 365}
    interval_days = intervals.get(period, 7)

    conn = get_db_connection()
    if not conn: 
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î.")
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT referrer_id, COUNT(*) as referrals_count
            FROM users
            WHERE referrer_id IS NOT NULL AND joined_at >= NOW() - INTERVAL '%s days'
            GROUP BY referrer_id ORDER BY referrals_count DESC LIMIT 10;
        """), (interval_days,))
        top_referrers = cur.fetchall()
            
        text = f"üèÜ *–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π {'—Ç–∏–∂–¥–µ–Ω—å' if period == 'week' else '–º—ñ—Å—è—Ü—å' if period == 'month' else '—Ä—ñ–∫'}:*\n\n"
        if top_referrers:
            for i, r in enumerate(top_referrers, 1):
                try: 
                    user_info = bot.get_chat(r['referrer_id'])
                    username = f"@{user_info.username}" if user_info and user_info.username else f"ID: {r['referrer_id']}"
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {r['referrer_id']}: {e}")
                    username = f"ID: {r['referrer_id']}"
                text += f"{i}. {username} - {r['referrals_count']} –∑–∞–ø—Ä–æ—à–µ–Ω—å\n"
        else:
            text += "_–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥._\n"
            
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {period}: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤.")
    finally:
        if conn: conn.close()

@error_handler
def handle_run_raffle(call):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)."""
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
        
    conn = get_db_connection()
    if not conn: 
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î.")
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT DISTINCT referrer_id FROM users
            WHERE referrer_id IS NOT NULL AND joined_at >= NOW() - INTERVAL '7 days';
        """))
        participants = [row['referrer_id'] for row in cur.fetchall()]
        
        if not participants:
            bot.answer_callback_query(call.id, "–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å.")
            return

        winner_id = random.choice(participants)
        
        winner_info = None
        try: 
            winner_info = bot.get_chat(winner_id)
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è {winner_id}: {e}")

        winner_username = f"@{winner_info.username}" if winner_info and winner_info.username else f"ID: {winner_id}"
        
        text = f"üéâ *–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —â–æ—Ç–∏–∂–Ω–µ–≤–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:*\n\n {winner_username} \n\n–í—ñ—Ç–∞—î–º–æ!"
        
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, text, parse_mode='Markdown')
        bot.send_message(CHANNEL_ID, text, parse_mode='Markdown')
        log_statistics('raffle_conducted', ADMIN_CHAT_ID, details=f"winner: {winner_id}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É.")
    finally:
        if conn: conn.close()

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –ø—ñ—Å–ª—è –∫–æ–ª–±–µ–∫—É
@bot.callback_query_handler(func=lambda call: call.data == "admin_panel_main")
@error_handler
def back_to_admin_panel(call):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if call.message.chat.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals")
    )

    bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                          chat_id=call.message.chat.id, message_id=call.message.message_id,
                          reply_markup=markup, parse_mode='Markdown')
    bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")

    if WEBHOOK_URL and TOKEN:
        try:
            bot.remove_webhook()
            
            full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
            bot.set_webhook(url=full_webhook_url)
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
            exit(1)
    else:
        logger.critical("WEBHOOK_URL –∞–±–æ TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ webhook. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è.")
        exit(1)

    @app.route(f'/{TOKEN}', methods=['POST'])
    def webhook_handler():
        """–û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—ñ–≤, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤—ñ–¥ Telegram API."""
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return '!', 200
        else:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Content-Type (application/json).")
            return 'Content-Type must be application/json', 403

    port = int(os.environ.get("PORT", 8443)) 
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask-–¥–æ–¥–∞—Ç–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(host="0.0.0.0", port=port)
