import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone, date
import re
import json
import requests
from dotenv import load_dotenv
import random

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Webhook (Flask)
from flask import Flask, request

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è PostgreSQL
import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env. –¶–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏.
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '0'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = os.getenv('GEMINI_API_URL', "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DATABASE_URL = os.getenv('DATABASE_URL')

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- 3. –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è ---
def validate_env_vars():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.
    –Ø–∫—â–æ –±—É–¥—å-—è–∫–∞ –∑ –Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—è, –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É.
    –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–º—É —Å—Ç–∞–Ω—ñ.
    """
    missing_vars = []
    if not TOKEN:
        missing_vars.append('TELEGRAM_BOT_TOKEN')
    if not WEBHOOK_URL:
        missing_vars.append('WEBHOOK_URL')
    if not DATABASE_URL:
        missing_vars.append('DATABASE_URL')
    if ADMIN_CHAT_ID == 0:
        missing_vars.append('ADMIN_CHAT_ID')
    if CHANNEL_ID == 0:
        missing_vars.append('CHANNEL_ID')

    if missing_vars:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è: {', '.join(missing_vars)}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        exit(1)

validate_env_vars()

# --- 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TeleBot —Ç–∞ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# --- 4.1. –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ú–ï–†–ï–ñ–ï–í–ò–• –ó–ê–ü–ò–¢–Ü–í (RETRY-–ú–ï–•–ê–ù–Ü–ó–ú) ---
try:
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry

    retry_strategy = Retry(
        total=3,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=frozenset(['HEAD', 'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'TRACE']),
        backoff_factor=1,
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session = telebot.apihelper._get_req_session()
    session.mount("https://", adapter)
    logger.info("–ú–µ—Ä–µ–∂–µ–≤–∏–π –∞–¥–∞–ø—Ç–µ—Ä –∑ –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
except ImportError:
    logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ 'requests' –∞–±–æ 'urllib3'. –ú–µ—Ö–∞–Ω—ñ–∑–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")


# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞.
    –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID

            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: `{func.__name__}`\n–ü–æ–º–∏–ª–∫–∞: `{e}`\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö Render.")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (PostgreSQL) ---
def get_db_connection():
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î DATABASE_URL –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

@error_handler
def init_db():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î –Ω–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î (–º—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ö–µ–º–∏).
    """
    conn = get_db_connection()
    if not conn:
        logger.critical("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ë–î –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")
        exit(1)
    
    try:
        with conn.cursor() as cur:
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    is_blocked BOOLEAN DEFAULT FALSE,
                    blocked_by BIGINT,
                    blocked_at TIMESTAMP WITH TIME ZONE,
                    commission_paid REAL DEFAULT 0,
                    commission_due REAL DEFAULT 0,
                    last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    referrer_id BIGINT
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    seller_username TEXT,
                    product_name TEXT NOT NULL,
                    price TEXT NOT NULL,
                    description TEXT NOT NULL,
                    photos TEXT,
                    geolocation TEXT,
                    status TEXT DEFAULT 'pending',
                    commission_rate REAL DEFAULT 0.10,
                    commission_amount REAL DEFAULT 0,
                    moderator_id BIGINT,
                    moderated_at TIMESTAMP WITH TIME ZONE,
                    admin_message_id BIGINT,
                    channel_message_id BIGINT,
                    views INTEGER DEFAULT 0,
                    likes_count INTEGER DEFAULT 0,
                    republish_count INTEGER DEFAULT 0,
                    last_republish_date DATE,
                    shipping_options TEXT,
                    hashtags TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS favorites (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    UNIQUE(user_chat_id, product_id)
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    product_id INTEGER,
                    message_text TEXT,
                    sender_type TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS commission_transactions (
                    id SERIAL PRIMARY KEY,
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    amount REAL NOT NULL,
                    status TEXT DEFAULT 'pending_payment',
                    payment_details TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    paid_at TIMESTAMP WITH TIME ZONE
                );
            """))
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS statistics (
                    id SERIAL PRIMARY KEY,
                    action TEXT NOT NULL,
                    user_id BIGINT,
                    product_id INTEGER,
                    details TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            
            migrations = {
                'products': [
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS republish_count INTEGER DEFAULT 0;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS last_republish_date DATE;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS shipping_options TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS hashtags TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0;"
                ],
                'users': [
                    "ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_id BIGINT;"
                ]
            }
            for table, columns in migrations.items():
                for column_sql in columns:
                    try:
                        cur.execute(pg_sql.SQL(column_sql))
                        conn.commit()
                        logger.info(f"–ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ '{table}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞: {column_sql}")
                    except psycopg2.Error as e:
                        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó '{column_sql}': {e}")
                        conn.rollback()
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        conn.rollback()
        exit(1)
    finally:
        if conn:
            conn.close()

# --- 7. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
user_data = {}

# --- 8. –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message_or_user, referrer_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT chat_id, referrer_id FROM users WHERE chat_id = %s;"), (chat_id,))
        existing_user = cur.fetchone()

        if existing_user:
            cur.execute(pg_sql.SQL("""
                UPDATE users SET username = %s, first_name = %s, last_name = %s, last_activity = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (user.username, user.first_name, user.last_name, chat_id))
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            cur.execute(pg_sql.SQL("""
                INSERT INTO users (chat_id, username, first_name, last_name, referrer_id)
                VALUES (%s, %s, %s, %s, %s)
                ON CONFLICT (chat_id) DO NOTHING;
            """), (chat_id, user.username, user.first_name, user.last_name, referrer_id))
            logger.info(f"–ù–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –¥–æ–¥–∞–Ω–æ. –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_id}")
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn: return True
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT is_blocked FROM users WHERE chat_id = %s;"), (chat_id,))
        result = cur.fetchone()
        return result and result['is_blocked']
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}", exc_info=True)
        return True
    finally:
        if conn:
            conn.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (True/False) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        if status:
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = TRUE, blocked_by = %s, blocked_at = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (admin_id, chat_id))
        else:
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = FALSE, blocked_by = NULL, blocked_at = NULL
                WHERE chat_id = %s;
            """), (chat_id,))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É."""
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set([
        '—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
        '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
        '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
        '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
        '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
        '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', 
        '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'
    ])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(dict.fromkeys(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    """–õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO statistics (action, user_id, product_id, details)
            VALUES (%s, %s, %s, %s)
        '''), (action, user_id, product_id, details))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

# --- 9. Gemini AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ---
@error_handler
def get_gemini_response(prompt, conversation_history=None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini AI."""
    if not GEMINI_API_KEY:
        logger.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Content-Type": "application/json"
    }

    system_prompt = """–¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. 
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞: –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º, —ñ–Ω–æ–¥—ñ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, 
    –∞–ª–µ –∑–∞–≤–∂–¥–∏ –∫–æ—Ä–∏—Å–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º.
    –î–æ–ø–æ–º–∞–≥–∞–π –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂—ñ, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."""

    gemini_messages = [{"role": "user", "parts": [{"text": system_prompt}]}]
    
    if conversation_history:
        for msg in conversation_history:
            role = "user" if msg["sender_type"] == 'user' else "model"
            gemini_messages.append({"role": role, "parts": [{"text": msg["message_text"]}]})
    
    gemini_messages.append({"role": "user", "parts": [{"text": prompt}]})

    payload = {
        "contents": gemini_messages
    }

    try:
        api_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}"

        response = requests.post(api_url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        if data.get("candidates") and len(data["candidates"]) > 0 and \
           data["candidates"][0].get("content") and data["candidates"][0]["content"].get("parts"):
            content = data["candidates"][0]["content"]["parts"][0]["text"]
            logger.info(f"Gemini –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...")
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {data}")
            return generate_elon_style_response(prompt)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Gemini API: {e}", exc_info=True)
        return generate_elon_style_response(prompt)
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {e}", exc_info=True)
        return generate_elon_style_response(prompt)

def generate_elon_style_response(prompt):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞.
    """
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å!"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ AI) –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ —É –ë–î."""
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO conversations (user_chat_id, product_id, message_text, sender_type)
            VALUES (%s, %s, %s, %s)
        '''), (chat_id, product_id, message_text, sender_type))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def get_conversation_history(chat_id, limit=5):
    """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î."""
    conn = get_db_connection()
    if not conn: return []
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            SELECT message_text, sender_type FROM conversations 
            WHERE user_chat_id = %s 
            ORDER BY timestamp DESC LIMIT %s
        '''), (chat_id, limit))
        results = cur.fetchall()
        
        history = [{"message_text": row['message_text'], "sender_type": row['sender_type']} 
                   for row in reversed(results)]
        
        return history
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤: {e}", exc_info=True)
        return []
    finally:
        if conn:
            conn.close()

# --- 10. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚≠ê –û–±—Ä–∞–Ω—ñ"), types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"))
main_menu_markup.add(types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª"), types.KeyboardButton("ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫"))

back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
cancel_button = types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")

# --- 11. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    referrer_id = None
    parts = message.text.split()
    if len(parts) > 1 and parts[0] == '/start':
        try:
            potential_referrer_id = int(parts[1])
            if potential_referrer_id != chat_id:
                referrer_id = potential_referrer_id
        except (ValueError, IndexError):
            pass

    save_user(message, referrer_id)
    log_statistics('start', chat_id, details=f"referrer: {referrer_id}")

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—Ç—É–∂–Ω–∏–π AI! üöÄ\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
        "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
        "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
        "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n"
        "‚≠ê –î–æ–¥–∞—é —Ç–æ–≤–∞—Ä–∏ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ\n"
        "üèÜ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin."""
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals")
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')


# --- 12. –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/6: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", 'next_step': 2, 'prev_step': None},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/6: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `500 –≥—Ä–Ω`, `100 USD` –∞–±–æ `–î–æ–≥–æ–≤—ñ—Ä–Ω–∞`):", 'next_step': 3, 'prev_step': 1},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/6: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ':", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ', 'prev_step': 2},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/6: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é', 'prev_step': 3},
    5: {'name': 'waiting_shipping', 'prompt': "üöö *–ö—Ä–æ–∫ 5/6: –î–æ—Å—Ç–∞–≤–∫–∞*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):", 'next_step': 6, 'prev_step': 4},
    6: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 6/6: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:", 'next_step': 'confirm', 'prev_step': 5}
}

@error_handler
def start_add_product_flow(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é—á–∏ user_data."""
    chat_id = message.chat.id
    user_data[chat_id] = {
        'flow': 'add_product',
        'step_number': 1, 
        'data': {
            'photos': [], 
            'geolocation': None,
            'shipping_options': [],
            'product_name': '',
            'price': '',
            'description': '',
            'hashtags': ''
        }
    }
    send_product_step_message(chat_id)
    log_statistics('start_add_product', chat_id)

@error_handler
def send_product_step_message(chat_id):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_data[chat_id]['step'] = step_config['name']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if step_config['name'] == 'waiting_photos':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_location':
        markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_shipping':
        inline_markup = types.InlineKeyboardMarkup(row_width=2)
        shipping_options_list = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á"]
        selected_options = user_data[chat_id]['data'].get('shipping_options', [])

        buttons = []
        for opt in shipping_options_list:
            emoji = '‚úÖ ' if opt in selected_options else ''
            buttons.append(types.InlineKeyboardButton(f"{emoji}{opt}", callback_data=f"shipping_{opt}"))
        
        inline_markup.add(*buttons)
        inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
        
        bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=inline_markup)
        return
    
    if step_config['prev_step'] is not None:
        markup.add(back_button)
    
    markup.add(cancel_button)
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

@error_handler
def process_product_step(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        bot.send_message(chat_id, "–í–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é.", reply_markup=main_menu_markup)
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_text = message.text if message.content_type == 'text' else ""

    if user_text == cancel_button.text:
        del user_data[chat_id]
        bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        return

    if user_text == back_button.text:
        if step_config['prev_step'] is not None:
            user_data[chat_id]['step_number'] = step_config['prev_step']
            send_product_step_message(chat_id)
        else:
            bot.send_message(chat_id, "–í–∏ –≤–∂–µ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∫—Ä–æ—Ü—ñ.")
        return

    if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
        go_to_next_step(chat_id)
        return

    if step_config['name'] == 'waiting_name':
        if user_text and 3 <= len(user_text) <= 100:
            user_data[chat_id]['data']['product_name'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

    elif step_config['name'] == 'waiting_price':
        if user_text and len(user_text) <= 50:
            user_data[chat_id]['data']['price'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤):")

    elif step_config['name'] == 'waiting_photos':
        if user_text == "–î–∞–ª—ñ":
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'/'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'.")

    elif step_config['name'] == 'waiting_location':
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    
    elif step_config['name'] == 'waiting_shipping':
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏.")

    elif step_config['name'] == 'waiting_description':
        if user_text and 10 <= len(user_text) <= 1000:
            user_data[chat_id]['data']['description'] = user_text
            user_data[chat_id]['data']['hashtags'] = generate_hashtags(user_text)
            confirm_and_send_for_moderation(chat_id)
        else:
            bot.send_message(chat_id, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (10-1000 —Å–∏–º–≤–æ–ª—ñ–≤). –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:")

@error_handler
def go_to_next_step(chat_id):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    next_step_number = ADD_PRODUCT_STEPS[current_step_number]['next_step']
    
    if next_step_number == 'confirm':
        confirm_and_send_for_moderation(chat_id)
    else:
        user_data[chat_id]['step_number'] = next_step_number
        send_product_step_message(chat_id)

@error_handler
def process_product_photo(message):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–æ–≤–∞—Ä—É –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_photos':
        if len(user_data[chat_id]['data']['photos']) < 5:
            file_id = message.photo[-1].file_id
            user_data[chat_id]['data']['photos'].append(file_id)
            photos_count = len(user_data[chat_id]['data']['photos'])
            bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {photos_count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'")
        else:
            bot.send_message(chat_id, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def process_product_location(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_location':
        if message.location:
            user_data[chat_id]['data']['geolocation'] = {
                'latitude': message.location.latitude,
                'longitude': message.location.longitude
            }
            bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def confirm_and_send_for_moderation(chat_id):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä —É –ë–î —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    data = user_data[chat_id]['data']
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    cur = conn.cursor()
    product_id = None
    try:
        user_info = bot.get_chat(chat_id)
        seller_username = user_info.username if user_info.username else None

        cur.execute(pg_sql.SQL('''
            INSERT INTO products 
            (seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags, status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 'pending')
            RETURNING id;
        '''), (
            chat_id,
            seller_username,
            data['product_name'],
            data['price'],
            data['description'],
            json.dumps(data['photos']) if data['photos'] else None,
            json.dumps(data['geolocation']) if data['geolocation'] else None,
            json.dumps(data['shipping_options']) if data['shipping_options'] else None,
            data['hashtags'],
        ))
        
        product_id = cur.fetchone()[0]
        conn.commit()
        
        bot.send_message(chat_id, 
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
            reply_markup=main_menu_markup)
        
        send_product_for_admin_review(product_id)
        
        del user_data[chat_id]
        
        log_statistics('product_added', chat_id, product_id)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_for_admin_review(product_id):
    """–§–æ—Ä–º—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    conn = get_db_connection()
    if not conn: return

    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags
            FROM products WHERE id = %s;
        """), (product_id,))
        data = cur.fetchone()

        if not data:
            logger.error(f"–¢–æ–≤–∞—Ä –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–≤'—é.")
            bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª—ñ.")
            return

        seller_chat_id = data['seller_chat_id']
        seller_username = data['seller_username'] if data['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        photos = json.loads(data['photos']) if data['photos'] else []
        geolocation = json.loads(data['geolocation']) if data['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(data['shipping_options'])) if data['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = data['hashtags'] if data['hashtags'] else ""

        review_text = (
            f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
            f"üÜî ID: {product_id}\n"
            f"üìù –ù–∞–∑–≤–∞: {data['product_name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
            f"üìÑ –û–ø–∏—Å: {data['description'][:500]}...\n"
            f"üì∏ –§–æ—Ç–æ: {len(photos)} —à—Ç.\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {shipping_options_text}\n"
            f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
            types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        )
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
            types.InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ", callback_data=f"mod_rotate_photo_{product_id}")
        )
        
        try:
            admin_msg = None
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=review_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                
                sent_messages = bot.send_media_group(ADMIN_CHAT_ID, media)
                
                if sent_messages:
                    admin_msg = bot.send_message(ADMIN_CHAT_ID, 
                                                 f"üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                                 reply_markup=markup, 
                                                 parse_mode='Markdown',
                                                 reply_to_message_id=sent_messages[0].message_id)
                else:
                    admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                               parse_mode='Markdown',
                                               reply_markup=markup)
            else:
                admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                           parse_mode='Markdown',
                                           reply_markup=markup)
            
            if admin_msg:
                cur.execute(pg_sql.SQL("UPDATE products SET admin_message_id = %s WHERE id = %s;"),
                               (admin_msg.message_id, product_id))
                conn.commit()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)
            conn.rollback()
    finally:
        if conn:
            conn.close()

# --- 13. –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_messages(message):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""

    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(pg_sql.SQL("UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE chat_id = %s"), (chat_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
            conn.rollback()
        finally:
            conn.close()

    if chat_id in user_data and user_data[chat_id].get('flow'):
        current_flow = user_data[chat_id]['flow']
        if current_flow == 'add_product':
            if message.content_type == 'text':
                process_product_step(message)
            elif message.content_type == 'photo':
                process_product_photo(message)
            elif message.content_type == 'location':
                process_product_location(message)
            else:
                bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –∞–±–æ 'üîô –ù–∞–∑–∞–¥'.")
        elif current_flow == 'change_price':
            process_new_price(message)
        elif current_flow == 'mod_edit_tags':
            process_new_hashtags_mod(message)
        return

    if user_text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
        start_add_product_flow(message)
    elif user_text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
        send_my_products(message)
    elif user_text == "‚≠ê –û–±—Ä–∞–Ω—ñ":
        send_favorites(message)
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        send_help_message(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
        send_channel_link(message)
    elif user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫":
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å!\n\n(–ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ä–µ–∂–∏–º—É AI —á–∞—Ç—É.)", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat)
    elif message.content_type == 'text': 
        handle_ai_chat(message)
    elif message.content_type == 'photo':
        bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
    elif message.content_type == 'location':
        bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
    else:
        bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

@error_handler
def handle_ai_chat(message):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É."""
    chat_id = message.chat.id
    user_text = message.text

    if user_text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏" or user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(chat_id, "–ß–∞—Ç –∑ AI —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        return

    if user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫" or user_text == "/start":
        bot.send_message(chat_id, "–í–∏ –≤–∂–µ –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É. –ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat)
        return

    save_conversation(chat_id, user_text, 'user')
    
    conversation_history = get_conversation_history(chat_id, limit=10)
    
    ai_reply = get_gemini_response(user_text, conversation_history)
    save_conversation(chat_id, ai_reply, 'ai')
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(chat_id, f"ü§ñ –î—É–º–∞—é...\n{ai_reply}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_ai_chat)


# --- 14. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏ (–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è) ---
@error_handler
def get_product_info(product_id):
    """–û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä –∑–∞ –π–æ–≥–æ ID –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn: return None
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT * FROM products WHERE id = %s;
        """), (product_id,))
        return cur.fetchone()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {product_id}: {e}", exc_info=True)
        return None
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_details_to_channel(product_id, admin_id):
    """
    –ü—É–±–ª—ñ–∫—É—î —Å—Ö–≤–∞–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä —É Telegram-–∫–∞–Ω–∞–ª—ñ.
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ.
    """
    conn = get_db_connection()
    if not conn: return

    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags
            FROM products WHERE id = %s;
        """), (product_id,))
        data = cur.fetchone()

        if not data:
            logger.error(f"–¢–æ–≤–∞—Ä –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
            bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª—ñ.")
            return

        seller_chat_id = data['seller_chat_id']
        seller_username = data['seller_username'] if data['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        photos = json.loads(data['photos']) if data['photos'] else []
        geolocation = json.loads(data['geolocation']) if data['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(data['shipping_options'])) if data['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = data['hashtags'] if data['hashtags'] else ""

        post_text = (
            f"‚ú® *–ù–û–í–ï –û–ì–û–õ–û–®–ï–ù–ù–Ø* ‚ú®\n\n"
            f"üìù *{data['product_name']}*\n\n"
            f"üí∞ *–¶—ñ–Ω–∞:* {data['price']}\n\n"
            f"üìÑ *–û–ø–∏—Å:*\n{data['description']}\n\n"
            f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {shipping_options_text}\n"
            f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è:* {'–Ñ' if geolocation else '–í—ñ–¥—Å—É—Ç–Ω—è'}\n\n"
            f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* {'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n"
            f"üîó [–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º](tg://user?id={seller_chat_id})\n\n"
            f"{hashtags}\n"
        )
        
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(
            types.InlineKeyboardButton("‚úçÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º", url=f"tg://user?id={seller_chat_id}"),
            types.InlineKeyboardButton("‚≠ê –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ", callback_data=f"fav_{product_id}")
        )

        try:
            channel_message = None
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=post_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                
                sent_messages = bot.send_media_group(CHANNEL_ID, media)
                
                if sent_messages:
                    channel_message = bot.send_message(CHANNEL_ID, 
                                                       f"üëÜ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                                       reply_markup=inline_markup, 
                                                       parse_mode='Markdown',
                                                       reply_to_message_id=sent_messages[0].message_id)
                else:
                    channel_message = bot.send_message(CHANNEL_ID, post_text,
                                                    parse_mode='Markdown',
                                                    reply_markup=inline_markup)
            else:
                channel_message = bot.send_message(CHANNEL_ID, post_text,
                                                parse_mode='Markdown',
                                                reply_markup=inline_markup)
            
            if channel_message:
                cur.execute(pg_sql.SQL("""
                    UPDATE products SET status = 'approved', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP, 
                    channel_message_id = %s, updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s;
                """), (admin_id, channel_message.message_id, product_id))
                conn.commit()
                bot.send_message(seller_chat_id, 
                                f"üéâ –í–∞—à —Ç–æ–≤–∞—Ä '{data['product_name']}' –±—É–ª–æ *—Å—Ö–≤–∞–ª–µ–Ω–æ* —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ! "
                                f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](https://t.me/c/{str(CHANNEL_ID)[4:]}/{channel_message.message_id})",
                                parse_mode='Markdown', reply_markup=main_menu_markup)
                bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –¢–æ–≤–∞—Ä ID {product_id} —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.", reply_markup=admin_panel_markup())
                log_statistics('product_approved', admin_id, product_id, f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ: {CHANNEL_ID}")
            else:
                bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ID {product_id} —É –∫–∞–Ω–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=admin_panel_markup())
                conn.rollback()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id} —É –∫–∞–Ω–∞–ª: {e}", exc_info=True)
            bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ID {product_id} —É –∫–∞–Ω–∞–ª: {e}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.", reply_markup=admin_panel_markup())
            conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def reject_product_action(product_id, admin_id):
    """
    –í—ñ–¥—Ö–∏–ª—è—î —Ç–æ–≤–∞—Ä, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–∞–±–æ –∑–º—ñ–Ω—é—î —Å—Ç–∞—Ç—É—Å –Ω–∞ 'rejected'),
    —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –ø—Ä–æ–¥–∞–≤—Ü—è.
    """
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT seller_chat_id, product_name FROM products WHERE id = %s;"), (product_id,))
        product_info = cur.fetchone()

        if not product_info:
            logger.warning(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π —Ç–æ–≤–∞—Ä ID: {product_id}")
            bot.send_message(ADMIN_CHAT_ID, f"‚ùå –¢–æ–≤–∞—Ä ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.", reply_markup=admin_panel_markup())
            return

        seller_chat_id = product_info['seller_chat_id']
        product_name = product_info['product_name']

        cur.execute(pg_sql.SQL("""
            UPDATE products SET status = 'rejected', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
            WHERE id = %s;
        """), (admin_id, product_id))
        conn.commit()

        bot.send_message(seller_chat_id, 
                         f"üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à —Ç–æ–≤–∞—Ä '{product_name}' –±—É–ª–æ *–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ* –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                         "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.", parse_mode='Markdown')
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –¢–æ–≤–∞—Ä ID {product_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", reply_markup=admin_panel_markup())
        log_statistics('product_rejected', admin_id, product_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É ID {product_id}.", reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def admin_panel_markup():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals")
    )
    return markup


@error_handler
def send_my_products(message):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤.
    –î–æ–¥–∞—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π).
    """
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT id, product_name, price, status, views, likes_count, republish_count, last_republish_date
            FROM products WHERE seller_chat_id = %s ORDER BY created_at DESC;
        """), (chat_id,))
        products = cur.fetchall()

        if not products:
            bot.send_message(chat_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!", reply_markup=main_menu_markup)
            return

        for product in products:
            product_id = product['id']
            product_name = product['product_name']
            price = product['price']
            status = product['status']
            views = product['views']
            likes_count = product['likes_count']
            republish_count = product['republish_count']
            last_republish_date = product['last_republish_date']

            status_emoji = {
                'pending': '‚è≥', 'approved': '‚úÖ', 'rejected': '‚ùå', 'sold': 'üè∑Ô∏è', 'expired': 'üóëÔ∏è'
            }.get(status, '‚ùì')

            republish_info = ""
            if status == 'approved':
                republish_info = f"–ü–µ—Ä–µ–ø—É–±–ª—ñ–∫–∞—Ü—ñ–π: {republish_count}. –û—Å—Ç–∞–Ω–Ω—è: {last_republish_date.strftime('%Y-%m-%d') if last_republish_date else '–Ω—ñ–∫–æ–ª–∏'}"

            product_text = (
                f"{status_emoji} *{product_name}*\n"
                f"ID: `{product_id}`\n"
                f"–¶—ñ–Ω–∞: {price}\n"
                f"–°—Ç–∞—Ç—É—Å: `{status}`\n"
                f"–ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {views} | ‚ù§Ô∏è: {likes_count}\n"
                f"{republish_info}"
            )

            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton("üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"view_prod_{product_id}"),
                types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_prod_{product_id}")
            )
            if status == 'approved':
                markup.add(
                    types.InlineKeyboardButton("üè∑Ô∏è –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π", callback_data=f"mark_sold_{product_id}"),
                    types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"republish_{product_id}")
                )
                markup.add(
                    types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{product_id}")
                )

            bot.send_message(chat_id, product_text, parse_mode='Markdown', reply_markup=markup)
        
        log_statistics('view_my_products', chat_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–æ—ó—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def view_product_details(call, product_id):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
    """
    chat_id = call.message.chat.id
    product = get_product_info(product_id)
    if not product:
        bot.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", chat_id, call.message.message_id)
        return
    
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(pg_sql.SQL("UPDATE products SET views = views + 1 WHERE id = %s;"), (product_id,))
                conn.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")
            conn.rollback()
        finally:
            conn.close()

    seller_username = product['seller_username'] if product['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    photos = json.loads(product['photos']) if product['photos'] else []
    geolocation = json.loads(product['geolocation']) if product['geolocation'] else None
    shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    hashtags = product['hashtags'] if product['hashtags'] else ""
    
    product_text = (
        f"üì¶ *{product['product_name']}*\n\n"
        f"üí∞ *–¶—ñ–Ω–∞:* {product['price']}\n\n"
        f"üìÑ *–û–ø–∏—Å:*\n{product['description']}\n\n"
        f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {shipping_options_text}\n"
        f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è:* {'–Ñ' if geolocation else '–í—ñ–¥—Å—É—Ç–Ω—è'}\n\n"
        f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* {'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n"
        f"üîó [–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º](tg://user?id={product['seller_chat_id']})\n"
        f"‚ù§Ô∏è –õ–∞–π–∫—ñ–≤: {product['likes_count']}\n"
        f"–ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {product['views'] + 1}\n\n"
        f"{hashtags}"
    )

    markup = types.InlineKeyboardMarkup()
    if chat_id != product['seller_chat_id']:
        markup.add(types.InlineKeyboardButton("‚úçÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º", url=f"tg://user?id={product['seller_chat_id']}"))
        
        is_favorite = False
        conn = get_db_connection()
        if conn:
            try:
                with conn.cursor() as cur:
                    cur.execute(pg_sql.SQL("SELECT 1 FROM favorites WHERE user_chat_id = %s AND product_id = %s;"), (chat_id, product_id))
                    is_favorite = cur.fetchone() is not None
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±—Ä–∞–Ω–æ–≥–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
            finally:
                conn.close()
        
        if is_favorite:
            markup.add(types.InlineKeyboardButton("‚≠ê –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ", callback_data=f"unfav_{product_id}"))
        else:
            markup.add(types.InlineKeyboardButton("‚≠ê –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ", callback_data=f"fav_{product_id}"))
    else:
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{product_id}"),
            types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_prod_{product_id}")
        )
        if product['status'] == 'approved':
             markup.add(
                types.InlineKeyboardButton("üè∑Ô∏è –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π", callback_data=f"mark_sold_{product_id}"),
                types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"republish_{product_id}")
            )

    try:
        if photos:
            media = [types.InputMediaPhoto(photo_id, caption=product_text if i == 0 else None, parse_mode='Markdown') 
                     for i, photo_id in enumerate(photos)]
            
            if call.message.photo:
                bot.delete_message(chat_id, call.message.message_id)
                sent_messages = bot.send_media_group(chat_id, media)
                if sent_messages:
                    bot.send_message(chat_id, "–î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É:", reply_markup=markup, reply_to_message_id=sent_messages[0].message_id)
            else:
                bot.edit_message_media(types.InputMediaPhoto(photos[0]), chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup)
                bot.edit_message_caption(caption=product_text, chat_id=chat_id, message_id=call.message.message_id, parse_mode='Markdown')
                if len(photos) > 1:
                    for i, photo_id in enumerate(photos[1:]):
                        bot.send_photo(chat_id, photo_id)

        else:
            bot.edit_message_text(product_text, chat_id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É {product_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É.")
    
    bot.answer_callback_query(call.id)
    log_statistics('view_product_details', chat_id, product_id)


@error_handler
def update_product_status(product_id, new_status, admin_id=None):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            UPDATE products SET status = %s, moderator_id = %s, moderated_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
            WHERE id = %s;
        """), (new_status, admin_id, product_id))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞ {new_status}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def mark_product_as_sold(product_id, user_id):
    """–ü–æ–∑–Ω–∞—á–∞—î —Ç–æ–≤–∞—Ä —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            UPDATE products SET status = 'sold', updated_at = CURRENT_TIMESTAMP
            WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, user_id))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id} —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def republish_product(product_id, user_id):
    """
    –ü–µ—Ä–µ–ø—É–±–ª—ñ–∫–æ–≤—É—î —Ç–æ–≤–∞—Ä, –æ–Ω–æ–≤–ª—é—é—á–∏ –¥–∞—Ç—É, —Å—Ç–∞—Ç—É—Å –Ω–∞ 'pending' —Ç–∞ –∑–±—ñ–ª—å—à—É—é—á–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫.
    """
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            UPDATE products 
            SET status = 'pending', 
                republish_count = republish_count + 1, 
                last_republish_date = CURRENT_DATE, 
                created_at = CURRENT_TIMESTAMP,
                updated_at = CURRENT_TIMESTAMP
            WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, user_id))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def delete_product(product_id, user_id):
    """–í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            DELETE FROM products WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, user_id))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def process_new_price(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –≤–≤—ñ–¥ —Ü—ñ–Ω–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'change_price':
        bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–≤—ñ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=main_menu_markup)
        return
    
    product_id = user_data[chat_id]['product_id']
    new_price = message.text.strip()

    if not new_price or len(new_price) > 50:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥—ñ–π—Å–Ω—É —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤).")
        return
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            UPDATE products SET price = %s, updated_at = CURRENT_TIMESTAMP WHERE id = %s AND seller_chat_id = %s;
        """), (new_price, product_id, chat_id))
        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –¶—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É `{product_id}` —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ `{new_price}`.", parse_mode='Markdown', reply_markup=main_menu_markup)
        del user_data[chat_id]
        log_statistics('price_changed', chat_id, product_id, details=new_price)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ü—ñ–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def process_new_hashtags_mod(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –≤–≤—ñ–¥ —Ö–µ—à—Ç–µ–≥—ñ–≤ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""
    chat_id = message.chat.id
    if chat_id != ADMIN_CHAT_ID or chat_id not in user_data or user_data[chat_id].get('flow') != 'mod_edit_tags':
        bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π –≤–≤—ñ–¥ –∞–±–æ –≤–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return
    
    product_id = user_data[chat_id]['product_id']
    new_hashtags_text = message.text.strip()

    if not new_hashtags_text:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ö–µ—à—Ç–µ–≥–∏. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–±—Ä–∞—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–±—ñ–ª.")
        return
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            UPDATE products SET hashtags = %s, updated_at = CURRENT_TIMESTAMP WHERE id = %s;
        """), (new_hashtags_text, product_id))
        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –•–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É `{product_id}` —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.", parse_mode='Markdown')
        del user_data[chat_id]
        log_statistics('hashtags_edited', chat_id, product_id, details=new_hashtags_text)
        send_product_for_admin_review(product_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–µ—à—Ç–µ–≥—ñ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ö–µ—à—Ç–µ–≥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()


@error_handler
def add_to_favorites(user_chat_id, product_id):
    """–î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT 1 FROM favorites WHERE user_chat_id = %s AND product_id = %s;"), (user_chat_id, product_id))
        if cur.fetchone():
            return False
        
        cur.execute(pg_sql.SQL("INSERT INTO favorites (user_chat_id, product_id) VALUES (%s, %s);"), (user_chat_id, product_id))
        
        cur.execute(pg_sql.SQL("UPDATE products SET likes_count = likes_count + 1 WHERE id = %s;"), (product_id,))

        conn.commit()
        log_statistics('add_to_favorites', user_chat_id, product_id)
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id} –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ –¥–ª—è {user_chat_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def remove_from_favorites(user_chat_id, product_id):
    """–í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –∑—ñ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("DELETE FROM favorites WHERE user_chat_id = %s AND product_id = %s;"), (user_chat_id, product_id))
        
        cur.execute(pg_sql.SQL("UPDATE products SET likes_count = GREATEST(0, likes_count - 1) WHERE id = %s;"), (product_id,))

        conn.commit()
        log_statistics('remove_from_favorites', user_chat_id, product_id)
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id} –∑ –æ–±—Ä–∞–Ω–æ–≥–æ –¥–ª—è {user_chat_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def send_favorites(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤."""
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT p.id, p.product_name, p.price, p.status, p.likes_count, p.views
            FROM products p
            JOIN favorites f ON p.id = f.product_id
            WHERE f.user_chat_id = %s
            ORDER BY f.id DESC;
        """), (chat_id,))
        favorite_products = cur.fetchall()

        if not favorite_products:
            bot.send_message(chat_id, "–£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö —â–µ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –æ–±—Ä–∞–Ω–µ, –∫–æ–ª–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç–µ –π–æ–≥–æ!", reply_markup=main_menu_markup)
            return

        bot.send_message(chat_id, "‚≠ê *–í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:*\n", parse_mode='Markdown')
        for product in favorite_products:
            product_id = product['id']
            product_name = product['product_name']
            price = product['price']
            status = product['status']
            likes_count = product['likes_count']
            views = product['views']

            product_text = (
                f"‚ñ™Ô∏è *{product_name}*\n"
                f"–¶—ñ–Ω–∞: {price}\n"
                f"–°—Ç–∞—Ç—É—Å: `{status}`\n"
                f"‚ù§Ô∏è: {likes_count} | –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {views}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"view_prod_{product_id}"),
                types.InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ", callback_data=f"unfav_{product_id}")
            )
            bot.send_message(chat_id, product_text, parse_mode='Markdown', reply_markup=markup)
        
        log_statistics('view_favorites', chat_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_help_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –¥–æ–≤—ñ–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    help_text = (
        "üìö *–î–æ–≤—ñ–¥–∫–∞ SellerBot*\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –ª–µ–≥–∫–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ —Ç–∞ –∫—É–ø—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ Telegram!\n\n"
        "–ù–∞—à—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä*: –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –º–∞–π—Å—Ç–µ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏*: –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∞—à–∏–º–∏ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –º–∏–Ω—É–ª–∏–º–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏.\n"
        "‚≠ê *–û–±—Ä–∞–Ω—ñ*: –í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ–± –Ω–µ –∑–∞–≥—É–±–∏—Ç–∏ —Ç–µ, —â–æ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å.\n"
        "‚ùì *–î–æ–ø–æ–º–æ–≥–∞*: –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª*: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ —É—Å—ñ–º–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏.\n"
        "ü§ñ *AI –ü–æ–º—ñ—á–Ω–∏–∫*: –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø –≤—ñ–¥–ø–æ–≤—ñ–º —è–∫ –Ü–ª–æ–Ω –ú–∞—Å–∫.\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å —î —ñ–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ [–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞](tg://user?id={ADMIN_CHAT_ID})."
    ).format(ADMIN_CHAT_ID=ADMIN_CHAT_ID)
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu_markup)
    log_statistics('help_requested', message.chat.id)

@error_handler
def send_channel_link(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∑ —Ç–æ–≤–∞—Ä–∞–º–∏."""
    try:
        channel_info = bot.get_chat(CHANNEL_ID)
        if channel_info.username:
            channel_link = f"https://t.me/{channel_info.username}"
        else:
            channel_link = "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–æ–∂—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É ID: {CHANNEL_ID}. –ö–∞–Ω–∞–ª, –º–æ–∂–ª–∏–≤–æ, –ø—Ä–∏–≤–∞—Ç–Ω–∏–π.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}", exc_info=True)
        channel_link = "–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª. –ú–æ–∂–ª–∏–≤–æ, –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞."
    
    bot.send_message(message.chat.id, f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ —É—Å—ñ–º–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏:*\n{channel_link}", parse_mode='Markdown', reply_markup=main_menu_markup)
    log_statistics('channel_link_sent', message.chat.id)

# --- 15. –û–±—Ä–æ–±–Ω–∏–∫ Callback Query ---
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def callback_inline(call):
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —ñ–Ω–ª–∞–π–Ω-callback –∑–∞–ø–∏—Ç—ñ–≤.
    –†–æ–∑–±–∏—Ä–∞—î `callback_data` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
    """
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback –≤—ñ–¥ {chat_id}: {data}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if is_user_blocked(chat_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    # --- –û–±—Ä–æ–±–∫–∞ callback-—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É (–∫—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏) ---
    if data.startswith("shipping_"):
        shipping_option = data.replace("shipping_", "")
        if shipping_option == "next": # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–î–∞–ª—ñ" –Ω–∞ –∫—Ä–æ—Ü—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
            if chat_id in user_data and user_data[chat_id].get('flow') == 'add_product' and user_data[chat_id].get('step') == 'waiting_shipping':
                if not user_data[chat_id]['data']['shipping_options']:
                    bot.answer_callback_query(call.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏.", show_alert=True)
                    return
                go_to_next_step(chat_id)
                bot.delete_message(chat_id, message_id) # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            else:
                bot.answer_callback_query(call.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ —É –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.")
        else: # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤/–∑–Ω—è–≤ –≤–∏–±—ñ—Ä –æ–ø—Ü—ñ—ó –¥–æ—Å—Ç–∞–≤–∫–∏
            if chat_id in user_data and user_data[chat_id].get('flow') == 'add_product' and user_data[chat_id].get('step') == 'waiting_shipping':
                selected_options = user_data[chat_id]['data'].get('shipping_options', [])
                if shipping_option in selected_options:
                    selected_options.remove(shipping_option)
                else:
                    selected_options.append(shipping_option)
                user_data[chat_id]['data']['shipping_options'] = selected_options
                send_product_step_message(chat_id) # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏
                bot.answer_callback_query(call.id, f"–û–ø—Ü—ñ—ó –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
            else:
                bot.answer_callback_query(call.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ —É –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.")
        return # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback

    # --- –û–±—Ä–æ–±–∫–∞ callback-—ñ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ---
    if data.startswith("approve_"):
        if chat_id != ADMIN_CHAT_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return
        product_id = int(data.replace("approve_", ""))
        bot.edit_message_text(f"‚è≥ –°—Ö–≤–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID {product_id}...", chat_id, message_id)
        if update_product_status(product_id, 'approved', chat_id):
            send_product_details_to_channel(product_id, chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID {product_id}.", chat_id, message_id, reply_markup=admin_panel_markup())
        bot.answer_callback_query(call.id)
        log_statistics('approve_product_callback', chat_id, product_id)
    
    elif data.startswith("reject_"):
        if chat_id != ADMIN_CHAT_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return
        product_id = int(data.replace("reject_", ""))
        bot.edit_message_text(f"‚è≥ –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID {product_id}...", chat_id, message_id)
        reject_product_action(product_id, chat_id)
        bot.answer_callback_query(call.id)
        log_statistics('reject_product_callback', chat_id, product_id)

    elif data.startswith("mod_edit_tags_"):
        if chat_id != ADMIN_CHAT_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return
        product_id = int(data.replace("mod_edit_tags_", ""))
        user_data[chat_id] = {'flow': 'mod_edit_tags', 'product_id': product_id}
        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID `{product_id}` (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `#—Ç–µ–≥1 #—Ç–µ–≥2`).", parse_mode='Markdown')
        bot.answer_callback_query(call.id, "–û—á—ñ–∫—É—é –≤–≤—ñ–¥ —Ö–µ—à—Ç–µ–≥—ñ–≤.")
        log_statistics('mod_edit_tags_callback', chat_id, product_id)

    elif data.startswith("mod_rotate_photo_"):
        if chat_id != ADMIN_CHAT_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
            return
        product_id = int(data.replace("mod_rotate_photo_", ""))
        product = get_product_info(product_id)
        if product and product['seller_chat_id']:
            bot.send_message(product['seller_chat_id'], 
                             f"üì∏ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID `{product_id}`. "
                             "–ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–µ—è–∫—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.", parse_mode='Markdown')
            bot.answer_callback_query(call.id, f"–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—é.")
            log_statistics('mod_rotate_photo_callback', chat_id, product_id)
        else:
            bot.answer_callback_query(call.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü—é.")

    # --- –û–±—Ä–æ–±–∫–∞ callback-—ñ–≤ "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏" ---
    elif data.startswith("view_prod_"):
        product_id = int(data.replace("view_prod_", ""))
        view_product_details(call, product_id)
        log_statistics('view_prod_callback', chat_id, product_id)

    elif data.startswith("delete_prod_"):
        product_id = int(data.replace("delete_prod_", ""))
        if delete_product(product_id, chat_id):
            bot.edit_message_text(f"üóëÔ∏è –¢–æ–≤–∞—Ä `{product_id}` —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", chat_id, message_id, parse_mode='Markdown')
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
            log_statistics('delete_prod_callback', chat_id, product_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.", show_alert=True)

    elif data.startswith("mark_sold_"):
        product_id = int(data.replace("mark_sold_", ""))
        if mark_product_as_sold(product_id, chat_id):
            bot.edit_message_text(f"üè∑Ô∏è –¢–æ–≤–∞—Ä `{product_id}` —É—Å–ø—ñ—à–Ω–æ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.", chat_id, message_id, parse_mode='Markdown')
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π.")
            log_statistics('mark_sold_callback', chat_id, product_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ.", show_alert=True)

    elif data.startswith("republish_"):
        product_id = int(data.replace("republish_", ""))
        product = get_product_info(product_id)
        if product and product['status'] == 'approved' and product['seller_chat_id'] == chat_id:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–π—à–ª–æ 7 –¥–Ω—ñ–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            last_republish_date = product['last_republish_date']
            if last_republish_date:
                days_since_last_republish = (date.today() - last_republish_date).days
                if days_since_last_republish < 7:
                    remaining_days = 7 - days_since_last_republish
                    bot.answer_callback_query(call.id, f"‚è≥ –ü–µ—Ä–µ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ —Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤. –ó–∞–ª–∏—à–∏–ª–æ—Å—å {remaining_days} –¥–Ω.", show_alert=True)
                    return
            
            if republish_product(product_id, chat_id):
                bot.edit_message_text(f"üîÑ –¢–æ–≤–∞—Ä `{product_id}` —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—é. –í—ñ–Ω –∑–Ω–æ–≤—É –±—É–¥–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", chat_id, message_id, parse_mode='Markdown')
                send_product_for_admin_review(product_id) # –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                log_statistics('republish_callback', chat_id, product_id)
            else:
                bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É.", show_alert=True)
        else:
            bot.answer_callback_query(call.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä.")

    elif data.startswith("change_price_"):
        product_id = int(data.replace("change_price_", ""))
        user_data[chat_id] = {'flow': 'change_price', 'product_id': product_id}
        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É ID `{product_id}` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `500 –≥—Ä–Ω`, `100 USD` –∞–±–æ `–î–æ–≥–æ–≤—ñ—Ä–Ω–∞`).", parse_mode='Markdown')
        bot.answer_callback_query(call.id, "–û—á—ñ–∫—É—é –Ω–æ–≤—É —Ü—ñ–Ω—É.")
        log_statistics('change_price_callback', chat_id, product_id)

    # --- –û–±—Ä–æ–±–∫–∞ callback-—ñ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
    elif data.startswith("fav_"):
        product_id = int(data.replace("fav_", ""))
        if add_to_favorites(chat_id, product_id):
            bot.answer_callback_query(call.id, "‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ!")
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ"
            # –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ markup
            product = get_product_info(product_id)
            if product:
                inline_markup = types.InlineKeyboardMarkup()
                inline_markup.add(
                    types.InlineKeyboardButton("‚úçÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º", url=f"tg://user?id={product['seller_chat_id']}"),
                    types.InlineKeyboardButton("‚≠ê –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ", callback_data=f"unfav_{product_id}")
                )
                try:
                    # –Ø–∫—â–æ —Ü–µ media group, –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –ª–∏—à–µ message_id —â–æ –º—ñ—Å—Ç–∏—Ç—å caption
                    if call.message.photo: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–æ—Ç–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
                        # –Ø–∫—â–æ —Ñ–æ—Ç–æ —î, –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ markup, –±–æ —Ü–µ media group
                        # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ.
                        # –ê–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑–∞—Ä–∞–∑ –æ–Ω–æ–≤–∏–º–æ —Ç—ñ–ª—å–∫–∏ caption (—è–∫—â–æ —Ü–µ —î–¥–∏–Ω–µ —Ñ–æ—Ç–æ –∞–±–æ –ø–µ—Ä—à–µ –≤ –≥—Ä—É–ø—ñ)
                        # –∞–±–æ –ª–∏—à–µ markup, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º.
                        # –¶–µ —Å–∫–ª–∞–¥–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –¥–ª—è media_group, —Ç–æ–º—É –∫—Ä–∞—â–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏—Ç–∏ caption,
                        # –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä –∑–Ω–æ–≤—É.
                        # –î–ª—è —Ü—å–æ–≥–æ –≤–∏–ø–∞–¥–∫—É, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏–º–æ caption, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ, –∞–±–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏.
                        if call.message.caption: # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –º–∞—î caption
                            bot.edit_message_caption(caption=call.message.caption, chat_id=chat_id, message_id=message_id, reply_markup=inline_markup, parse_mode='Markdown')
                        else: # –Ø–∫—â–æ —Ñ–æ—Ç–æ –±–µ–∑ caption (–¥—Ä—É–≥–µ/—Ç—Ä–µ—Ç—î —Ñ–æ—Ç–æ –≤ media group), —Ç–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–º–æ
                            pass # –ù–µ –º–æ–∂–µ–º–æ –∑–º—ñ–Ω–∏—Ç–∏ markup
                    else: # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º
                        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=inline_markup)
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞–Ω–µ' –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")
            log_statistics('add_favorite_callback', chat_id, product_id)
        else:
            bot.answer_callback_query(call.id, "–¶–µ–π —Ç–æ–≤–∞—Ä –≤–∂–µ —î —É –≤–∞—à–æ–º—É –æ–±—Ä–∞–Ω–æ–º—É.", show_alert=True)
    
    elif data.startswith("unfav_"):
        product_id = int(data.replace("unfav_", ""))
        if remove_from_favorites(chat_id, product_id):
            bot.answer_callback_query(call.id, "‚ùå –í–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ!")
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ "–î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ"
            product = get_product_info(product_id)
            if product:
                inline_markup = types.InlineKeyboardMarkup()
                inline_markup.add(
                    types.InlineKeyboardButton("‚úçÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º", url=f"tg://user?id={product['seller_chat_id']}"),
                    types.InlineKeyboardButton("‚≠ê –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ", callback_data=f"fav_{product_id}")
                )
                try:
                    if call.message.photo:
                        if call.message.caption:
                            bot.edit_message_caption(caption=call.message.caption, chat_id=chat_id, message_id=message_id, reply_markup=inline_markup, parse_mode='Markdown')
                        else:
                            pass
                    else:
                        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=inline_markup)
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É '–û–±—Ä–∞–Ω–µ' –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")
            log_statistics('remove_favorite_callback', chat_id, product_id)
        else:
            bot.answer_callback_query(call.id, "–¶—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î —É –≤–∞—à–æ–º—É –æ–±—Ä–∞–Ω–æ–º—É.", show_alert=True)

    # --- –û–±—Ä–æ–±–∫–∞ callback-—ñ–≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ ---
    elif data == "admin_stats":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_admin_statistics(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_stats_callback', chat_id)

    elif data == "admin_pending":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_pending_products_for_moderation(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_pending_callback', chat_id)

    elif data == "admin_users":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_users_list_admin(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_users_callback', chat_id)

    elif data == "admin_block":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_block_unblock_menu(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_block_callback', chat_id)

    elif data.startswith("block_user_"):
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        target_chat_id = int(data.replace("block_user_", ""))
        if set_user_block_status(chat_id, target_chat_id, True):
            bot.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_chat_id}` –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.", chat_id, message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_blocked', chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.", chat_id, message_id, parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif data.startswith("unblock_user_"):
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        target_chat_id = int(data.replace("unblock_user_", ""))
        if set_user_block_status(chat_id, target_chat_id, False):
            bot.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_chat_id}` —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.", chat_id, message_id, parse_mode='Markdown')
            try:
                bot.send_message(target_chat_id, "‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –±—É–ª–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_chat_id}: {e}")
            log_statistics('user_unblocked', chat_id, target_chat_id)
        else:
            bot.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID `{target_chat_id}`.", chat_id, message_id, parse_mode='Markdown')
        bot.answer_callback_query(call.id)

    elif data == "admin_commissions":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_commission_report(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_commissions_callback', chat_id)

    elif data == "admin_ai_stats":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_ai_statistics(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_ai_stats_callback', chat_id)

    elif data == "admin_referrals":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        send_referral_statistics(call)
        bot.answer_callback_query(call.id)
        log_statistics('admin_referrals_callback', chat_id)

    elif data == "admin_back":
        if chat_id != ADMIN_CHAT_ID: bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤."); return
        bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", chat_id, message_id, reply_markup=admin_panel_markup(), parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        log_statistics('admin_back_callback', chat_id)

    # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –∑ –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id)


# --- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è) ---
@error_handler
def send_pending_products_for_moderation(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, created_at
            FROM products
            WHERE status = 'pending'
            ORDER BY created_at ASC;
        """))
        pending_products = cur.fetchall()

        if not pending_products:
            bot.edit_message_text("‚úÖ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
            return

        for product in pending_products:
            product_id = product['id']
            seller_chat_id = product['seller_chat_id']
            seller_username = product['seller_username'] if product['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            photos = json.loads(product['photos']) if product['photos'] else []
            geolocation = json.loads(product['geolocation']) if product['geolocation'] else None
            shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"


            review_text = (
                f"üì¶ *–¢–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é* (ID: {product_id})\n\n"
                f"üìù –ù–∞–∑–≤–∞: {product['product_name']}\n"
                f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
                f"üìÑ –û–ø–∏—Å: {product['description'][:500]}...\n"
                f"üì∏ –§–æ—Ç–æ: {len(photos)} —à—Ç.\n"
                f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {shipping_options_text}\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
                types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
            )
            markup.add(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
                types.InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ", callback_data=f"mod_rotate_photo_{product_id}")
            )

            try:
                if photos:
                    media = [types.InputMediaPhoto(photo_id, caption=review_text if i == 0 else None, parse_mode='Markdown') 
                             for i, photo_id in enumerate(photos)]
                    sent_messages = bot.send_media_group(call.message.chat.id, media)
                    if sent_messages:
                        bot.send_message(call.message.chat.id, 
                                         f"üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                         reply_markup=markup, 
                                         parse_mode='Markdown',
                                         reply_to_message_id=sent_messages[0].message_id)
                else:
                    bot.send_message(call.message.chat.id, review_text, parse_mode='Markdown', reply_markup=markup)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—É: {e}", exc_info=True)
                bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID {product_id}.")
        
        bot.send_message(call.message.chat.id, "--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó ---", reply_markup=admin_panel_markup())

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_pending_products_for_moderation: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_users_list_admin(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT chat_id, username, first_name, last_name, is_blocked, joined_at, last_activity, referrer_id
            FROM users ORDER BY joined_at DESC;
        """))
        users = cur.fetchall()

        if not users:
            bot.edit_message_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
            return

        response_text = "üë• *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
        for user in users:
            username_display = f"@{user['username']}" if user['username'] else "–ù/–î"
            blocked_status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if user['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            response_text += (
                f"‚ñ™Ô∏è ID: `{user['chat_id']}`\n"
                f"   –Ü–º'—è: {user['first_name']} {user['last_name'] or ''} ({username_display})\n"
                f"   –°—Ç–∞—Ç—É—Å: {blocked_status}\n"
                f"   –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {user['joined_at'].strftime('%Y-%m-%d %H:%M')}\n"
                f"   –û—Å—Ç. –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['last_activity'].strftime('%Y-%m-%d %H:%M')}\n"
                f"   –†–µ—Ñ–µ—Ä–µ—Ä: {user['referrer_id'] or '–ù–µ–º–∞—î'}\n\n"
            )
        
        if len(response_text) > 4096:
            response_text = response_text[:4000] + "...\n\n(–ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥—É–∂–µ –¥–æ–≤–≥–∏–π, –¥–∏–≤—ñ—Ç—å—Å—è –ª–æ–≥–∏ –∞–±–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ)"

        bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=admin_panel_markup())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_users_list_admin: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_block_unblock_menu(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–µ–Ω—é –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT chat_id, username, first_name, last_name, is_blocked
            FROM users ORDER BY is_blocked DESC, joined_at DESC;
        """))
        users = cur.fetchall()

        if not users:
            bot.edit_message_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for user in users:
            status_text = "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not user['is_blocked'] else "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
            button_data = f"block_user_{user['chat_id']}" if not user['is_blocked'] else f"unblock_user_{user['chat_id']}"
            username_display = f"@{user['username']}" if user['username'] else f"ID: {user['chat_id']}"
            markup.add(types.InlineKeyboardButton(f"{status_text} {user['first_name']} {user['last_name'] or ''} ({username_display})", callback_data=button_data))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text("üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è)*\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", 
                              call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_block_unblock_menu: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é –±–ª–æ–∫—É–≤–∞–Ω–Ω—è.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_commission_report(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–≤—ñ—Ç –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                p.id AS product_id,
                p.product_name,
                p.seller_chat_id,
                u.username AS seller_username,
                p.price,
                p.commission_amount,
                p.status AS product_status,
                ct.status AS transaction_status,
                ct.created_at AS transaction_date,
                ct.paid_at AS paid_date
            FROM products p
            LEFT JOIN commission_transactions ct ON p.id = ct.product_id
            LEFT JOIN users u ON p.seller_chat_id = u.chat_id
            WHERE p.status = 'sold' AND (ct.status IS NULL OR ct.status = 'pending_payment')
            ORDER BY ct.created_at ASC;
        """))
        pending_commissions = cur.fetchall()

        total_due = 0.0
        report_text = "üí∞ *–ó–≤—ñ—Ç –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö (–æ—á—ñ–∫—É—é—Ç—å—Å—è –¥–æ —Å–ø–ª–∞—Ç–∏):*\n\n"
        if not pending_commissions:
            report_text += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∫–æ–º—ñ—Å—ñ–π –¥–æ —Å–ø–ª–∞—Ç–∏."
        else:
            for item in pending_commissions:
                commission = item['commission_amount'] if item['commission_amount'] is not None else 0.0
                total_due += commission
                seller_username_display = f"@{item['seller_username']}" if item['seller_username'] else f"ID: {item['seller_chat_id']}"
                report_text += (
                    f"‚ñ™Ô∏è –¢–æ–≤–∞—Ä ID `{item['product_id']}`: *{item['product_name'][:50]}*\n"
                    f"   –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{seller_username_display}](tg://user?id={item['seller_chat_id']})\n"
                    f"   –¶—ñ–Ω–∞: {item['price']}\n"
                    f"   –ö–æ–º—ñ—Å—ñ—è: `{commission:.2f}`\n"
                    f"   –°—Ç–∞—Ç—É—Å (—Ç–æ–≤–∞—Ä): `{item['product_status']}`\n"
                    f"   –°—Ç–∞—Ç—É—Å (—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è): `{item['transaction_status'] or '–Ω–µ–º–∞—î'}`\n"
                    f"   –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É: {item['transaction_date'].strftime('%Y-%m-%d') if item['transaction_date'] else '–ù/–î'}\n\n"
                )
            report_text += f"\n*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {total_due:.2f} UAH*\n\n"
            report_text += f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤: `{MONOBANK_CARD_NUMBER}`"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text(report_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_commission_report: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_ai_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –ø–æ–º—ñ—á–Ω–∏–∫–∞."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                COUNT(*) AS total_messages,
                COUNT(DISTINCT user_chat_id) AS unique_users,
                (SELECT COUNT(*) FROM conversations WHERE sender_type = 'user') AS user_messages,
                (SELECT COUNT(*) FROM conversations WHERE sender_type = 'ai') AS ai_messages
            FROM conversations;
        """))
        stats = cur.fetchone()

        report_text = "ü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ü–æ–º—ñ—á–Ω–∏–∫–∞:*\n\n"
        if stats:
            report_text += f"‚ñ™Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: `{stats['total_messages']}`\n"
            report_text += f"‚ñ™Ô∏è –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: `{stats['unique_users']}`\n"
            report_text += f"‚ñ™Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: `{stats['user_messages']}`\n"
            report_text += f"‚ñ™Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ AI: `{stats['ai_messages']}`\n"
        else:
            report_text += "–î–∞–Ω—ñ –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –≤—ñ–¥—Å—É—Ç–Ω—ñ."

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text(report_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_ai_statistics: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_referral_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                referrer_id, 
                COUNT(chat_id) AS referred_count,
                MAX(r.username) AS referrer_username,
                MAX(r.first_name) AS referrer_first_name,
                MAX(r.last_name) AS referrer_last_name
            FROM users r
            JOIN users u ON r.chat_id = u.referrer_id
            WHERE r.referrer_id IS NOT NULL OR u.referrer_id IS NOT NULL -- –î–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —â–µ –Ω–µ –≤ —Ç–∞–±–ª–∏—Ü—ñ users
            GROUP BY referrer_id
            ORDER BY referred_count DESC;
        """))
        referrals = cur.fetchall()

        report_text = "üèÜ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        if not referrals:
            report_text += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö."
        else:
            for ref in referrals:
                referrer_username_display = f"@{ref['referrer_username']}" if ref['referrer_username'] else "–ù/–î"
                report_text += (
                    f"‚ñ™Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä ID: `{ref['referrer_id']}`\n"
                    f"   –Ü–º'—è: {ref['referrer_first_name']} {ref['referrer_last_name'] or ''} ({referrer_username_display})\n"
                    f"   –ó–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: `{ref['referred_count']}`\n\n"
                )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text(report_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_referral_statistics: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

# --- 16. –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---
if __name__ == '__main__':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    init_db()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render
    try:
        bot.remove_webhook() # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫, —è–∫—â–æ —î
        time.sleep(0.1) # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ, —â–æ –≤–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ
        bot.set_webhook(url=WEBHOOK_URL + TOKEN)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL + TOKEN}")
    except Exception as e:
        logger.critical(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        exit(1) # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –≤–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–≤—Å—è

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ Flask
    @app.route(f'/{TOKEN}', methods=['POST'])
    def webhook_handler():
        """
        –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—ñ–≤, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤—ñ–¥ Telegram API.
        –ü–∞—Ä—Å–∏—Ç—å JSON-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–¥–∞—î —ó—Ö telebot –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
        """
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update]) # –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
            return '!', 200 # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 OK Telegram—É
        else:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Content-Type (application/json).")
            return 'Content-Type must be application/json', 403 # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask-–¥–æ–¥–∞—Ç–æ–∫.
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ PORT.
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
    logger.info(f"Flask-–¥–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

