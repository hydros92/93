import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone, date # –î–æ–¥–∞–Ω–æ date
import re
import json
import requests
from dotenv import load_dotenv
import random # –î–æ–¥–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
import time # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è time

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Webhook (Flask)
from flask import Flask, request

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è PostgreSQL
import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env. –¶–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏.
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '0'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = os.getenv('GEMINI_API_URL', "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DATABASE_URL = os.getenv('DATABASE_URL')
# RAPIDAPI_KEY —Ç–∞ RAPIDAPI_HOST –±—É–ª–∏ —É –ø–µ—Ä—à–æ–º—É —Ñ–∞–π–ª—ñ, –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É –¥—Ä—É–≥–æ–º—É, —Ç–æ–º—É –ø—Ä–∏–±—Ä–∞–≤ —ó—Ö –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è.
# –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, —ó—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- 3. –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è ---
def validate_env_vars():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.
    –Ø–∫—â–æ –±—É–¥—å-—è–∫–∞ –∑ –Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—è, –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É.
    –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–º—É —Å—Ç–∞–Ω—ñ.
    """
    missing_vars = []
    if not TOKEN:
        missing_vars.append('TELEGRAM_BOT_TOKEN')
    if not WEBHOOK_URL:
        missing_vars.append('WEBHOOK_URL')
    if not DATABASE_URL:
        missing_vars.append('DATABASE_URL')
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ADMIN_CHAT_ID —Ç–∞ CHANNEL_ID –Ω–∞ –Ω–µ–Ω—É–ª—å–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    # (—è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ int —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ 0 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    if ADMIN_CHAT_ID == 0:
        missing_vars.append('ADMIN_CHAT_ID')
    if CHANNEL_ID == 0:
        missing_vars.append('CHANNEL_ID')

    if missing_vars:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è: {', '.join(missing_vars)}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        exit(1)

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
validate_env_vars()

# --- 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TeleBot —Ç–∞ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# --- 4.1. –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ú–ï–†–ï–ñ–ï–í–ò–• –ó–ê–ü–ò–¢–Ü–í (RETRY-–ú–ï–•–ê–ù–Ü–ó–ú) ---
# –î–æ–¥–∞–Ω–æ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞. –¶–µ–π –±–ª–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
# –ø–æ–≤—Ç–æ—Ä—é—î –∑–∞–ø–∏—Ç–∏ –¥–æ Telegram API —É –≤–∏–ø–∞–¥–∫—É —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø—Ä–æ–±–ª–µ–º.
try:
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry

    retry_strategy = Retry(
        total=3,  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        status_forcelist=[429, 500, 502, 503, 504],  # HTTP –∫–æ–¥–∏, –ø—Ä–∏ —è–∫–∏—Ö –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏
        allowed_methods=frozenset(['HEAD', 'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'TRACE']), # –ú–µ—Ç–æ–¥–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
        backoff_factor=1,  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏ (1—Å, 2—Å, 4—Å)
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session = telebot.apihelper._get_req_session()
    session.mount("https://", adapter)
    logger.info("–ú–µ—Ä–µ–∂–µ–≤–∏–π –∞–¥–∞–ø—Ç–µ—Ä –∑ –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
except ImportError:
    logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ 'requests' –∞–±–æ 'urllib3'. –ú–µ—Ö–∞–Ω—ñ–∑–º –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–± –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")


# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö –±–æ—Ç–∞.
    –õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É

            # –°–ø—Ä–æ–±–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É
            if args:
                first_arg = args[0]
                if isinstance(first_arg, types.Message):
                    chat_id_to_notify = first_arg.chat.id
                elif isinstance(first_arg, types.CallbackQuery):
                    chat_id_to_notify = first_arg.message.chat.id
            
            try:
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: `{func.__name__}`\n–ü–æ–º–∏–ª–∫–∞: `{e}`\n–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö Render.")
                # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–æ–º–∏–ª–∫—É (—è–∫—â–æ —Ü–µ –Ω–µ –∞–¥–º—ñ–Ω)
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–∞–∑–∏ –î–∞–Ω–∏—Ö (PostgreSQL) ---
def get_db_connection():
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î DATABASE_URL –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.
    """
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è DictCursor –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤,
        # —â–æ –∑—Ä—É—á–Ω—ñ—à–µ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö –∑–∞ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫.
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

@error_handler
def init_db():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å.
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î –Ω–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î (–º—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ö–µ–º–∏).
    """
    conn = get_db_connection()
    if not conn:
        logger.critical("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ë–î –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")
        exit(1)
    
    try:
        with conn.cursor() as cur:
            # –¢–∞–±–ª–∏—Ü—è users –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    is_blocked BOOLEAN DEFAULT FALSE,
                    blocked_by BIGINT,
                    blocked_at TIMESTAMP WITH TIME ZONE,
                    commission_paid REAL DEFAULT 0,
                    commission_due REAL DEFAULT 0,
                    last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    referrer_id BIGINT -- –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è products –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY,
                    seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    seller_username TEXT,
                    product_name TEXT NOT NULL,
                    price TEXT NOT NULL,
                    description TEXT NOT NULL,
                    photos TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è —è–∫ JSON —Ä—è–¥–æ–∫ –∑ file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
                    geolocation TEXT, -- –ó–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è —è–∫ JSON —Ä—è–¥–æ–∫ {latitude: ..., longitude: ...}
                    status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
                    commission_rate REAL DEFAULT 0.10,
                    commission_amount REAL DEFAULT 0,
                    moderator_id BIGINT,
                    moderated_at TIMESTAMP WITH TIME ZONE,
                    admin_message_id BIGINT, -- ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
                    channel_message_id BIGINT, -- ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –ø—ñ—Å–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                    views INTEGER DEFAULT 0,
                    likes_count INTEGER DEFAULT 0, -- –î–æ–¥–∞–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É "–û–±—Ä–∞–Ω–µ" / –ª–∞–π–∫—ñ–≤
                    republish_count INTEGER DEFAULT 0,
                    last_republish_date DATE,
                    shipping_options TEXT, -- –î–æ–¥–∞–Ω–æ –¥–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ (JSON array)
                    hashtags TEXT, -- –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —Ö–µ—à—Ç–µ–≥—ñ–≤
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è favorites –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS favorites (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    UNIQUE(user_chat_id, product_id) -- –ó–∞–±–µ–∑–ø–µ—á—É—î, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –æ–±—Ä–∞–Ω–µ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è conversations –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É –∑ AI
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    product_id INTEGER, -- –ú–æ–∂–µ –±—É—Ç–∏ NULL, —è–∫—â–æ —Ä–æ–∑–º–æ–≤–∞ –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
                    message_text TEXT,
                    sender_type TEXT, -- 'user' –∞–±–æ 'ai' (–¥–ª—è Gemini API —Ü–µ 'model')
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è commission_transactions –¥–ª—è –æ–±–ª—ñ–∫—É –∫–æ–º—ñ—Å—ñ–π
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS commission_transactions (
                    id SERIAL PRIMARY KEY,
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id) ON DELETE CASCADE,
                    amount REAL NOT NULL,
                    status TEXT DEFAULT 'pending_payment', -- pending_payment, paid, cancelled
                    payment_details TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    paid_at TIMESTAMP WITH TIME ZONE
                );
            """))
            # –¢–∞–±–ª–∏—Ü—è statistics –¥–ª—è –∑–±–æ—Ä—É —Ä—ñ–∑–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞
            cur.execute(pg_sql.SQL("""
                CREATE TABLE IF NOT EXISTS statistics (
                    id SERIAL PRIMARY KEY,
                    action TEXT NOT NULL,
                    user_id BIGINT,
                    product_id INTEGER,
                    details TEXT,
                    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                );
            """))
            
            # --- –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ö–µ–º–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤) ---
            migrations = {
                'products': [
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS republish_count INTEGER DEFAULT 0;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS last_republish_date DATE;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS shipping_options TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS hashtags TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0;"
                ],
                'users': [
                    "ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_id BIGINT;"
                ]
            }
            for table, columns in migrations.items():
                for column_sql in columns:
                    try:
                        cur.execute(pg_sql.SQL(column_sql))
                        conn.commit()
                        logger.info(f"–ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ '{table}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞: {column_sql}")
                    except psycopg2.Error as e:
                        # –Ø–∫—â–æ —Å—Ç–æ–≤–ø–µ—Ü—å –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
                        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó '{column_sql}': {e}")
                        conn.rollback() # –í—ñ–¥–∫–∞—Ç —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
            conn.commit() # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–º—ñ—Ç –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        conn.rollback() # –í—ñ–¥–∫–∞—Ç –≤—Å—ñ—Ö –∑–º—ñ–Ω —É –≤–∏–ø–∞–¥–∫—É –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏
        exit(1) # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –ë–î –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
    finally:
        if conn:
            conn.close()

# --- 7. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
# –¶–µ —Å–ª–æ–≤–Ω–∏–∫, —â–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É).
# –î–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –ø–∞–º'—è—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞ —ñ –≤—Ç—Ä–∞—á–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É.
user_data = {}

# --- 8. –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message_or_user, referrer_id=None):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö PostgreSQL.
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –≤–∑–∞—î–º–æ–¥—ñ—ó, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.
    –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–π—à–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.
    """
    user = None
    chat_id = None

    if isinstance(message_or_user, types.Message):
        user = message_or_user.from_user
        chat_id = message_or_user.chat.id
    elif isinstance(message_or_user, types.User):
        user = message_or_user
        chat_id = user.id
    else:
        logger.warning(f"save_user –æ—Ç—Ä–∏–º–∞–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø: {type(message_or_user)}")
        return

    if not user or not chat_id:
        logger.warning("save_user: user –∞–±–æ chat_id –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.")
        return

    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        cur.execute(pg_sql.SQL("SELECT chat_id, referrer_id FROM users WHERE chat_id = %s;"), (chat_id,))
        existing_user = cur.fetchone()

        if existing_user:
            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cur.execute(pg_sql.SQL("""
                UPDATE users SET username = %s, first_name = %s, last_name = %s, last_activity = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (user.username, user.first_name, user.last_name, chat_id))
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cur.execute(pg_sql.SQL("""
                INSERT INTO users (chat_id, username, first_name, last_name, referrer_id)
                VALUES (%s, %s, %s, %s, %s)
                ON CONFLICT (chat_id) DO NOTHING; -- –ó–∞–ø–æ–±—ñ–≥–∞—î –ø–æ–º–∏–ª–∫–∞–º, —è–∫—â–æ —Ä–∞–ø—Ç–æ–º race condition
            """), (chat_id, user.username, user.first_name, user.last_name, referrer_id))
            logger.info(f"–ù–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –¥–æ–¥–∞–Ω–æ. –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_id}")
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback() # –í—ñ–¥–∫–∞—Ç –∑–º—ñ–Ω —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    finally:
        if conn:
            conn.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn: return True # –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è, –≤–≤–∞–∂–∞—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT is_blocked FROM users WHERE chat_id = %s;"), (chat_id,))
        result = cur.fetchone()
        return result and result['is_blocked'] # –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è {chat_id}: {e}", exc_info=True)
        return True
    finally:
        if conn:
            conn.close()

@error_handler
def set_user_block_status(admin_id, chat_id, status):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (True/False) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    conn = get_db_connection()
    if not conn: return False
    try:
        cur = conn.cursor()
        if status: # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = TRUE, blocked_by = %s, blocked_at = CURRENT_TIMESTAMP
                WHERE chat_id = %s;
            """), (admin_id, chat_id))
        else: # –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cur.execute(pg_sql.SQL("""
                UPDATE users SET is_blocked = FALSE, blocked_by = NULL, blocked_at = NULL
                WHERE chat_id = %s;
            """), (chat_id,))
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

@error_handler
def generate_hashtags(description, num_hashtags=5):
    """
    –ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É.
    –í–∏–¥–∞–ª—è—î —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è, –æ–±–º–µ–∂—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–µ—à—Ç–µ–≥—ñ–≤.
    """
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set([
        '—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
        '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
        '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
        '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
        '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
        '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', 
        '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'
    ])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(dict.fromkeys(filtered_words)) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ
    hashtags = ['#' + word for word in unique_words[:num_hashtags]] # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ N —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤
    return " ".join(hashtags) if hashtags else ""

@error_handler
def log_statistics(action, user_id=None, product_id=None, details=None):
    """
    –õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO statistics (action, user_id, product_id, details)
            VALUES (%s, %s, %s, %s)
        '''), (action, user_id, product_id, details))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

# --- 9. Gemini AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ---
@error_handler
def get_gemini_response(prompt, conversation_history=None):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini AI.
    –Ø–∫—â–æ API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä—É—î –∑–∞–≥–ª—É—à–∫—É (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞).
    """
    if not GEMINI_API_KEY:
        logger.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Content-Type": "application/json"
    }

    # –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
    system_prompt = """–¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. 
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞: –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º, —ñ–Ω–æ–¥—ñ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, 
    –∞–ª–µ –∑–∞–≤–∂–¥–∏ –∫–æ—Ä–∏—Å–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º.
    –î–æ–ø–æ–º–∞–≥–∞–π –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂—ñ, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."""

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è Gemini API
    # Gemini API –æ—á—ñ–∫—É—î —Ñ–æ—Ä–º–∞—Ç: [{"role": "user", "parts": [{"text": "..."}]}, {"role": "model", "parts": [{"text": "..."}]}]
    gemini_messages = [{"role": "user", "parts": [{"text": system_prompt}]}]
    
    if conversation_history:
        for msg in conversation_history:
            role = "user" if msg["sender_type"] == 'user' else "model" # Gemini API –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 'model' –¥–ª—è AI
            gemini_messages.append({"role": role, "parts": [{"text": msg["message_text"]}]})
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    gemini_messages.append({"role": "user", "parts": [{"text": prompt}]})

    payload = {
        "contents": gemini_messages
    }

    try:
        api_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}"

        response = requests.post(api_url, headers=headers, json=payload, timeout=30)
        response.raise_for_status() # –í–∏–∫–ª–∏—á–µ HTTPError –¥–ª—è 4xx/5xx –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø–æ–º–∏–ª–∫–∏ HTTP)
        
        data = response.json()
        if data.get("candidates") and len(data["candidates"]) > 0 and \
           data["candidates"][0].get("content") and data["candidates"][0]["content"].get("parts"):
            content = data["candidates"][0]["content"]["parts"][0]["text"]
            logger.info(f"Gemini –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...") # –õ–æ–≥—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {data}")
            return generate_elon_style_response(prompt) # –ó–∞–≥–ª—É—à–∫–∞, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Gemini API: {e}", exc_info=True)
        return generate_elon_style_response(prompt) # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –º–µ—Ä–µ–∂—ñ
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {e}", exc_info=True)
        return generate_elon_style_response(prompt) # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π —ñ–Ω—à—ñ–π –ø–æ–º–∏–ª—Ü—ñ

def generate_elon_style_response(prompt):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
    –∞–±–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø–æ–º–∏–ª–∫–∏.
    """
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    # –î–æ–¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —É –∑–∞–ø–∏—Ç—ñ
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å!"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ AI) –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ —É –ë–î
    –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI.
    """
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO conversations (user_chat_id, product_id, message_text, sender_type)
            VALUES (%s, %s, %s, %s)
        '''), (chat_id, product_id, message_text, sender_type))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def get_conversation_history(chat_id, limit=5):
    """
    –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI.
    """
    conn = get_db_connection()
    if not conn: return []
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            SELECT message_text, sender_type FROM conversations 
            WHERE user_chat_id = %s 
            ORDER BY timestamp DESC LIMIT %s
        '''), (chat_id, limit))
        results = cur.fetchall()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, —â–æ–± –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–∏ –ø–µ—Ä—à–∏–º–∏
        history = [{"message_text": row['message_text'], "sender_type": row['sender_type']} 
                   for row in reversed(results)]
        
        return history
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤: {e}", exc_info=True)
        return []
    finally:
        if conn:
            conn.close()

# --- 10. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
# –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –±–æ—Ç–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
main_menu_markup.add(types.KeyboardButton("‚≠ê –û–±—Ä–∞–Ω—ñ"), types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")) # –î–æ–¥–∞–Ω–æ "–û–±—Ä–∞–Ω—ñ"
main_menu_markup.add(types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª"), types.KeyboardButton("ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫"))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
cancel_button = types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") # –ó–º—ñ–Ω–µ–Ω–æ —Ç–µ–∫—Å—Ç –∑ "–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è" –Ω–∞ "–°–∫–∞—Å—É–≤–∞—Ç–∏"

# --- 11. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –í—ñ—Ç–∞—î –Ω–æ–≤–æ–≥–æ/—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    –ó–±–µ—Ä—ñ–≥–∞—î ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–π—à–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.
    """
    chat_id = message.chat.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    referrer_id = None
    parts = message.text.split()
    if len(parts) > 1 and parts[0] == '/start':
        try:
            potential_referrer_id = int(parts[1])
            if potential_referrer_id != chat_id: # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
                referrer_id = potential_referrer_id
        except (ValueError, IndexError):
            pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —î —á–∏—Å–ª–æ–º –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î, –ø–µ—Ä–µ–¥–∞—é—á–∏ referrer_id
    save_user(message, referrer_id)
    # –õ–æ–≥—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start
    log_statistics('start', chat_id, details=f"referrer: {referrer_id}")

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—Ç—É–∂–Ω–∏–π AI! üöÄ\n\n"
        "–©–æ —è –≤–º—ñ—é:\n"
        "üì¶ –î–æ–ø–æ–º–∞–≥–∞—é —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        "ü§ù –í–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç–∞ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
        "üìç –û–±—Ä–æ–±–ª—è—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–∞ —Ñ–æ—Ç–æ\n"
        "üí∞ –°–ª—ñ–¥–∫—É—é –∑–∞ –∫–æ–º—ñ—Å—ñ—è–º–∏\n"
        "üéØ –ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ —Ü—ñ–Ω–∏\n"
        "‚≠ê –î–æ–¥–∞—é —Ç–æ–≤–∞—Ä–∏ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ\n" # –î–æ–¥–∞–Ω–æ
        "üèÜ –û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—é —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n" # –î–æ–¥–∞–Ω–æ
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin.
    –ù–∞–¥–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è ADMIN_CHAT_ID.
    """
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üí∞ –ö–æ–º—ñ—Å—ñ—ó", callback_data="admin_commissions"),
        types.InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_ai_stats"),
        types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals") # –î–æ–¥–∞–Ω–æ
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')


# --- 12. –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
# –ö–æ–∂–µ–Ω –∫—Ä–æ–∫ –º–∞—î –Ω–∞–∑–≤—É, –ø—ñ–¥–∫–∞–∑–∫—É, –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫, –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫,
# —Ç–∞ –æ–ø—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É (–¥–ª—è —Ñ–æ—Ç–æ —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó).
# –î–æ–¥–∞–Ω–æ –∫—Ä–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/6: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:", 'next_step': 2, 'prev_step': None},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/6: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `500 –≥—Ä–Ω`, `100 USD` –∞–±–æ `–î–æ–≥–æ–≤—ñ—Ä–Ω–∞`):", 'next_step': 3, 'prev_step': 1},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/6: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ':", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ', 'prev_step': 2},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/6: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é', 'prev_step': 3},
    5: {'name': 'waiting_shipping', 'prompt': "üöö *–ö—Ä–æ–∫ 5/6: –î–æ—Å—Ç–∞–≤–∫–∞*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):", 'next_step': 6, 'prev_step': 4}, # –ù–æ–≤–∏–π –∫—Ä–æ–∫
    6: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 6/6: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:", 'next_step': 'confirm', 'prev_step': 5}
}

@error_handler
def start_add_product_flow(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é—á–∏ user_data."""
    chat_id = message.chat.id
    user_data[chat_id] = {
        'flow': 'add_product', # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ä–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤
        'step_number': 1, 
        'data': {
            'photos': [], 
            'geolocation': None,
            'shipping_options': [], # –î–æ–¥–∞–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
            'product_name': '',
            'price': '',
            'description': '',
            'hashtags': '' # –î–æ–¥–∞–Ω–æ –¥–ª—è —Ö–µ—à—Ç–µ–≥—ñ–≤
        }
    }
    send_product_step_message(chat_id)
    log_statistics('start_add_product', chat_id)

@error_handler
def send_product_step_message(chat_id):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        return # –í–∏–π—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ —Ü—å–æ–º—É –ø–æ—Ç–æ—Ü—ñ

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_data[chat_id]['step'] = step_config['name'] # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–æ–∫—ñ–≤ –∑ —Ñ–æ—Ç–æ, –ª–æ–∫–∞—Ü—ñ—î—é —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–æ—é
    if step_config['name'] == 'waiting_photos':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_location':
        markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
        markup.add(types.KeyboardButton(step_config['skip_button']))
    elif step_config['name'] == 'waiting_shipping':
        # –î–ª—è –∫—Ä–æ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        inline_markup = types.InlineKeyboardMarkup(row_width=2)
        shipping_options_list = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á"] # –î–æ–¥–∞–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
        selected_options = user_data[chat_id]['data'].get('shipping_options', [])

        buttons = []
        for opt in shipping_options_list:
            emoji = '‚úÖ ' if opt in selected_options else ''
            buttons.append(types.InlineKeyboardButton(f"{emoji}{opt}", callback_data=f"shipping_{opt}"))
        
        inline_markup.add(*buttons)
        inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
        
        bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=inline_markup)
        return # –í–∞–∂–ª–∏–≤–æ –≤–∏–π—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", —è–∫—â–æ —Ü–µ –Ω–µ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫
    if step_config['prev_step'] is not None:
        markup.add(back_button)
    
    # –ó–∞–≤–∂–¥–∏ –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    markup.add(cancel_button)
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

@error_handler
def process_product_step(message):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.
    –í–∏–∫–æ–Ω—É—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –≤–≤–æ–¥—É —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏.
    """
    chat_id = message.chat.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥—ñ–π—Å–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        # –Ø–∫—â–æ –Ω—ñ, —ñ–≥–Ω–æ—Ä—É—î–º–æ –∞–±–æ –ø—Ä–æ—Å–∏–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –º–µ–Ω—é
        bot.send_message(chat_id, "–í–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é.", reply_markup=main_menu_markup)
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_text = message.text if message.content_type == 'text' else ""

    # –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
    if user_text == cancel_button.text:
        del user_data[chat_id] # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if user_text == back_button.text:
        if step_config['prev_step'] is not None:
            user_data[chat_id]['step_number'] = step_config['prev_step']
            send_product_step_message(chat_id)
        else:
            bot.send_message(chat_id, "–í–∏ –≤–∂–µ –Ω–∞ –ø–µ—Ä—à–æ–º—É –∫—Ä–æ—Ü—ñ.")
        return

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É –∫—Ä–æ–∫—É (–¥–ª—è —Ñ–æ—Ç–æ —Ç–∞ –ª–æ–∫–∞—Ü—ñ—ó)
    if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
        go_to_next_step(chat_id)
        return

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É
    if step_config['name'] == 'waiting_name':
        if user_text and 3 <= len(user_text) <= 100:
            user_data[chat_id]['data']['product_name'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")

    elif step_config['name'] == 'waiting_price':
        if user_text and len(user_text) <= 50:
            user_data[chat_id]['data']['price'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤):")

    elif step_config['name'] == 'waiting_photos':
        if user_text == "–î–∞–ª—ñ": # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–î–∞–ª—ñ" –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'/'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ'.")

    elif step_config['name'] == 'waiting_location':
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å –ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ –ø—Ä–æ–ø—É—Å–∫—É
        bot.send_message(chat_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    
    elif step_config['name'] == 'waiting_shipping':
        # –¶–µ–π –∫—Ä–æ–∫ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é, —Ç–æ–º—É —Ç—É—Ç —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –Ω–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏.")

    elif step_config['name'] == 'waiting_description':
        if user_text and 10 <= len(user_text) <= 1000:
            user_data[chat_id]['data']['description'] = user_text
            user_data[chat_id]['data']['hashtags'] = generate_hashtags(user_text) # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à—Ç–µ–≥–∏
            confirm_and_send_for_moderation(chat_id) # –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
        else:
            bot.send_message(chat_id, "–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (10-1000 —Å–∏–º–≤–æ–ª—ñ–≤). –ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:")

@error_handler
def go_to_next_step(chat_id):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    current_step_number = user_data[chat_id]['step_number']
    next_step_number = ADD_PRODUCT_STEPS[current_step_number]['next_step']
    
    if next_step_number == 'confirm':
        confirm_and_send_for_moderation(chat_id)
    else:
        user_data[chat_id]['step_number'] = next_step_number
        send_product_step_message(chat_id)

@error_handler
def process_product_photo(message):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π —Ç–æ–≤–∞—Ä—É –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_photos':
        if len(user_data[chat_id]['data']['photos']) < 5:
            file_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º–æ —Ñ–æ—Ç–æ –Ω–∞–π–≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ
            user_data[chat_id]['data']['photos'].append(file_id)
            photos_count = len(user_data[chat_id]['data']['photos'])
            bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ {photos_count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'")
        else:
            bot.send_message(chat_id, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def process_product_location(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_location':
        if message.location: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –æ–±'—î–∫—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
            user_data[chat_id]['data']['geolocation'] = {
                'latitude': message.location.latitude,
                'longitude': message.location.longitude
            }
            bot.send_message(chat_id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
            go_to_next_step(chat_id)
        else:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é'.")
    else:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ.")

@error_handler
def confirm_and_send_for_moderation(chat_id):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä —É –ë–î –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫—Ä–æ–∫—ñ–≤,
    —Å–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.
    """
    data = user_data[chat_id]['data']
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    cur = conn.cursor()
    product_id = None
    try:
        user_info = bot.get_chat(chat_id)
        seller_username = user_info.username if user_info.username else None

        cur.execute(pg_sql.SQL('''
            INSERT INTO products 
            (seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags, status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 'pending')
            RETURNING id;
        '''), (
            chat_id,
            seller_username,
            data['product_name'],
            data['price'],
            data['description'],
            json.dumps(data['photos']) if data['photos'] else None, # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ —è–∫ JSON —Ä—è–¥–æ–∫
            json.dumps(data['geolocation']) if data['geolocation'] else None, # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —è–∫ JSON —Ä—è–¥–æ–∫
            json.dumps(data['shipping_options']) if data['shipping_options'] else None, # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø—Ü—ñ—ó –¥–æ—Å—Ç–∞–≤–∫–∏
            data['hashtags'], # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–µ—à—Ç–µ–≥–∏
        ))
        
        product_id = cur.fetchone()[0] # –û—Ç—Ä–∏–º—É—î–º–æ ID —â–æ–π–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        conn.commit()
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
        bot.send_message(chat_id, 
            f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.",
            reply_markup=main_menu_markup)
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
        send_product_for_admin_review(product_id) # –ó–º—ñ–Ω–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ product_id
        
        # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
        del user_data[chat_id]
        
        log_statistics('product_added', chat_id, product_id)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_for_admin_review(product_id):
    """
    –§–æ—Ä–º—É—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä –∑ –ë–î.
    """
    conn = get_db_connection()
    if not conn: return

    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags
            FROM products WHERE id = %s;
        """), (product_id,))
        data = cur.fetchone()

        if not data:
            logger.error(f"–¢–æ–≤–∞—Ä –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–≤'—é.")
            return

        seller_chat_id = data['seller_chat_id']
        seller_username = data['seller_username'] if data['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        photos = json.loads(data['photos']) if data['photos'] else []
        geolocation = json.loads(data['geolocation']) if data['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(data['shipping_options'])) if data['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = data['hashtags'] if data['hashtags'] else ""

        review_text = (
            f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
            f"üÜî ID: {product_id}\n"
            f"üìù –ù–∞–∑–≤–∞: {data['product_name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
            f"üìÑ –û–ø–∏—Å: {data['description'][:500]}...\n" # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å, —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            f"üì∏ –§–æ—Ç–æ: {len(photos)} —à—Ç.\n"
            f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {shipping_options_text}\n" # –î–æ–¥–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
            f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {hashtags}\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
            types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
        )
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ö–µ—à—Ç–µ–≥—ñ–≤ —Ç–∞ —Ñ–æ—Ç–æ
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
            types.InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ", callback_data=f"mod_rotate_photo_{product_id}")
        )
        
        try:
            admin_msg = None
            if photos:
                media = [types.InputMediaPhoto(photo_id, caption=review_text if i == 0 else None, parse_mode='Markdown') 
                         for i, photo_id in enumerate(photos)]
                
                sent_messages = bot.send_media_group(ADMIN_CHAT_ID, media)
                
                if sent_messages:
                    admin_msg = bot.send_message(ADMIN_CHAT_ID, 
                                                 f"üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                                 reply_markup=markup, 
                                                 parse_mode='Markdown',
                                                 reply_to_message_id=sent_messages[0].message_id)
                else:
                    admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                               parse_mode='Markdown',
                                               reply_markup=markup)
            else:
                admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text,
                                           parse_mode='Markdown',
                                           reply_markup=markup)
            
            if admin_msg:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                cur.execute(pg_sql.SQL("UPDATE products SET admin_message_id = %s WHERE id = %s;"),
                               (admin_msg.message_id, product_id))
                conn.commit()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)
            conn.rollback()
    finally:
        if conn:
            conn.close()

# --- 13. –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_messages(message):
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –ª–æ–∫–∞—Ü—ñ—è).
    –í–∏–∑–Ω–∞—á–∞—î, —è–∫–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –º–∞—î –±—É—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π (–¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É, AI —á–∞—Ç, –º–µ–Ω—é).
    """
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(pg_sql.SQL("UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE chat_id = %s"), (chat_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}")
            conn.rollback()
        finally:
            conn.close()

    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞: —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±–∞–≥–∞—Ç–æ—à–∞–≥–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ
    if chat_id in user_data and user_data[chat_id].get('flow'):
        current_flow = user_data[chat_id]['flow']
        if current_flow == 'add_product':
            if message.content_type == 'text':
                process_product_step(message)
            elif message.content_type == 'photo':
                process_product_photo(message)
            elif message.content_type == 'location':
                process_product_location(message)
            else:
                bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –∞–±–æ 'üîô –ù–∞–∑–∞–¥'.")
        elif current_flow == 'change_price':
            process_new_price(message)
        elif current_flow == 'mod_edit_tags': # –î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            process_new_hashtags_mod(message)
        return # –í–∞–∂–ª–∏–≤–æ, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
    if user_text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä":
        start_add_product_flow(message)
    elif user_text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏":
        send_my_products(message)
    elif user_text == "‚≠ê –û–±—Ä–∞–Ω—ñ": # –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è "–û–±—Ä–∞–Ω—ñ"
        send_favorites(message)
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
        send_help_message(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª":
        send_channel_link(message)
    elif user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫":
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à AI –ø–æ–º—ñ—á–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø—Ä–æ–¥–∞–∂—ñ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å!\n\n(–ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ä–µ–∂–∏–º—É AI —á–∞—Ç—É.)", reply_markup=types.ReplyKeyboardRemove())
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è AI —á–∞—Ç—É
        bot.register_next_step_handler(message, handle_ai_chat)
    elif message.content_type == 'text': 
        # –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–æ–Ω–æ –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é/–∫–Ω–æ–ø–∫–æ—é –º–µ–Ω—é,
        # —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ñ–Ω—à–æ–º—É –ø–æ—Ç–æ—Ü—ñ, –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–≥–æ AI.
        handle_ai_chat(message)
    elif message.content_type == 'photo':
        bot.send_message(chat_id, "–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ —Ñ–æ—Ç–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—é, —â–æ –∑ –Ω–∏–º —Ä–æ–±–∏—Ç–∏ –ø–æ–∑–∞ –ø—Ä–æ—Ü–µ—Å–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É. ü§î")
    elif message.content_type == 'location':
        bot.send_message(chat_id, f"–Ø –±–∞—á—É –≤–∞—à—É –≥–µ–æ—Ç–æ—á–∫—É: {message.location.latitude}, {message.location.longitude}. –Ø–∫ —è –º–æ–∂—É —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏?")
    else:
        bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

@error_handler
def handle_ai_chat(message):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É.
    –ü—Ä–æ–¥–æ–≤–∂—É—î –¥—ñ–∞–ª–æ–≥ –∑ AI, –¥–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —Å–∫–∞—Å—É—î —á–∞—Ç.
    """
    chat_id = message.chat.id
    user_text = message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è AI —á–∞—Ç—É
    if user_text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏" or user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏": # –ó–º—ñ–Ω–µ–Ω–æ: –≤—Ä–∞—Ö–æ–≤—É—î–º–æ "—Å–∫–∞—Å—É–≤–∞—Ç–∏" –±–µ–∑ –µ–º–æ–¥–∑—ñ
        bot.send_message(chat_id, "–ß–∞—Ç –∑ AI —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        # –í–∞–∂–ª–∏–≤–æ: –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ handle_ai_chat, telebot –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞—Å—É—î register_next_step_handler.
        return

    # –¶–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –ø–µ—Ä–µ–±—É–≤–∞—é—á–∏ –≤ AI —á–∞—Ç—ñ,
    # –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—É–≤ "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫" –∞–±–æ `/start`.
    if user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫" or user_text == "/start":
        bot.send_message(chat_id, "–í–∏ –≤–∂–µ –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É. –ù–∞–ø–∏—à—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat) # –ó–Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è AI —á–∞—Ç—É
        return # –í–∞–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏

    save_conversation(chat_id, user_text, 'user') # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Gemini AI
    conversation_history = get_conversation_history(chat_id, limit=10) # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    
    ai_reply = get_gemini_response(user_text, conversation_history) # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini
    save_conversation(chat_id, ai_reply, 'ai') # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(chat_id, f"ü§ñ –î—É–º–∞—é...\n{ai_reply}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_ai_chat) # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ AI —á–∞—Ç


# --- 14. –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback-–∑–∞–ø–∏—Ç—ñ–≤ ---
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def callback_inline(call):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (callback_data).
    –í–∏–∫–æ–Ω—É—î –¥—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ callback_data.
    """
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data
    log_statistics('callback_query', chat_id, details=data)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id != ADMIN_CHAT_ID and is_user_blocked(chat_id):
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    # --- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
    if data == "admin_stats":
        send_admin_stats(call)
    elif data == "admin_pending":
        send_pending_products_for_moderation(call)
    elif data == "admin_users":
        send_user_list(call)
    elif data == "admin_block":
        send_block_unblock_panel(call)
    elif data == "admin_commissions":
        send_commission_panel(call)
    elif data == "admin_ai_stats":
        send_ai_stats(call) # –î–æ–¥–∞–Ω–æ
    elif data == "admin_referrals": # –î–æ–¥–∞–Ω–æ
        send_referral_stats(call)

    # --- –û–±—Ä–æ–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ---
    elif data.startswith("approve_"):
        product_id = int(data.split("_")[1])
        approve_product(product_id, chat_id, message_id)
    elif data.startswith("reject_"):
        product_id = int(data.split("_")[1])
        reject_product(product_id, chat_id, message_id)
    elif data.startswith("block_user_"):
        target_chat_id = int(data.split("_")[2])
        block_user_action(chat_id, target_chat_id, message_id)
    elif data.startswith("unblock_user_"):
        target_chat_id = int(data.split("_")[2])
        unblock_user_action(chat_id, target_chat_id, message_id)
    elif data.startswith("toggle_block_"):
        target_chat_id = int(data.split("_")[2])
        toggle_user_block_status(chat_id, target_chat_id, message_id)
    elif data.startswith("pay_commission_"):
        product_id = int(data.split("_")[2])
        mark_commission_paid(product_id, chat_id, message_id)
    elif data.startswith("mod_edit_tags_"): # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏
        product_id = int(data.split("_")[3])
        start_edit_hashtags_flow(chat_id, product_id, message_id)
    elif data.startswith("mod_rotate_photo_"): # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ
        product_id = int(data.split("_")[3])
        request_photo_correction(product_id, chat_id, message_id)

    # --- –û–±—Ä–æ–±–∫–∞ "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏" ---
    elif data.startswith("view_my_product_"):
        product_id = int(data.split("_")[3])
        send_product_details_to_seller(chat_id, product_id, message_id)
    elif data.startswith("delete_product_"):
        product_id = int(data.split("_")[2])
        delete_product(chat_id, product_id, message_id)
    elif data.startswith("change_price_"):
        product_id = int(data.split("_")[2])
        start_change_price_flow(chat_id, product_id, message_id)
    elif data.startswith("mark_sold_"):
        product_id = int(data.split("_")[2])
        mark_product_sold(chat_id, product_id, message_id)
    elif data.startswith("republish_"):
        product_id = int(data.split("_")[1])
        republish_product(chat_id, product_id, message_id)
    elif data.startswith("seller_contact_"): # –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –∑ –ø—Ä–æ–¥–∞–≤—Ü–µ–º
        product_id = int(data.split("_")[2])
        contact_seller(call.from_user.id, product_id, call.message.chat.id)
    elif data.startswith("next_product_"): # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
        offset = int(data.split("_")[2])
        send_my_products(call.message, offset=offset)
    elif data.startswith("prev_product_"):
        offset = int(data.split("_")[2])
        send_my_products(call.message, offset=offset)

    # --- –û–±—Ä–æ–±–∫–∞ –û–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ ---
    elif data.startswith("toggle_favorite_"):
        product_id = int(data.split("_")[2])
        toggle_favorite_product(chat_id, product_id, message_id, is_from_channel=False)
    elif data.startswith("channel_fav_"): # –õ–∞–π–∫ –∑ –∫–∞–Ω–∞–ª—É
        product_id = int(data.split("_")[2])
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
        original_channel_message_id = call.message.message_id 
        toggle_favorite_product(chat_id, product_id, original_channel_message_id, is_from_channel=True)
    elif data.startswith("view_fav_product_"):
        product_id = int(data.split("_")[3])
        send_product_details_to_user(chat_id, product_id, message_id, is_favorite_view=True) # –î–æ–¥–∞–Ω–æ is_favorite_view
    elif data.startswith("next_fav_product_"):
        offset = int(data.split("_")[3])
        send_favorites(call.message, offset=offset)
    elif data.startswith("prev_fav_product_"):
        offset = int(data.split("_")[3])
        send_favorites(call.message, offset=offset)

    # --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏ ---
    elif data.startswith("shipping_"):
        if data == "shipping_next":
            go_to_next_step(chat_id)
        else:
            option = data.replace("shipping_", "")
            current_options = user_data[chat_id]['data'].get('shipping_options', [])
            if option in current_options:
                current_options.remove(option)
            else:
                current_options.append(option)
            user_data[chat_id]['data']['shipping_options'] = current_options
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –æ–ø—Ü—ñ—ó
            inline_markup = types.InlineKeyboardMarkup(row_width=2)
            shipping_options_list = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", "–û—Å–æ–±–∏—Å—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á"]
            buttons = []
            for opt in shipping_options_list:
                emoji = '‚úÖ ' if opt in current_options else ''
                buttons.append(types.InlineKeyboardButton(f"{emoji}{opt}", callback_data=f"shipping_{opt}"))
            
            inline_markup.add(*buttons)
            inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
            
            bot.edit_message_reply_markup(chat_id, message_id, reply_markup=inline_markup)
            
    bot.answer_callback_query(call.id) # –í–∞–∂–ª–∏–≤–æ: –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ callback_query


# --- 15. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è "–ú–æ—ó —Ç–æ–≤–∞—Ä–∏" ---
PRODUCT_PAGE_SIZE = 5 # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

@error_handler
def send_my_products(message, offset=0):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.
    """
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        cur = conn.cursor()
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cur.execute(pg_sql.SQL("SELECT COUNT(*) FROM products WHERE seller_chat_id = %s;"), (chat_id,))
        total_products = cur.fetchone()[0]

        if total_products == 0:
            bot.send_message(chat_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤. üòî", reply_markup=main_menu_markup)
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        cur.execute(pg_sql.SQL("""
            SELECT id, product_name, price, status, views, likes_count, created_at, last_republish_date
            FROM products
            WHERE seller_chat_id = %s
            ORDER BY created_at DESC
            LIMIT %s OFFSET %s;
        """), (chat_id, PRODUCT_PAGE_SIZE, offset))
        products = cur.fetchall()

        products_text = "üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"
        for prod in products:
            status_emoji = {
                'pending': '‚è≥', 'approved': '‚úÖ', 'rejected': '‚ùå', 'sold': 'üí∞', 'expired': 'üóëÔ∏è'
            }.get(prod['status'], '‚ùì')
            
            republish_info = ""
            if prod['status'] == 'approved':
                republish_info = f" | –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {prod['republish_count']} —Ä–∞–∑—ñ–≤."
                if prod['last_republish_date']:
                    time_since_republish = (date.today() - prod['last_republish_date']).days
                    republish_info += f" (–æ—Å—Ç–∞–Ω–Ω—î {time_since_republish} –¥–Ω. —Ç–æ–º—É)"

            products_text += (
                f"{status_emoji} *{prod['product_name']}* (ID: `{prod['id']}`)\n"
                f"   –¶—ñ–Ω–∞: `{prod['price']}`\n"
                f"   –°—Ç–∞—Ç—É—Å: {prod['status'].capitalize()}\n"
                f"   –ü–µ—Ä–µ–≥–ª—è–¥–∏: {prod['views']} | ‚ù§Ô∏è: {prod['likes_count']}{republish_info}\n\n"
            )
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            product_markup = types.InlineKeyboardMarkup(row_width=2)
            product_markup.add(
                types.InlineKeyboardButton("üëÅÔ∏è –î–µ—Ç–∞–ª—ñ", callback_data=f"view_my_product_{prod['id']}"),
                types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{prod['id']}")
            )
            if prod['status'] == 'approved':
                product_markup.add(
                    types.InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"republish_{prod['id']}"),
                    types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"mark_sold_{prod['id']}")
                )
            product_markup.add(types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_product_{prod['id']}"))
            
            bot.send_message(chat_id, products_text, parse_mode='Markdown', reply_markup=product_markup)
            products_text = "" # –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É, —â–æ–± –∫–æ–∂–µ–Ω –º–∞–≤ —Å–≤–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        pagination_markup = types.InlineKeyboardMarkup(row_width=2)
        if offset > 0:
            pagination_markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ", callback_data=f"prev_product_{max(0, offset - PRODUCT_PAGE_SIZE)}"))
        if offset + PRODUCT_PAGE_SIZE < total_products:
            pagination_markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è", callback_data=f"next_product_{offset + PRODUCT_PAGE_SIZE}"))
        
        if pagination_markup.keyboard: # –ù–∞–¥—Å–∏–ª–∞—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
            bot.send_message(chat_id, f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {offset // PRODUCT_PAGE_SIZE + 1} –∑ {(total_products + PRODUCT_PAGE_SIZE - 1) // PRODUCT_PAGE_SIZE}", reply_markup=pagination_markup)

        log_statistics('view_my_products', chat_id, details=f"offset: {offset}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –º–æ—ó—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_details_to_seller(chat_id, product_id, message_id_to_edit=None):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø—Ä–æ–¥–∞–≤—Ü—é –¥–µ—Ç–∞–ª—ñ –π–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
    """
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, status,
                   commission_amount, views, likes_count, created_at, updated_at, shipping_options, hashtags, channel_message_id, last_republish_date, republish_count
            FROM products WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, chat_id))
        product = cur.fetchone()

        if not product:
            bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.")
            return

        photos = json.loads(product['photos']) if product['photos'] else []
        geolocation = json.loads(product['geolocation']) if product['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = product['hashtags'] if product['hashtags'] else "–ù–µ–º–∞—î"

        details_text = (
            f"üì¶ *–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É (ID: {product['id']})*\n\n"
            f"üìù *–ù–∞–∑–≤–∞*: {product['product_name']}\n"
            f"üí∞ *–¶—ñ–Ω–∞*: {product['price']}\n"
            f"üìÑ *–û–ø–∏—Å*: {product['description']}\n"
            f"üì∏ *–§–æ—Ç–æ*: {len(photos)} —à—Ç.\n"
            f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
            f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞*: {shipping_options_text}\n"
            f"üè∑Ô∏è *–•–µ—à—Ç–µ–≥–∏*: {hashtags}\n"
            f"üìä *–°—Ç–∞—Ç—É—Å*: {product['status'].capitalize()}\n"
            f"üëÅÔ∏è *–ü–µ—Ä–µ–≥–ª—è–¥–∏*: {product['views']}\n"
            f"‚ù§Ô∏è *–õ–∞–π–∫–∏*: {product['likes_count']}\n"
            f"üìÜ *–°—Ç–≤–æ—Ä–µ–Ω–æ*: {product['created_at'].strftime('%Y-%m-%d %H:%M')}\n"
            f"üîÑ *–û–Ω–æ–≤–ª–µ–Ω–æ*: {product['updated_at'].strftime('%Y-%m-%d %H:%M')}\n"
            f"–ü—É–±–ª—ñ–∫–∞—Ü—ñ–π: {product['republish_count']}"
        )
        if product['last_republish_date']:
            details_text += f" (–æ—Å—Ç–∞–Ω–Ω—è {product['last_republish_date'].strftime('%Y-%m-%d')})"
        
        details_text += f"\n–ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {product['commission_amount']}"

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{product['id']}"),
            types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_product_{product['id']}")
        )
        if product['status'] == 'approved':
             markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"mark_sold_{product['id']}"))
             # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, —è–∫—â–æ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ 7 –¥–Ω—ñ–≤
             if not product['last_republish_date'] or \
                (date.today() - product['last_republish_date']).days >= 7:
                 markup.add(types.InlineKeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"republish_{product['id']}"))
             else:
                 markup.add(types.InlineKeyboardButton(f"–ü–µ—Ä–µ–æ–ø—É–±–ª. —á–µ—Ä–µ–∑ {7 - (date.today() - product['last_republish_date']).days} –¥–Ω.", callback_data="no_republish"))

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–æ –º–æ—ó—Ö —Ç–æ–≤–∞—Ä—ñ–≤"
        markup.add(types.InlineKeyboardButton("üîô –ú–æ—ó —Ç–æ–≤–∞—Ä–∏", callback_data="my_products_back"))

        if photos:
            media = [types.InputMediaPhoto(photo_id, caption=details_text if i == 0 else None, parse_mode='Markdown') for i, photo_id in enumerate(photos)]
            
            if message_id_to_edit:
                # –Ø–∫—â–æ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ —Ñ–æ—Ç–æ –≤–∂–µ –±—É–ª–∏, Telebot –Ω–µ –¥–æ–∑–≤–æ–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–µ–¥—ñ–∞–≥—Ä—É–ø—É,
                # —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
                bot.send_media_group(chat_id, media)
                bot.send_message(chat_id, "üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É (—Ñ–æ—Ç–æ –≤–∏—â–µ)", reply_markup=markup, parse_mode='Markdown')
            else:
                bot.send_media_group(chat_id, media)
                bot.send_message(chat_id, "üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É (—Ñ–æ—Ç–æ –≤–∏—â–µ)", reply_markup=markup, parse_mode='Markdown')
        else:
            if message_id_to_edit:
                bot.edit_message_text(details_text, chat_id, message_id_to_edit, reply_markup=markup, parse_mode='Markdown')
            else:
                bot.send_message(chat_id, details_text, reply_markup=markup, parse_mode='Markdown')
        
        log_statistics('view_product_details', chat_id, product_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É {product_id} –ø—Ä–æ–¥–∞–≤—Ü—é {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É.")
    finally:
        if conn:
            conn.close()

@error_handler
def start_change_price_flow(chat_id, product_id, message_id_to_edit):
    """–ü–æ—á–∏–Ω–∞—î –ø–æ—Ç—ñ–∫ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É."""
    user_data[chat_id] = {
        'flow': 'change_price',
        'product_id': product_id,
        'message_id_to_edit': message_id_to_edit # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    }
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(cancel_button)
    bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É ID `{product_id}` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `600 –≥—Ä–Ω` –∞–±–æ `–¢–æ—Ä–≥`):", reply_markup=markup, parse_mode='Markdown')

@error_handler
def process_new_price(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—É —Ü—ñ–Ω—É, –≤–≤–µ–¥–µ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'change_price':
        return

    product_id = user_data[chat_id]['product_id']
    message_id_to_edit = user_data[chat_id]['message_id_to_edit']
    new_price = message.text

    if new_price == cancel_button.text:
        bot.send_message(chat_id, "–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=main_menu_markup)
        del user_data[chat_id]
        return

    if not new_price or len(new_price) > 50:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("UPDATE products SET price = %s, updated_at = CURRENT_TIMESTAMP WHERE id = %s AND seller_chat_id = %s;"),
                       (new_price, product_id, chat_id))
        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –¶—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É ID `{product_id}` –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ `{new_price}`.", reply_markup=main_menu_markup, parse_mode='Markdown')
        del user_data[chat_id] # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        send_product_details_to_seller(chat_id, product_id, message_id_to_edit) # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
        log_statistics('change_price', chat_id, product_id, details=f"new_price: {new_price}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ü—ñ–Ω–∏.")
    finally:
        if conn:
            conn.close()

@error_handler
def delete_product(chat_id, product_id, message_id_to_edit):
    """–í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        cur = conn.cursor()
        # –û—Ç—Ä–∏–º—É—î–º–æ channel_message_id, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ –∫–∞–Ω–∞–ª—É
        cur.execute(pg_sql.SQL("SELECT channel_message_id FROM products WHERE id = %s AND seller_chat_id = %s;"),
                       (product_id, chat_id))
        product_info = cur.fetchone()
        channel_message_id = product_info['channel_message_id'] if product_info else None

        cur.execute(pg_sql.SQL("DELETE FROM products WHERE id = %s AND seller_chat_id = %s;"), (product_id, chat_id))
        conn.commit()

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ
        if channel_message_id:
            try:
                bot.delete_message(CHANNEL_ID, channel_message_id)
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–∞–Ω–∞–ª—É {CHANNEL_ID}.")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {channel_message_id} –∑ –∫–∞–Ω–∞–ª—É: {e}")

        bot.edit_message_text(f"üóëÔ∏è –¢–æ–≤–∞—Ä ID `{product_id}` —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.", chat_id, message_id_to_edit, parse_mode='Markdown')
        log_statistics('delete_product', chat_id, product_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
        bot.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É ID `{product_id}`.", chat_id, message_id_to_edit, parse_mode='Markdown')
    finally:
        if conn:
            conn.close()

@error_handler
def mark_product_sold(chat_id, product_id, message_id_to_edit):
    """–ü–æ–∑–Ω–∞—á–∞—î —Ç–æ–≤–∞—Ä —è–∫ –ø—Ä–æ–¥–∞–Ω–∏–π."""
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        cur = conn.cursor()
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É
        cur.execute(pg_sql.SQL("""
            UPDATE products SET status = 'sold', updated_at = CURRENT_TIMESTAMP
            WHERE id = %s AND seller_chat_id = %s RETURNING channel_message_id;
        """), (product_id, chat_id))
        
        product_info = cur.fetchone()
        channel_message_id = product_info['channel_message_id'] if product_info else None
        
        conn.commit()

        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ, –¥–æ–¥–∞—é—á–∏ –º—ñ—Ç–∫—É "–ü–†–û–î–ê–ù–û"
        if channel_message_id:
            try:
                product_data = get_product_by_id(product_id)
                if product_data:
                    message_text, media = format_product_message(product_data, add_sold_tag=True)
                    if media:
                        # –î–ª—è –º–µ–¥—ñ–∞–≥—Ä—É–ø–∏ –Ω–µ –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ, –ª–∏—à–µ —Ç–µ–∫—Å—Ç.
                        # –ú–æ–∂–ª–∏–≤–æ, –∫—Ä–∞—â–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—Ç–∏ —Ç–µ–≥ –≤ –∞–¥–º—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
                        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏–º–æ —Å—Ç–∞—Ç—É—Å –≤ –ë–î.
                        # –¶–µ —Å–∫–ª–∞–¥–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –º–µ–¥—ñ–∞–≥—Ä—É–ø–∏.
                        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∑–Ω–∞—á–∏–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ, –∞–±–æ –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î.
                        # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –∑ –æ–¥–Ω–∏–º –º–µ–¥—ñ–∞, –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏.
                        if len(media) == 1:
                            bot.edit_message_caption(chat_id=CHANNEL_ID, message_id=channel_message_id, 
                                                     caption=message_text, parse_mode='Markdown')
                        else:
                            # –î–ª—è –º–µ–¥—ñ–∞–≥—Ä—É–ø –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–º–æ —Ç–µ–∫—Å—Ç "–ü–†–û–î–ê–ù–û" –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
                            bot.send_message(CHANNEL_ID, f"‚ùï –¢–æ–≤–∞—Ä ID `{product_id}` –ø—Ä–æ–¥–∞–Ω–æ! üí∞", 
                                             reply_to_message_id=channel_message_id, parse_mode='Markdown')
                    else:
                        bot.edit_message_text(message_text, CHANNEL_ID, channel_message_id, parse_mode='Markdown')
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")

        bot.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä ID `{product_id}` –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ *–ü—Ä–æ–¥–∞–Ω–∏–π*.", chat_id, message_id_to_edit, parse_mode='Markdown')
        log_statistics('mark_sold', chat_id, product_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É {product_id} —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
        bot.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É ID `{product_id}` —è–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ.", chat_id, message_id_to_edit, parse_mode='Markdown')
    finally:
        if conn:
            conn.close()

@error_handler
def republish_product(chat_id, product_id, message_id_to_edit):
    """–ü–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–æ–≤—É—î —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª."""
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT product_name, price, description, photos, geolocation, shipping_options, hashtags, status, last_republish_date, republish_count
            FROM products WHERE id = %s AND seller_chat_id = %s;
        """), (product_id, chat_id))
        product_data = cur.fetchone()

        if not product_data:
            bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.")
            return
        
        if product_data['status'] != 'approved':
            bot.send_message(chat_id, "–ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ —Å—Ö–≤–∞–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏.")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (—Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤)
        if product_data['last_republish_date']:
            days_since_last_republish = (date.today() - product_data['last_republish_date']).days
            if days_since_last_republish < 7:
                bot.send_message(chat_id, 
                                 f"‚ôªÔ∏è –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ {7 - days_since_last_republish} –¥–Ω. "
                                 f"(–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {product_data['last_republish_date'].strftime('%Y-%m-%d')}).")
                return

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É
        message_text, media = format_product_message(product_data, product_id, seller_chat_id=chat_id)

        try:
            sent_message = None
            if media:
                # Telegram API –¥–æ–∑–≤–æ–ª—è—î –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –º–µ–¥—ñ–∞–≥—Ä—É–ø–∏ (–¥–æ 10 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤).
                # –ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ –º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å, —Ä–µ—à—Ç–∞ - –Ω—ñ.
                caption_media = types.InputMediaPhoto(media[0].media, caption=message_text, parse_mode='Markdown')
                other_media = [types.InputMediaPhoto(m.media) for m in media[1:]]
                sent_messages = bot.send_media_group(CHANNEL_ID, [caption_media] + other_media)
                if sent_messages:
                    sent_message = sent_messages[0]
            else:
                sent_message = bot.send_message(CHANNEL_ID, message_text, parse_mode='Markdown')

            if sent_message:
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª_–º–µ—Å–µ–¥–∂_—ñ–¥, –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ–π —Ç–∞ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
                cur.execute(pg_sql.SQL("""
                    UPDATE products SET 
                        channel_message_id = %s, 
                        republish_count = republish_count + 1, 
                        last_republish_date = CURRENT_DATE, 
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s;
                """), (sent_message.message_id, product_id))
                conn.commit()
                bot.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä ID `{product_id}` —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!", chat_id, message_id_to_edit, parse_mode='Markdown')
                log_statistics('republish_product', chat_id, product_id)
            else:
                bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É –≤ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É {product_id} –≤ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
            bot.send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É. –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
            conn.rollback() # –í—ñ–¥–∫–∞—Ç –∑–º—ñ–Ω —É –ë–î, —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –Ω–µ –≤–¥–∞–ª–∞—Å—è
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É.")
    finally:
        if conn:
            conn.close()

# --- 16. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è "–û–±—Ä–∞–Ω–∏—Ö" —Ç–æ–≤–∞—Ä—ñ–≤ ---
@error_handler
def toggle_favorite_product(user_chat_id, product_id, message_id, is_from_channel):
    """
    –î–æ–¥–∞—î/–≤–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –∑ –æ–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤ –≤ –∫–∞–Ω–∞–ª—ñ.
    """
    conn = get_db_connection()
    if not conn:
        bot.answer_callback_query(message_id, "–ü–æ–º–∏–ª–∫–∞ –ë–î.")
        return

    try:
        cur = conn.cursor()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ –≤ –æ–±—Ä–∞–Ω–∏—Ö
        cur.execute(pg_sql.SQL("SELECT id FROM favorites WHERE user_chat_id = %s AND product_id = %s;"),
                       (user_chat_id, product_id))
        is_favorite = cur.fetchone()

        if is_favorite:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö
            cur.execute(pg_sql.SQL("DELETE FROM favorites WHERE user_chat_id = %s AND product_id = %s;"),
                           (user_chat_id, product_id))
            action_text = "üíî –í–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ"
            # –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤
            cur.execute(pg_sql.SQL("UPDATE products SET likes_count = GREATEST(0, likes_count - 1) WHERE id = %s RETURNING likes_count;"), (product_id,))
        else:
            # –î–æ–¥–∞—î–º–æ –≤ –æ–±—Ä–∞–Ω—ñ
            cur.execute(pg_sql.SQL("INSERT INTO favorites (user_chat_id, product_id) VALUES (%s, %s);"),
                           (user_chat_id, product_id))
            action_text = "‚ù§Ô∏è –î–æ–¥–∞–Ω–æ –≤ –æ–±—Ä–∞–Ω–µ"
            # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤
            cur.execute(pg_sql.SQL("UPDATE products SET likes_count = likes_count + 1 WHERE id = %s RETURNING likes_count;"), (product_id,))
        
        new_likes_count = cur.fetchone()['likes_count']
        conn.commit()

        bot.answer_callback_query(message_id, action_text)
        log_statistics('toggle_favorite', user_chat_id, product_id, details=action_text)

        # –Ø–∫—â–æ –¥—ñ—è –ø—Ä–∏–π—à–ª–∞ –∑ –∫–∞–Ω–∞–ª—É, –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ
        if is_from_channel:
            product_data = get_product_by_id(product_id)
            if product_data and product_data['channel_message_id']:
                channel_message_id = product_data['channel_message_id']
                try:
                    # –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤
                    # –∞–±–æ –¥–æ–¥–∞—î–º–æ —Ä–µ–∞–∫—Ü—ñ—é
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –Ω–æ–≤–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
                    seller_chat_id = product_data['seller_chat_id']
                    seller_username = get_username_by_chat_id(seller_chat_id)
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    
                    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é"
                    seller_link = f"tg://user?id={seller_chat_id}"
                    contact_button_text = f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é"
                    markup.add(types.InlineKeyboardButton(contact_button_text, url=seller_link))
                    
                    # –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ" –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º
                    fav_emoji = "‚ù§Ô∏è" if is_favorite else "ü§ç"
                    markup.add(types.InlineKeyboardButton(f"{fav_emoji} –û–±—Ä–∞–Ω–µ ({new_likes_count})", callback_data=f"channel_fav_{product_id}"))

                    # –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –∑ —Ñ–æ—Ç–æ, —Ç—Ä–µ–±–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ caption, –∞ –Ω–µ text
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –∑ —Ñ–æ—Ç–æ
                    if product_data['photos']:
                        # –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π caption, –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞–∑–∞–¥
                        # –¶–µ —Å–∫–ª–∞–¥–Ω—ñ—à–µ, –æ—Å–∫—ñ–ª—å–∫–∏ Telebot –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ caption –∑ –æ–±'—î–∫—Ç–∞ Message_id
                        # –ü—Ä–æ—Å—Ç—ñ—à–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –Ω–æ–≤–∏–º –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º.
                        bot.edit_message_reply_markup(CHANNEL_ID, channel_message_id, reply_markup=markup)
                    else:
                        # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç
                        # –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–º
                        # –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
                        bot.edit_message_reply_markup(CHANNEL_ID, channel_message_id, reply_markup=markup)

                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ {channel_message_id} –¥–ª—è —Ç–æ–≤–∞—Ä—É {product_id}: {e}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_chat_id}, —Ç–æ–≤–∞—Ä—É {product_id}: {e}", exc_info=True)
        conn.rollback()
        bot.answer_callback_query(message_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–±—Ä–∞–Ω–æ–≥–æ.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_favorites(message, offset=0):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.
    """
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        cur = conn.cursor()
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cur.execute(pg_sql.SQL("SELECT COUNT(f.product_id) FROM favorites f JOIN products p ON f.product_id = p.id WHERE f.user_chat_id = %s AND p.status = 'approved';"), (chat_id,))
        total_favorites = cur.fetchone()[0]

        if total_favorites == 0:
            bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤. –î–æ–¥–∞–π—Ç–µ —â–æ—Å—å, —â–æ–± —Ç—É—Ç –±—É–ª–æ —Ü—ñ–∫–∞–≤–æ! ‚ù§Ô∏è", reply_markup=main_menu_markup)
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        cur.execute(pg_sql.SQL("""
            SELECT p.id, p.product_name, p.price, p.seller_chat_id, p.seller_username, p.photos, p.description, p.likes_count
            FROM favorites f
            JOIN products p ON f.product_id = p.id
            WHERE f.user_chat_id = %s AND p.status = 'approved'
            ORDER BY f.id DESC -- –ó–∞ –ø–æ—Ä—è–¥–∫–æ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –æ–±—Ä–∞–Ω–µ
            LIMIT %s OFFSET %s;
        """), (chat_id, PRODUCT_PAGE_SIZE, offset))
        favorite_products = cur.fetchall()

        fav_text = "‚≠ê *–í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:*\n\n"
        for prod in favorite_products:
            photos = json.loads(prod['photos']) if prod['photos'] else []
            seller_username = prod['seller_username'] if prod['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

            fav_text += (
                f"‚ú® *{prod['product_name']}* (ID: `{prod['id']}`)\n"
                f"   –¶—ñ–Ω–∞: `{prod['price']}`\n"
                f"   –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={prod['seller_chat_id']})\n"
                f"   ‚ù§Ô∏è: {prod['likes_count']} | üì∏: {len(photos)} —à—Ç.\n\n"
            )
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            product_markup = types.InlineKeyboardMarkup(row_width=2)
            product_markup.add(
                types.InlineKeyboardButton("üëÅÔ∏è –î–µ—Ç–∞–ª—ñ", callback_data=f"view_fav_product_{prod['id']}"),
                types.InlineKeyboardButton("üíî –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ", callback_data=f"toggle_favorite_{prod['id']}")
            )
            bot.send_message(chat_id, fav_text, parse_mode='Markdown', reply_markup=product_markup)
            fav_text = "" # –û—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        pagination_markup = types.InlineKeyboardMarkup(row_width=2)
        if offset > 0:
            pagination_markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ", callback_data=f"prev_fav_product_{max(0, offset - PRODUCT_PAGE_SIZE)}"))
        if offset + PRODUCT_PAGE_SIZE < total_favorites:
            pagination_markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω—ñ ‚û°Ô∏è", callback_data=f"next_fav_product_{offset + PRODUCT_PAGE_SIZE}"))
        
        if pagination_markup.keyboard:
            bot.send_message(chat_id, f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {offset // PRODUCT_PAGE_SIZE + 1} –∑ {(total_favorites + PRODUCT_PAGE_SIZE - 1) // PRODUCT_PAGE_SIZE}", reply_markup=pagination_markup)

        log_statistics('view_favorites', chat_id, details=f"offset: {offset}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_details_to_user(chat_id, product_id, message_id_to_edit=None, is_favorite_view=False):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É (–¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö –∞–±–æ –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É).
    """
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")
        return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, status,
                   views, likes_count, created_at, updated_at, shipping_options, hashtags
            FROM products WHERE id = %s AND status = 'approved';
        """), (product_id,))
        product = cur.fetchone()

        if not product:
            bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –≤–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. üòü")
            return

        photos = json.loads(product['photos']) if product['photos'] else []
        geolocation = json.loads(product['geolocation']) if product['geolocation'] else None
        shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        hashtags = product['hashtags'] if product['hashtags'] else "–ù–µ–º–∞—î"
        seller_username = product['seller_username'] if product['seller_username'] else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"

        details_text = (
            f"üì¶ *–î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É (ID: {product['id']})*\n\n"
            f"üìù *–ù–∞–∑–≤–∞*: {product['product_name']}\n"
            f"üí∞ *–¶—ñ–Ω–∞*: {product['price']}\n"
            f"üìÑ *–û–ø–∏—Å*: {product['description']}\n"
            f"üì∏ *–§–æ—Ç–æ*: {len(photos)} —à—Ç.\n"
            f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
            f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞*: {shipping_options_text}\n"
            f"üè∑Ô∏è *–•–µ—à—Ç–µ–≥–∏*: {hashtags}\n"
            f"üëÅÔ∏è *–ü–µ—Ä–µ–≥–ª—è–¥–∏*: {product['views']}\n"
            f"‚ù§Ô∏è *–õ–∞–π–∫–∏*: {product['likes_count']}\n"
            f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å*: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={product['seller_chat_id']})"
        )

        markup = types.InlineKeyboardMarkup(row_width=1)
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é"
        seller_link = f"tg://user?id={product['seller_chat_id']}"
        markup.add(types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é", url=seller_link))

        # –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ"
        cur.execute(pg_sql.SQL("SELECT id FROM favorites WHERE user_chat_id = %s AND product_id = %s;"),
                       (chat_id, product_id))
        is_user_favorite = cur.fetchone()
        fav_button_text = "üíî –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ" if is_user_favorite else "‚ù§Ô∏è –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ"
        markup.add(types.InlineKeyboardButton(fav_button_text, callback_data=f"toggle_favorite_{product['id']}"))
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑ "–û–±—Ä–∞–Ω–∏—Ö"
        if is_favorite_view:
            markup.add(types.InlineKeyboardButton("üîô –î–æ –æ–±—Ä–∞–Ω–∏—Ö", callback_data="my_favorites_back"))

        if photos:
            media = [types.InputMediaPhoto(photo_id, caption=details_text if i == 0 else None, parse_mode='Markdown') for i, photo_id in enumerate(photos)]
            
            if message_id_to_edit:
                bot.send_media_group(chat_id, media)
                bot.send_message(chat_id, "üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É (—Ñ–æ—Ç–æ –≤–∏—â–µ)", reply_markup=markup, parse_mode='Markdown')
            else:
                bot.send_media_group(chat_id, media)
                bot.send_message(chat_id, "üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É (—Ñ–æ—Ç–æ –≤–∏—â–µ)", reply_markup=markup, parse_mode='Markdown')
        else:
            if message_id_to_edit:
                bot.edit_message_text(details_text, chat_id, message_id_to_edit, reply_markup=markup, parse_mode='Markdown')
            else:
                bot.send_message(chat_id, details_text, reply_markup=markup, parse_mode='Markdown')

        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
        cur.execute(pg_sql.SQL("UPDATE products SET views = views + 1 WHERE id = %s;"), (product_id,))
        conn.commit()
        log_statistics('view_product_details_user', chat_id, product_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É {product_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}", exc_info=True)
        bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É.")
    finally:
        if conn:
            conn.close()

# --- 17. –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def send_help_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –¥–æ–≤—ñ–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    help_text = (
        "‚ùì *–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ FAQ*\n\n"
        "–Ø - SellerBot, –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤ —Ç–∞ –ø–æ–∫—É–ø–æ–∫! "
        "–û—Å—å —â–æ —è –≤–º—ñ—é:\n\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä*: –ü–æ–∫—Ä–æ–∫–æ–≤–æ –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏*: –ü–µ—Ä–µ–≥–ª—è–¥, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–Ω–∏—Ö —Ç–∞ –ø–µ—Ä–µ–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤–∞—à–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.\n"
        "‚≠ê *–û–±—Ä–∞–Ω—ñ*: –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –≤–∞–º —Å–ø–æ–¥–æ–±–∞–ª–∏—Å—å, –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª*: –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏.\n"
        "ü§ñ *AI –ü–æ–º—ñ—á–Ω–∏–∫*: –ü–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –∑—ñ –º–Ω–æ—é, —è –≤—ñ–¥–ø–æ–≤—ñ–º –Ω–∞ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –±–æ—Ç–∞, "
        "–¥–æ–ø–æ–º–æ–∂—É —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä—é –ø—Ä–æ –Ω–æ–≤—ñ—Ç–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó! "
        "(–Ø –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ üòâ).\n\n"
        "*–Ø–∫ –ø—Ä–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä?*\n"
        "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä' —Ç–∞ —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º.\n"
        "2. –ü—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤–∞—à —Ç–æ–≤–∞—Ä –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ.\n"
        "3. –ó –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø–æ–∫—É–ø—Ü—ñ.\n"
        "4. –ü—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É –ø–æ–∑–Ω–∞—á—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–∏–π' —É —Ä–æ–∑–¥—ñ–ª—ñ '–ú–æ—ó —Ç–æ–≤–∞—Ä–∏'.\n\n"
        "*–Ø–∫ –∫—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä?*\n"
        "1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞—à–æ–≥–æ [–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É](https://t.me/your_channel_link) (–∫–Ω–æ–ø–∫–∞ 'üì∫ –ù–∞—à –∫–∞–Ω–∞–ª').\n"
        "2. –ó–Ω–∞–π–¥—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.\n"
        "3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é', —â–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∏–º –Ω–∞–ø—Ä—è–º—É.\n\n"
        "*–Ñ –ø–∏—Ç–∞–Ω–Ω—è?*\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å 'ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫–æ–º'!"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu_markup)
    log_statistics('help_message', message.chat.id)

@error_handler
def send_channel_link(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª."""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É", url="https://t.me/your_channel_link")) # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    bot.send_message(message.chat.id, "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏:*\n–¢—É—Ç –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤—Å—ñ —Å—Ö–≤–∞–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏!", reply_markup=markup, parse_mode='Markdown')
    log_statistics('channel_link', message.chat.id)

def format_product_message(product, product_id=None, seller_chat_id=None, add_sold_tag=False):
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª –∞–±–æ –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–≤'—é.
    –í–∫–ª—é—á–∞—î —Ñ–æ—Ç–æ, –¥–µ—Ç–∞–ª—ñ, –∫–Ω–æ–ø–∫–∏ –∑–≤'—è–∑–∫—É —Ç–∞ –æ–±—Ä–∞–Ω–æ–≥–æ.
    """
    if product_id is None:
        product_id = product['id']
    if seller_chat_id is None:
        seller_chat_id = product['seller_chat_id']

    photos = json.loads(product['photos']) if product['photos'] else []
    geolocation = json.loads(product['geolocation']) if product['geolocation'] else None
    shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    hashtags = product['hashtags'] if product['hashtags'] else ""
    seller_username = product['seller_username'] if product['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    sold_tag = ""
    if add_sold_tag:
        sold_tag = "‚ùå *–ü–†–û–î–ê–ù–û* ‚ùå\n\n"

    message_text = (
        f"{sold_tag}‚ú® *{product['product_name']}*\n\n"
        f"üí∞ *–¶—ñ–Ω–∞*: {product['price']}\n"
        f"üìÑ *–û–ø–∏—Å*: {product['description']}\n"
        f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
        f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞*: {shipping_options_text}\n"
        f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å*: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})\n"
        f"üè∑Ô∏è {hashtags}\n\n"
        f"ID: `{product_id}`"
    )

    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é"
    seller_link = f"tg://user?id={seller_chat_id}"
    contact_button_text = f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é"
    markup.add(types.InlineKeyboardButton(contact_button_text, url=seller_link))
    
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ" –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º
    fav_emoji = "ü§ç" # –ó–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –±—ñ–ª–æ–≥–æ —Å–µ—Ä—Ü—è –¥–ª—è –∫–∞–Ω–∞–ª—É
    markup.add(types.InlineKeyboardButton(f"{fav_emoji} –û–±—Ä–∞–Ω–µ ({product['likes_count']})", callback_data=f"channel_fav_{product_id}"))

    media = []
    if photos:
        for photo_id in photos:
            media.append(types.InputMediaPhoto(photo_id))
    
    return message_text, media, markup

def get_product_by_id(product_id):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É –∑–∞ ID –∑ –ë–î."""
    conn = get_db_connection()
    if not conn: return None
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, 
                   status, commission_amount, views, likes_count, created_at, updated_at, shipping_options, 
                   hashtags, channel_message_id, last_republish_date, republish_count
            FROM products WHERE id = %s;
        """), (product_id,))
        return cur.fetchone()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑–∞ ID {product_id}: {e}", exc_info=True)
        return None
    finally:
        if conn:
            conn.close()

def get_username_by_chat_id(chat_id):
    """–û—Ç—Ä–∏–º—É—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ chat_id."""
    conn = get_db_connection()
    if not conn: return "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL("SELECT username FROM users WHERE chat_id = %s;"), (chat_id,))
        result = cur.fetchone()
        return result['username'] if result and result['username'] else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è username –¥–ª—è {chat_id}: {e}", exc_info=True)
        return "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    finally:
        if conn:
            conn.close()

# --- –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è) ---
@error_handler
def send_pending_products_for_moderation(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT id, seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, created_at
            FROM products
            WHERE status = 'pending'
            ORDER BY created_at ASC;
        """))
        pending_products = cur.fetchall()

        if not pending_products:
            bot.edit_message_text("‚úÖ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
            return

        for product in pending_products:
            product_id = product['id']
            seller_chat_id = product['seller_chat_id']
            seller_username = product['seller_username'] if product['seller_username'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            photos = json.loads(product['photos']) if product['photos'] else []
            geolocation = json.loads(product['geolocation']) if product['geolocation'] else None
            shipping_options_text = ", ".join(json.loads(product['shipping_options'])) if product['shipping_options'] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"


            review_text = (
                f"üì¶ *–¢–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é* (ID: {product_id})\n\n"
                f"üìù –ù–∞–∑–≤–∞: {product['product_name']}\n"
                f"üí∞ –¶—ñ–Ω–∞: {product['price']}\n"
                f"üìÑ –û–ø–∏—Å: {product['description'][:500]}...\n"
                f"üì∏ –§–æ—Ç–æ: {len(photos)} —à—Ç.\n"
                f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if geolocation else '–ù—ñ'}\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {shipping_options_text}\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{'@' + seller_username if seller_username != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={seller_chat_id})"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
                types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
            )
            markup.add(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
                types.InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ", callback_data=f"mod_rotate_photo_{product_id}")
            )

            try:
                if photos:
                    media = [types.InputMediaPhoto(photo_id, caption=review_text if i == 0 else None, parse_mode='Markdown') 
                             for i, photo_id in enumerate(photos)]
                    sent_messages = bot.send_media_group(call.message.chat.id, media)
                    if sent_messages:
                        bot.send_message(call.message.chat.id, 
                                         f"üëÜ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É ID: {product_id} (—Ñ–æ—Ç–æ –≤–∏—â–µ)", 
                                         reply_markup=markup, 
                                         parse_mode='Markdown',
                                         reply_to_message_id=sent_messages[0].message_id)
                else:
                    bot.send_message(call.message.chat.id, review_text, parse_mode='Markdown', reply_markup=markup)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É {product_id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—É: {e}", exc_info=True)
                bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID {product_id}.")
        
        bot.send_message(call.message.chat.id, "--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó ---", reply_markup=admin_panel_markup())

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_pending_products_for_moderation: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_users_list_admin(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT chat_id, username, first_name, last_name, is_blocked, joined_at, last_activity, referrer_id
            FROM users ORDER BY joined_at DESC;
        """))
        users = cur.fetchall()

        if not users:
            bot.edit_message_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
            return

        response_text = "üë• *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n\n"
        for user in users:
            username_display = f"@{user['username']}" if user['username'] else "–ù/–î"
            blocked_status = "üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ" if user['is_blocked'] else "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            response_text += (
                f"‚ñ™Ô∏è ID: `{user['chat_id']}`\n"
                f"   –Ü–º'—è: {user['first_name']} {user['last_name'] or ''} ({username_display})\n"
                f"   –°—Ç–∞—Ç—É—Å: {blocked_status}\n"
                f"   –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {user['joined_at'].strftime('%Y-%m-%d %H:%M')}\n"
                f"   –û—Å—Ç. –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['last_activity'].strftime('%Y-%m-%d %H:%M')}\n"
                f"   –†–µ—Ñ–µ—Ä–µ—Ä: {user['referrer_id'] or '–ù–µ–º–∞—î'}\n\n"
            )
        
        if len(response_text) > 4096:
            response_text = response_text[:4000] + "...\n\n(–ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥—É–∂–µ –¥–æ–≤–≥–∏–π, –¥–∏–≤—ñ—Ç—å—Å—è –ª–æ–≥–∏ –∞–±–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ)"

        bot.edit_message_text(response_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=admin_panel_markup())
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_users_list_admin: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_block_unblock_menu(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–µ–Ω—é –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT chat_id, username, first_name, last_name, is_blocked
            FROM users ORDER BY is_blocked DESC, joined_at DESC;
        """))
        users = cur.fetchall()

        if not users:
            bot.edit_message_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for user in users:
            status_text = "üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not user['is_blocked'] else "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏"
            button_data = f"block_user_{user['chat_id']}" if not user['is_blocked'] else f"unblock_user_{user['chat_id']}"
            username_display = f"@{user['username']}" if user['username'] else f"ID: {user['chat_id']}"
            markup.add(types.InlineKeyboardButton(f"{status_text} {user['first_name']} {user['last_name'] or ''} ({username_display})", callback_data=button_data))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text("üë• *–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è)*\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", 
                              call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_block_unblock_menu: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é –±–ª–æ–∫—É–≤–∞–Ω–Ω—è.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_commission_report(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–≤—ñ—Ç –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—ó."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                p.id AS product_id,
                p.product_name,
                p.seller_chat_id,
                u.username AS seller_username,
                p.price,
                p.commission_amount,
                p.status AS product_status,
                ct.status AS transaction_status,
                ct.created_at AS transaction_date,
                ct.paid_at AS paid_date
            FROM products p
            LEFT JOIN commission_transactions ct ON p.id = ct.product_id
            LEFT JOIN users u ON p.seller_chat_id = u.chat_id
            WHERE p.status = 'sold' AND (ct.status IS NULL OR ct.status = 'pending_payment')
            ORDER BY ct.created_at ASC;
        """))
        pending_commissions = cur.fetchall()

        total_due = 0.0
        report_text = "üí∞ *–ó–≤—ñ—Ç –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö (–æ—á—ñ–∫—É—é—Ç—å—Å—è –¥–æ —Å–ø–ª–∞—Ç–∏):*\n\n"
        if not pending_commissions:
            report_text += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∫–æ–º—ñ—Å—ñ–π –¥–æ —Å–ø–ª–∞—Ç–∏."
        else:
            for item in pending_commissions:
                commission = item['commission_amount'] if item['commission_amount'] is not None else 0.0
                total_due += commission
                seller_username_display = f"@{item['seller_username']}" if item['seller_username'] else f"ID: {item['seller_chat_id']}"
                report_text += (
                    f"‚ñ™Ô∏è –¢–æ–≤–∞—Ä ID `{item['product_id']}`: *{item['product_name'][:50]}*\n"
                    f"   –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{seller_username_display}](tg://user?id={item['seller_chat_id']})\n"
                    f"   –¶—ñ–Ω–∞: {item['price']}\n"
                    f"   –ö–æ–º—ñ—Å—ñ—è: `{commission:.2f}`\n"
                    f"   –°—Ç–∞—Ç—É—Å (—Ç–æ–≤–∞—Ä): `{item['product_status']}`\n"
                    f"   –°—Ç–∞—Ç—É—Å (—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è): `{item['transaction_status'] or '–Ω–µ–º–∞—î'}`\n"
                    f"   –î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É: {item['transaction_date'].strftime('%Y-%m-%d') if item['transaction_date'] else '–ù/–î'}\n\n"
                )
            report_text += f"\n*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {total_due:.2f} UAH*\n\n"
            report_text += f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ Monobank –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤: `{MONOBANK_CARD_NUMBER}`"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text(report_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_commission_report: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –ø–æ –∫–æ–º—ñ—Å—ñ—è—Ö.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_ai_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –ø–æ–º—ñ—á–Ω–∏–∫–∞."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                COUNT(*) AS total_messages,
                COUNT(DISTINCT user_chat_id) AS unique_users,
                (SELECT COUNT(*) FROM conversations WHERE sender_type = 'user') AS user_messages,
                (SELECT COUNT(*) FROM conversations WHERE sender_type = 'ai') AS ai_messages
            FROM conversations;
        """))
        stats = cur.fetchone()

        report_text = "ü§ñ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –ü–æ–º—ñ—á–Ω–∏–∫–∞:*\n\n"
        if stats:
            report_text += f"‚ñ™Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: `{stats['total_messages']}`\n"
            report_text += f"‚ñ™Ô∏è –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: `{stats['unique_users']}`\n"
            report_text += f"‚ñ™Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: `{stats['user_messages']}`\n"
            report_text += f"‚ñ™Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ AI: `{stats['ai_messages']}`\n"
        else:
            report_text += "–î–∞–Ω—ñ –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –≤—ñ–¥—Å—É—Ç–Ω—ñ."

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text(report_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_ai_statistics: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

@error_handler
def send_referral_statistics(call):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤."""
    conn = get_db_connection()
    if not conn:
        bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–º–∏–ª–∫–∞ –ë–î).", call.message.chat.id, call.message.message_id)
        return
    cur = conn.cursor()
    try:
        cur.execute(pg_sql.SQL("""
            SELECT 
                referrer_id, 
                COUNT(chat_id) AS referred_count,
                MAX(r.username) AS referrer_username,
                MAX(r.first_name) AS referrer_first_name,
                MAX(r.last_name) AS referrer_last_name
            FROM users r
            JOIN users u ON r.chat_id = u.referrer_id
            WHERE r.referrer_id IS NOT NULL OR u.referrer_id IS NOT NULL -- –î–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —â–µ –Ω–µ –≤ —Ç–∞–±–ª–∏—Ü—ñ users
            GROUP BY referrer_id
            ORDER BY referred_count DESC;
        """))
        referrals = cur.fetchall()

        report_text = "üèÜ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        if not referrals:
            report_text += "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö."
        else:
            for ref in referrals:
                referrer_username_display = f"@{ref['referrer_username']}" if ref['referrer_username'] else "–ù/–î"
                report_text += (
                    f"‚ñ™Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä ID: `{ref['referrer_id']}`\n"
                    f"   –Ü–º'—è: {ref['referrer_first_name']} {ref['referrer_last_name'] or ''} ({referrer_username_display})\n"
                    f"   –ó–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: `{ref['referred_count']}`\n\n"
                )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_back"))
        bot.edit_message_text(report_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_referral_statistics: {e}", exc_info=True)
        bot.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", call.message.chat.id, call.message.message_id, reply_markup=admin_panel_markup())
    finally:
        if conn:
            conn.close()

# --- 16. –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---
if __name__ == '__main__':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    init_db()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render
    try:
        bot.remove_webhook() # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫, —è–∫—â–æ —î
        time.sleep(0.1) # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ, —â–æ –≤–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ
        bot.set_webhook(url=WEBHOOK_URL + TOKEN)
        logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {WEBHOOK_URL + TOKEN}")
    except Exception as e:
        logger.critical(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        exit(1) # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –≤–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–≤—Å—è

    # –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ Flask
    @app.route(f'/{TOKEN}', methods=['POST'])
    def webhook_handler():
        """
        –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—ñ–≤, —â–æ –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤—ñ–¥ Telegram API.
        –ü–∞—Ä—Å–∏—Ç—å JSON-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–¥–∞—î —ó—Ö telebot –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
        """
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update]) # –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
            return '!', 200 # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 OK Telegram—É
        else:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Content-Type (application/json).")
            return 'Content-Type must be application/json', 403 # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask-–¥–æ–¥–∞—Ç–æ–∫.
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ PORT.
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
    logger.info(f"Flask-–¥–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

