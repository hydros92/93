import os
import telebot
from telebot import types
import logging
from datetime import datetime, timedelta, timezone
import re
import json
import requests
from dotenv import load_dotenv
import random

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è Webhook (Flask)
from flask import Flask, request

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è PostgreSQL
import psycopg2
from psycopg2 import sql as pg_sql
from psycopg2 import extras

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env. –¶–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏.
load_dotenv()

# --- 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ë–æ—Ç–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ---
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '0'))
MONOBANK_CARD_NUMBER = os.getenv('MONOBANK_CARD_NUMBER', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_API_URL = os.getenv('GEMINI_API_URL', "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent")
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DATABASE_URL = os.getenv('DATABASE_URL')

# --- 2. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- 3. –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö ---
def validate_env_vars():
    missing_vars = []
    if not TOKEN: missing_vars.append('TELEGRAM_BOT_TOKEN')
    if not WEBHOOK_URL: missing_vars.append('WEBHOOK_URL')
    if not DATABASE_URL: missing_vars.append('DATABASE_URL')
    if ADMIN_CHAT_ID == 0: missing_vars.append('ADMIN_CHAT_ID')
    if CHANNEL_ID == 0: missing_vars.append('CHANNEL_ID')

    if missing_vars:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è: {', '.join(missing_vars)}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        exit(1)

validate_env_vars()

# --- 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TeleBot —Ç–∞ Flask ---
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# --- 5. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ ---
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            chat_id_to_notify = ADMIN_CHAT_ID
            if args:
                first_arg = args[0]
                if isinstance(first_arg, (types.Message, types.CallbackQuery)):
                    chat_id_to_notify = first_arg.message.chat.id if isinstance(first_arg, types.CallbackQuery) else first_arg.chat.id
            try:
                bot.send_message(ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ!\n–§—É–Ω–∫—Ü—ñ—è: `{func.__name__}`\n–ü–æ–º–∏–ª–∫–∞: `{e}`")
                if chat_id_to_notify != ADMIN_CHAT_ID:
                    bot.send_message(chat_id_to_notify, "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π.")
            except Exception as e_notify:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e_notify}")
    return wrapper

# --- 6. –†–æ–±–æ—Ç–∞ –∑ –ë–∞–∑–æ—é –î–∞–Ω–∏—Ö (PostgreSQL) ---
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL, cursor_factory=psycopg2.extras.DictCursor)
        return conn
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        return None

@error_handler
def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –º—ñ–≥—Ä—É—î —Å—Ö–µ–º—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    conn = get_db_connection()
    if not conn:
        logger.critical("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –ë–î –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")
        exit(1)
    
    try:
        with conn.cursor() as cur:
            # –¢–∞–±–ª–∏—Ü—è users
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    chat_id BIGINT PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT,
                    is_blocked BOOLEAN DEFAULT FALSE, blocked_by BIGINT, blocked_at TIMESTAMPTZ,
                    commission_paid REAL DEFAULT 0, commission_due REAL DEFAULT 0,
                    last_activity TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                    joined_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                    referrer_id BIGINT
                );
            """)
            
            # –¢–∞–±–ª–∏—Ü—è products
            cur.execute("""
                CREATE TABLE IF NOT EXISTS products (
                    id SERIAL PRIMARY KEY, seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id),
                    seller_username TEXT, product_name TEXT NOT NULL, price TEXT NOT NULL,
                    description TEXT NOT NULL, photos TEXT, geolocation TEXT,
                    status TEXT DEFAULT 'pending', -- pending, approved, rejected, sold, expired
                    commission_rate REAL DEFAULT 0.10, commission_amount REAL DEFAULT 0,
                    moderator_id BIGINT, moderated_at TIMESTAMPTZ,
                    admin_message_id BIGINT, channel_message_id BIGINT,
                    views INTEGER DEFAULT 0, likes_count INTEGER DEFAULT 0,
                    republish_count INTEGER DEFAULT 0, last_republish_date DATE,
                    shipping_options TEXT, -- JSON array of strings, e.g., ["–ù–∞–ª–æ–∂–∫–∞ –ù–ü", "–ù–∞–ª–æ–∂–∫–∞ –£–ü"]
                    hashtags TEXT,
                    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # –¢–∞–±–ª–∏—Ü—è favorites
            cur.execute("""
                CREATE TABLE IF NOT EXISTS favorites (
                    id SERIAL PRIMARY KEY,
                    user_chat_id BIGINT NOT NULL REFERENCES users(chat_id),
                    product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                    UNIQUE(user_chat_id, product_id)
                );
            """)
            
            # –Ü–Ω—à—ñ —Ç–∞–±–ª–∏—Ü—ñ
            for table_sql in [
                "CREATE TABLE IF NOT EXISTS conversations (id SERIAL PRIMARY KEY, user_chat_id BIGINT NOT NULL REFERENCES users(chat_id), product_id INTEGER, message_text TEXT, sender_type TEXT, timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP);",
                "CREATE TABLE IF NOT EXISTS commission_transactions (id SERIAL PRIMARY KEY, product_id INTEGER NOT NULL REFERENCES products(id), seller_chat_id BIGINT NOT NULL REFERENCES users(chat_id), amount REAL NOT NULL, status TEXT DEFAULT 'pending_payment', payment_details TEXT, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP, paid_at TIMESTAMPTZ);",
                "CREATE TABLE IF NOT EXISTS statistics (id SERIAL PRIMARY KEY, action TEXT NOT NULL, user_id BIGINT, product_id INTEGER, details TEXT, timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP);"
            ]:
                cur.execute(table_sql)
            
            # --- –ú—ñ–≥—Ä–∞—Ü—ñ—ó —Å—Ö–µ–º–∏ ---
            migrations = {
                'products': [
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS republish_count INTEGER DEFAULT 0;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS last_republish_date DATE;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS shipping_options TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS hashtags TEXT;",
                    "ALTER TABLE products ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0;"
                ],
                'users': [
                    "ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_id BIGINT;"
                ]
            }
            for table, columns in migrations.items():
                for column_sql in columns:
                    try:
                        cur.execute(column_sql)
                        logger.info(f"–ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ '{table}' —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞: {column_sql}")
                    except psycopg2.Error as e:
                        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó '{column_sql}': {e}")
                        conn.rollback() # –í—ñ–¥–∫–∞—Ç —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
                    else:
                        conn.commit() # –ö–æ–º—ñ—Ç –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó —É—Å–ø—ñ—à–Ω–æ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó

            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}", exc_info=True)
        conn.rollback()
        exit(1)
    finally:
        if conn:
            conn.close()

# --- 7. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ ---
user_data = {} # –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É, –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ —Ç–æ—â–æ.

# --- 8. –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
@error_handler
def save_user(message, referrer_id=None):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∫–ª—é—á–∞—é—á–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞."""
    user = message.from_user
    chat_id = message.chat.id
    
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            cur.execute("SELECT chat_id, referrer_id FROM users WHERE chat_id = %s;", (chat_id,))
            existing_user = cur.fetchone()

            if existing_user:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cur.execute("""
                    UPDATE users SET username = %s, first_name = %s, last_name = %s, last_activity = CURRENT_TIMESTAMP
                    WHERE chat_id = %s;
                """, (user.username, user.first_name, user.last_name, chat_id))
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cur.execute("""
                    INSERT INTO users (chat_id, username, first_name, last_name, referrer_id)
                    VALUES (%s, %s, %s, %s, %s)
                    ON CONFLICT (chat_id) DO NOTHING;
                """, (chat_id, user.username, user.first_name, user.last_name, referrer_id))
            conn.commit()
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ. –†–µ—Ñ–µ—Ä–µ—Ä: {referrer_id if not existing_user else '–≤–∂–µ —ñ—Å–Ω—É—î'}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {chat_id}: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()

@error_handler
def is_user_blocked(chat_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
    conn = get_db_connection()
    if not conn: return True
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT is_blocked FROM users WHERE chat_id = %s;", (chat_id,))
            result = cur.fetchone()
            return result and result['is_blocked']
    finally:
        if conn:
            conn.close()

def generate_hashtags(description, num_hashtags=5):
    """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à—Ç–µ–≥–∏ –∑ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É."""
    # ... (–∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    words = re.findall(r'\b\w+\b', description.lower())
    stopwords = set([
        '—è', '–º–∏', '—Ç–∏', '–≤–∏', '–≤—ñ–Ω', '–≤–æ–Ω–∞', '–≤–æ–Ω–æ', '–≤–æ–Ω–∏', '—Ü–µ', '—â–æ',
        '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '–∞', '—ñ', '—Ç–∞', '–∞–±–æ', '—á–∏', '–¥–ª—è', '–∑', '–Ω–∞',
        '—É', '–≤', '–¥–æ', '–≤—ñ–¥', '–ø–æ', '–∑–∞', '–ø—Ä–∏', '–ø—Ä–æ', '–º—ñ–∂', '–ø—ñ–¥', '–Ω–∞–¥',
        '–±–µ–∑', '—á–µ—Ä–µ–∑', '–¥—É–∂–µ', '—Ü–µ–π', '—Ç–æ–π', '–º—ñ–π', '—Ç–≤—ñ–π', '–Ω–∞—à', '–≤–∞—à',
        '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–º—Å—è', '–ø—Ä–æ–¥–∞—Ç–∏', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–∂', '–∫—É–ø–∏—Ç–∏', '–∫—É–ø–ª—é',
        '–±—É', '–Ω–æ–≤–∏–π', '—Å—Ç–∞–Ω', '–º–æ–¥–µ–ª—å', '—Å–º', '–∫–≥', '–≥—Ä–Ω', 'uah', 'usd', 'eur', 
        '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å'
    ])
    filtered_words = [word for word in words if len(word) > 2 and word not in stopwords]
    unique_words = list(dict.fromkeys(filtered_words))
    hashtags = ['#' + word for word in unique_words[:num_hashtags]]
    return " ".join(hashtags)

def log_statistics(action, user_id=None, product_id=None, details=None):
    """–õ–æ–≥—É—î –¥—ñ—ó –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO statistics (action, user_id, product_id, details) VALUES (%s, %s, %s, %s)",
                (action, user_id, product_id, details)
            )
            conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()


# --- 9. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Gemini AI ---
# ... (–∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –±—É–ª–æ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –π–æ–≥–æ –∑–º—ñ–Ω—É)
@error_handler
def get_gemini_response(prompt, conversation_history=None):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini AI.
    –Ø–∫—â–æ API –∫–ª—é—á –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä—É—î –∑–∞–≥–ª—É—à–∫—É (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞).
    """
    if not GEMINI_API_KEY:
        logger.warning("Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return generate_elon_style_response(prompt)

    headers = {
        "Content-Type": "application/json"
    }

    # –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
    system_prompt = """–¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Telegram –±–æ—Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤. 
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞: –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º, —ñ–Ω–æ–¥—ñ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, 
    –∞–ª–µ –∑–∞–≤–∂–¥–∏ –∫–æ—Ä–∏—Å–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ. –ë—É–¥—å –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º.
    –î–æ–ø–æ–º–∞–≥–∞–π –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–¥–∞–∂—ñ, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏.
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."""

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è Gemini API
    # Gemini API –æ—á—ñ–∫—É—î —Ñ–æ—Ä–º–∞—Ç: [{"role": "user", "parts": [{"text": "..."}]}, {"role": "model", "parts": [{"text": "..."}]}]
    gemini_messages = [{"role": "user", "parts": [{"text": system_prompt}]}]
    
    if conversation_history:
        for msg in conversation_history:
            role = "user" if msg["sender_type"] == 'user' else "model" # Gemini API –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 'model' –¥–ª—è AI
            gemini_messages.append({"role": role, "parts": [{"text": msg["message_text"]}]})
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    gemini_messages.append({"role": "user", "parts": [{"text": prompt}]})

    payload = {
        "contents": gemini_messages
    }

    try:
        api_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}"

        response = requests.post(api_url, headers=headers, json=payload, timeout=30)
        response.raise_for_status() # –í–∏–∫–ª–∏—á–µ HTTPError –¥–ª—è 4xx/5xx –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø–æ–º–∏–ª–∫–∏ HTTP)
        
        data = response.json()
        if data.get("candidates") and len(data["candidates"]) > 0 and \
           data["candidates"][0].get("content") and data["candidates"][0]["content"].get("parts"):
            content = data["candidates"][0]["content"]["parts"][0]["text"]
            logger.info(f"Gemini –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {content[:100]}...") # –õ–æ–≥—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            return content.strip()
        else:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {data}")
            return generate_elon_style_response(prompt) # –ó–∞–≥–ª—É—à–∫–∞, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ HTTP –∑–∞–ø–∏—Ç—É –¥–æ Gemini API: {e}", exc_info=True)
        return generate_elon_style_response(prompt) # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –º–µ—Ä–µ–∂—ñ
    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini: {e}", exc_info=True)
        return generate_elon_style_response(prompt) # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π —ñ–Ω—à—ñ–π –ø–æ–º–∏–ª—Ü—ñ

def generate_elon_style_response(prompt):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ —Å—Ç–∏–ª—ñ –Ü–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ —è–∫ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
    –∞–±–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø–æ–º–∏–ª–∫–∏.
    """
    responses = [
        "üöÄ –ì–º, —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø–∫ —ñ –∑ SpaceX, —Ç—É—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "‚ö° –û—á–µ–≤–∏–¥–Ω–æ! –Ø–∫ –∫–∞–∂—É—Ç—å –≤ Tesla - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ü–µ –≤–µ—Ä—à–∏–Ω–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ. –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è.",
        "ü§ñ *–¥—É–º–∞—î —è–∫ Neuralink* –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤—É–≤–∞–ª–æ –º–æ—ó –Ω–µ–π—Ä–æ–Ω–∏! –û—Å—å —â–æ —è –¥—É–º–∞—é...",
        "üéØ –Ø–∫ —ñ –∑ X (–∫–æ–ª–∏—à–Ω—ñ–π Twitter), —ñ–Ω–æ–¥—ñ –∫—Ä–∞—â–µ –±—É—Ç–∏ –ø—Ä—è–º–æ–ª—ñ–Ω—ñ–π–Ω–∏–º. –°–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–µ?",
        "üî• –•–º–º, —Ü–µ –Ω–∞–≥–∞–¥—É—î –º–µ–Ω—ñ —á–∞—Å, –∫–æ–ª–∏ –º–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ Falcon Heavy. –°–∫–ª–∞–¥–Ω–æ, –∞–ª–µ –º–æ–∂–ª–∏–≤–æ!",
        "üí° –ê—Ö, –∫–ª–∞—Å–∏–∫–∞! –Ø–∫ —ñ –∑ Hyperloop - —Å–ø–æ—á–∞—Ç–∫—É –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–º–æ–∂–ª–∏–≤–∏–º, –ø–æ—Ç—ñ–º –æ—á–µ–≤–∏–¥–Ω–∏–º.",
        "üåü –¶—ñ–∫–∞–≤–æ! –£ Boring Company –º–∏ –± –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–æ–ø–∞–ª–∏ —Ç—É–Ω–µ–ª—å –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é. –ê —Ç—É—Ç...",
        "‚ö° –õ–æ–≥—ñ—á–Ω–æ! –Ø–∫ –∑–∞–≤–∂–¥–∏ –∫–∞–∂—É - —è–∫—â–æ —â–æ—Å—å –Ω–µ –≤–∏–±—É—Ö–∞—î, –∑–Ω–∞—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è üòÑ"
    ]
    
    import random
    base_response = random.choice(responses)
    
    # –î–æ–¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —É –∑–∞–ø–∏—Ç—ñ
    prompt_lower = prompt.lower()
    if any(word in prompt_lower for word in ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å', '–≥—Ä–æ—à—ñ']):
        return f"{base_response}\n\nüí∞ –©–æ–¥–æ —Ü—ñ–Ω–∏ - —è–∫ –≤ Tesla, –≤–∞–∂–ª–∏–≤–∞ —è–∫—ñ—Å—Ç—å, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å!"
    elif any(word in prompt_lower for word in ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è']):
        return f"{base_response}\n\nüì∏ –§–æ—Ç–æ - —Ü–µ —è–∫ –ø–µ—Ä—à–∏–π –µ—Ç–∞–ø —Ä–∞–∫–µ—Ç–∏, –±–µ–∑ –Ω–∏—Ö –Ω—ñ–∫—É–¥–∏!"
    elif any(word in prompt_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∞']):
        return f"{base_response}\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞? –Ø–∫–±–∏ —É –Ω–∞—Å –±—É–≤ Hyperloop, —Ü–µ –± –∑–∞–π–Ω—è–ª–æ —Ö–≤–∏–ª–∏–Ω–∏! üòâ"
    elif any(word in prompt_lower for word in ['–ø—Ä–æ–¥–∞–∂', '–∫—É–ø—ñ–≤–ª—è']):
        return f"{base_response}\n\nü§ù –ü—Ä–æ–¥–∞–∂ - —Ü–µ —è–∫ –∑–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç–∏: –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —É—Å–ø—ñ—Ö!"
    
    return base_response

@error_handler
def save_conversation(chat_id, message_text, sender_type, product_id=None):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ AI) –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤ —É –ë–î
    –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI.
    """
    conn = get_db_connection()
    if not conn: return
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            INSERT INTO conversations (user_chat_id, product_id, message_text, sender_type)
            VALUES (%s, %s, %s, %s)
        '''), (chat_id, product_id, message_text, sender_type))
        conn.commit()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

@error_handler
def get_conversation_history(chat_id, limit=5):
    """
    –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É AI.
    """
    conn = get_db_connection()
    if not conn: return []
    try:
        cur = conn.cursor()
        cur.execute(pg_sql.SQL('''
            SELECT message_text, sender_type FROM conversations 
            WHERE user_chat_id = %s 
            ORDER BY timestamp DESC LIMIT %s
        '''), (chat_id, limit))
        results = cur.fetchall()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, —â–æ–± –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–∏ –ø–µ—Ä—à–∏–º–∏
        history = [{"message_text": row['message_text'], "sender_type": row['sender_type']} 
                   for row in reversed(results)]
        
        return history
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤: {e}", exc_info=True)
        return []
    finally:
        if conn:
            conn.close()

# --- 10. –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
# –ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), types.KeyboardButton("üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏"))
# –ó–º—ñ–Ω–µ–Ω–æ: –î–æ–ø–æ–º–æ–≥–∞ -> –û–±—Ä–∞–Ω—ñ, –ö–æ–º—ñ—Å—ñ—è -> –î–æ–ø–æ–º–æ–≥–∞
main_menu_markup.add(types.KeyboardButton("‚≠ê –û–±—Ä–∞–Ω—ñ"), types.KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"))
main_menu_markup.add(types.KeyboardButton("üì∫ –ù–∞—à –∫–∞–Ω–∞–ª"), types.KeyboardButton("ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫"))

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è/–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
cancel_button = types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")

# --- 11. –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
@error_handler
def send_welcome(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –í—ñ—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ä–µ—î—Å—Ç—Ä—É—î —Ä–µ—Ñ–µ—Ä–∞–ª–∞."""
    chat_id = message.chat.id
    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return

    # –û–±—Ä–æ–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    referrer_id = None
    parts = message.text.split()
    if len(parts) > 1 and parts[0] == '/start':
        try:
            potential_referrer_id = int(parts[1])
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–≤–æ—ó–º –≤–ª–∞—Å–Ω–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
            if potential_referrer_id != chat_id:
                referrer_id = potential_referrer_id
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –ø—Ä–∏–π—à–æ–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –≤—ñ–¥ {referrer_id}")
        except (ValueError, IndexError):
            logger.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ —É /start: {parts[1]}")

    save_user(message, referrer_id)
    log_statistics('start', chat_id, details=f"referrer: {referrer_id}")

    welcome_text = (
        "üõçÔ∏è *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ SellerBot!*\n\n"
        "–Ø –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–∞ –∫—É–ø—ñ–≤–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–ú–µ–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø–æ—Ç—É–∂–Ω–∏–π AI! üöÄ\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ!"
    )
    bot.send_message(chat_id, welcome_text, reply_markup=main_menu_markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
@error_handler
def admin_panel(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin."""
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
        types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
        types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals")
    )
    bot.send_message(message.chat.id, "üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=markup, parse_mode='Markdown')

# --- 12. –ü–æ—Ç—ñ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
ADD_PRODUCT_STEPS = {
    1: {'name': 'waiting_name', 'prompt': "üìù *–ö—Ä–æ–∫ 1/6: –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É:", 'next_step': 2, 'prev_step': None},
    2: {'name': 'waiting_price', 'prompt': "üí∞ *–ö—Ä–æ–∫ 2/6: –¶—ñ–Ω–∞*\n\n–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `500 –≥—Ä–Ω` –∞–±–æ `–î–æ–≥–æ–≤—ñ—Ä–Ω–∞`):", 'next_step': 3, 'prev_step': 1},
    3: {'name': 'waiting_photos', 'prompt': "üì∏ *–ö—Ä–æ–∫ 3/6: –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'.", 'next_step': 4, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ', 'prev_step': 2},
    4: {'name': 'waiting_location', 'prompt': "üìç *–ö—Ä–æ–∫ 4/6: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è*\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å –∫—Ä–æ–∫.", 'next_step': 5, 'allow_skip': True, 'skip_button': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é', 'prev_step': 3},
    # –ù–æ–≤–∏–π –∫—Ä–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    5: {'name': 'waiting_shipping', 'prompt': "üöö *–ö—Ä–æ–∫ 5/6: –î–æ—Å—Ç–∞–≤–∫–∞*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:", 'next_step': 6, 'prev_step': 4},
    6: {'name': 'waiting_description', 'prompt': "‚úçÔ∏è *–ö—Ä–æ–∫ 6/6: –û–ø–∏—Å*\n\n–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:", 'next_step': 'confirm', 'prev_step': 5}
}

@error_handler
def start_add_product_flow(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    user_data[chat_id] = {
        'flow': 'add_product',
        'step_number': 1, 
        'data': {'photos': [], 'geolocation': None, 'shipping_options': []}
    }
    send_product_step_message(chat_id)
    log_statistics('start_add_product', chat_id)

@error_handler
def send_product_step_message(chat_id):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        return

    current_step_number = user_data[chat_id]['step_number']
    step_config = ADD_PRODUCT_STEPS[current_step_number]
    user_data[chat_id]['step'] = step_config['name']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    
    if step_config['name'] == 'waiting_photos':
        markup.add(types.KeyboardButton("–î–∞–ª—ñ"))
    elif step_config['name'] == 'waiting_location':
        markup.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
    
    if step_config.get('allow_skip'):
        markup.add(types.KeyboardButton(step_config['skip_button']))
        
    if step_config['name'] == 'waiting_shipping':
        # –î–ª—è –∫—Ä–æ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        inline_markup = types.InlineKeyboardMarkup(row_width=2)
        options = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞"]
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–∑–Ω–∞—á–∫—É, —è–∫—â–æ –æ–ø—Ü—ñ—è –≤–∂–µ –æ–±—Ä–∞–Ω–∞
        selected_options = user_data[chat_id]['data'].get('shipping_options', [])
        buttons = [types.InlineKeyboardButton(f"{'‚úÖ ' if opt in selected_options else ''}{opt}", callback_data=f"shipping_{opt}") for opt in options]
        inline_markup.add(*buttons)
        inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
        bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=inline_markup)
        return # –í–∏—Ö–æ–¥–∏–º–æ, —â–æ–± –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ ReplyKeyboard

    if step_config['prev_step'] is not None:
        markup.add(back_button)
    markup.add(cancel_button)
    
    bot.send_message(chat_id, step_config['prompt'], parse_mode='Markdown', reply_markup=markup)

@error_handler
def go_to_next_step(chat_id):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É."""
    if chat_id not in user_data: return
    current_step_number = user_data[chat_id]['step_number']
    next_step = ADD_PRODUCT_STEPS[current_step_number]['next_step']
    
    if next_step == 'confirm':
        confirm_and_send_for_moderation(chat_id)
    else:
        user_data[chat_id]['step_number'] = next_step
        send_product_step_message(chat_id)

@error_handler
def process_product_step(message):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'add_product':
        return # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ

    step_name = user_data[chat_id].get('step')
    user_text = message.text
    
    # –û–±—Ä–æ–±–∫–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
    if user_text == cancel_button.text:
        del user_data[chat_id]
        bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        return
    if user_text == back_button.text:
        prev_step = ADD_PRODUCT_STEPS[user_data[chat_id]['step_number']].get('prev_step')
        if prev_step:
            user_data[chat_id]['step_number'] = prev_step
            send_product_step_message(chat_id)
        return

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É –∫—Ä–æ–∫—ñ–≤
    step_config = ADD_PRODUCT_STEPS[user_data[chat_id]['step_number']]
    if step_config.get('allow_skip') and user_text == step_config.get('skip_button'):
        go_to_next_step(chat_id)
        return

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    if step_name == 'waiting_name':
        if 3 <= len(user_text) <= 100:
            user_data[chat_id]['data']['product_name'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.reply_to(message, "–ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 3 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
    elif step_name == 'waiting_price':
        if len(user_text) <= 50:
            user_data[chat_id]['data']['price'] = user_text
            go_to_next_step(chat_id)
        else:
            bot.reply_to(message, "–¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞.")
    elif step_name == 'waiting_photos':
        if user_text == "–î–∞–ª—ñ":
            go_to_next_step(chat_id)
        else:
            bot.reply_to(message, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'.")
    elif step_name == 'waiting_description':
        if 10 <= len(user_text) <= 1000:
            user_data[chat_id]['data']['description'] = user_text
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ö–µ—à—Ç–µ–≥—ñ–≤ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ
            user_data[chat_id]['data']['hashtags'] = generate_hashtags(user_text)
            go_to_next_step(chat_id) # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        else:
            bot.reply_to(message, "–û–ø–∏—Å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.")
    else:
        # –î–ª—è –∫—Ä–æ–∫—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.")

@error_handler
def process_product_photo(message):
    """–û–±—Ä–æ–±–ª—è—î —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_photos':
        if len(user_data[chat_id]['data']['photos']) < 5:
            file_id = message.photo[-1].file_id
            user_data[chat_id]['data']['photos'].append(file_id)
            count = len(user_data[chat_id]['data']['photos'])
            bot.reply_to(message, f"‚úÖ –§–æ—Ç–æ {count}/5 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'.")
        else:
            bot.reply_to(message, "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–∞–ª—ñ'.")

@error_handler
def process_product_location(message):
    """–û–±—Ä–æ–±–ª—è—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —Ç–æ–≤–∞—Ä—É."""
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id].get('step') == 'waiting_location':
        user_data[chat_id]['data']['geolocation'] = json.dumps({
            'latitude': message.location.latitude,
            'longitude': message.location.longitude
        })
        bot.reply_to(message, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ!")
        go_to_next_step(chat_id)

@error_handler
def confirm_and_send_for_moderation(chat_id):
    """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–≤–∞—Ä —É –ë–î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é."""
    data = user_data[chat_id]['data']
    
    conn = get_db_connection()
    if not conn:
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return
    try:
        with conn.cursor() as cur:
            user_info = bot.get_chat(chat_id)
            seller_username = user_info.username or '–ù–µ–º–∞—î'
            
            cur.execute("""
                INSERT INTO products (seller_chat_id, seller_username, product_name, price, description, photos, geolocation, shipping_options, hashtags, status)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 'pending')
                RETURNING id;
            """, (
                chat_id, seller_username, data.get('product_name'), data.get('price'),
                data.get('description'), json.dumps(data.get('photos')), data.get('geolocation'),
                json.dumps(data.get('shipping_options')), data.get('hashtags')
            ))
            product_id = cur.fetchone()[0]
            conn.commit()

            bot.send_message(chat_id, 
                f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!",
                reply_markup=main_menu_markup)
            
            send_product_for_admin_review(product_id)
            
            del user_data[chat_id]
            log_statistics('product_added', chat_id, product_id)
    except Exception as e:
        conn.rollback()
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}", exc_info=True)
        bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.")
    finally:
        if conn:
            conn.close()

@error_handler
def send_product_for_admin_review(product_id):
    """–ù–∞–¥—Å–∏–ª–∞—î —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∞–¥–º—ñ–Ω—É –∑ –Ω–æ–≤–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM products WHERE id = %s", (product_id,))
            product = cur.fetchone()
            if not product:
                logger.error(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
                return

    finally:
        if conn:
            conn.close()

    data = dict(product) # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫
    photos = json.loads(data.get('photos') or '[]')
    shipping_options = json.loads(data.get('shipping_options') or '[]')
    
    review_text = (
        f"üì¶ *–ù–æ–≤–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é*\n\n"
        f"üÜî ID: `{data['id']}`\n"
        f"üìù –ù–∞–∑–≤–∞: {data['product_name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {data['price']}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {', '.join(shipping_options) or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìÑ –û–ø–∏—Å: {data['description'][:200]}...\n"
        f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {'–¢–∞–∫' if data['geolocation'] else '–ù—ñ'}\n"
        f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: `{data['hashtags']}`\n\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: [{f'@{data["seller_username"]}' if data['seller_username'] != '–ù–µ–º–∞—î' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}](tg://user?id={data['seller_chat_id']})"
    )
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{product_id}"),
        types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{product_id}")
    )
    # –ù–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    markup.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥. —Ö–µ—à—Ç–µ–≥–∏", callback_data=f"mod_edit_tags_{product_id}"),
        types.InlineKeyboardButton("üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"mod_rotate_photo_{product_id}")
    )
    
    try:
        if photos:
            media = [types.InputMediaPhoto(p, caption=review_text if i == 0 else '', parse_mode='Markdown') for i, p in enumerate(photos)]
            sent_messages = bot.send_media_group(ADMIN_CHAT_ID, media)
            admin_msg = bot.send_message(ADMIN_CHAT_ID, f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É ID: `{product_id}`", reply_markup=markup, parse_mode='Markdown', reply_to_message_id=sent_messages[0].message_id)
        else:
            admin_msg = bot.send_message(ADMIN_CHAT_ID, review_text, parse_mode='Markdown', reply_markup=markup)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        conn = get_db_connection()
        if conn:
            with conn.cursor() as cur:
                cur.execute("UPDATE products SET admin_message_id = %s WHERE id = %s", (admin_msg.message_id, product_id))
                conn.commit()
            conn.close()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–æ–≤–∞—Ä—É {product_id} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}", exc_info=True)


# --- 13. –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'location'])
@error_handler
def handle_messages(message):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    chat_id = message.chat.id
    user_text = message.text if message.content_type == 'text' else ""

    if is_user_blocked(chat_id):
        bot.send_message(chat_id, "‚ùå –í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.")
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–ª–µ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –±–æ —Ü–µ –Ω–µ /start
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("UPDATE users SET last_activity = CURRENT_TIMESTAMP WHERE chat_id = %s", (chat_id,))
                conn.commit()
        finally: conn.close()
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏
    if chat_id in user_data and 'flow' in user_data[chat_id]:
        flow = user_data[chat_id]['flow']
        if flow == 'add_product':
            if message.content_type == 'text':
                process_product_step(message)
            elif message.content_type == 'photo':
                process_product_photo(message)
            elif message.content_type == 'location':
                process_product_location(message)
        elif flow == 'change_price':
            process_new_price(message)
        elif flow == 'mod_edit_tags':
            process_new_hashtags_mod(message)
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if user_text == "üì¶ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä": start_add_product_flow(message)
    elif user_text == "üìã –ú–æ—ó —Ç–æ–≤–∞—Ä–∏": send_my_products(message)
    elif user_text == "‚≠ê –û–±—Ä–∞–Ω—ñ": send_favorites(message)
    elif user_text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞": send_help_message(message)
    elif user_text == "üì∫ –ù–∞—à –∫–∞–Ω–∞–ª": send_channel_link(message)
    elif user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫":
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è. (–ù–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.)", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat)
    elif message.content_type == 'text':
        handle_ai_chat(message) # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –∑–∞–ø–∏—Ç –¥–æ AI
    else:
        bot.reply_to(message, "–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à –∑–∞–ø–∏—Ç. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é.")


@error_handler
def handle_ai_chat(message):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É."""
    # ... (–∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
    chat_id = message.chat.id
    user_text = message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è AI —á–∞—Ç—É
    if user_text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏" or user_text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(chat_id, "–ß–∞—Ç –∑ AI —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_markup)
        # –í–∞–∂–ª–∏–≤–æ: –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ handle_ai_chat, telebot –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞—Å—É—î register_next_step_handler.
        # –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —è–≤–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ handler, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `bot.clear_step_handler_by_chat_id(chat_id)`.
        return

    # –¶–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –ø–µ—Ä–µ–±—É–≤–∞—é—á–∏ –≤ AI —á–∞—Ç—ñ,
    # –∑–Ω–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—É–≤ "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫" –∞–±–æ `/start`.
    if user_text == "ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫" or user_text == "/start":
        bot.send_message(chat_id, "–í–∏ –≤–∂–µ –≤ —Ä–µ–∂–∏–º—ñ AI —á–∞—Ç—É. –ù–∞–ø–∏—à—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_ai_chat) # –ó–Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è AI —á–∞—Ç—É
        return # –í–∞–∂–ª–∏–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏

    save_conversation(chat_id, user_text, 'user') # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Gemini AI
    conversation_history = get_conversation_history(chat_id, limit=10) # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    
    ai_reply = get_gemini_response(user_text, conversation_history) # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini
    save_conversation(chat_id, ai_reply, 'ai') # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(chat_id, f"ü§ñ –î—É–º–∞—é...\n{ai_reply}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_ai_chat) # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ AI —á–∞—Ç


# --- 14. –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑–¥—ñ–ª—ñ–≤ –º–µ–Ω—é ---
@error_handler
def send_my_products(message):
    """–ù–∞–¥—Å–∏–ª–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, product_name, status, price, created_at, channel_message_id, views, republish_count, last_republish_date
                FROM products WHERE seller_chat_id = %s ORDER BY created_at DESC
            """, (chat_id,))
            products = cur.fetchall()

        if not products:
            bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
            return

        bot.send_message(chat_id, "üìã *–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*", parse_mode='Markdown')
        for prod in products:
            status_map = {'pending': '‚è≥ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ', 'approved': '‚úÖ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ', 'rejected': '‚ùå –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ', 'sold': 'üí∞ –ø—Ä–æ–¥–∞–Ω–æ'}
            status_text = status_map.get(prod['status'], prod['status'])
            created_at = prod['created_at'].strftime('%d.%m.%Y %H:%M')
            
            text = (
                f"*{prod['product_name']}*\n"
                f"   –¶—ñ–Ω–∞: {prod['price']}\n"
                f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"   –î–∞—Ç–∞: {created_at}\n"
            )
            markup = types.InlineKeyboardMarkup(row_width=3)
            
            if prod['status'] == 'approved':
                text += f"   üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–¥–∏: {prod['views']}\n"
                channel_link_part = str(CHANNEL_ID).replace("-100", "")
                url = f"https://t.me/c/{channel_link_part}/{prod['channel_message_id']}"
                markup.add(types.InlineKeyboardButton("üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", url=url))
                markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω–æ", callback_data=f"sold_my_{prod['id']}"))
                # –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ "–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É"
                markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É", callback_data=f"change_price_{prod['id']}"))
            
            markup.add(types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_my_{prod['id']}"))
            
            bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup, disable_web_page_preview=True)

    finally:
        if conn:
            conn.close()

@error_handler
def send_favorites(message):
    """–ù–∞–¥—Å–∏–ª–∞—î —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤."""
    chat_id = message.chat.id
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT p.id, p.product_name, p.price, p.status, p.channel_message_id
                FROM products p
                JOIN favorites f ON p.id = f.product_id
                WHERE f.user_chat_id = %s AND p.status = 'approved'
                ORDER BY p.created_at DESC;
            """, (chat_id,))
            favorites = cur.fetchall()
        
        if not favorites:
            bot.send_message(chat_id, "üìú –í–∞—à —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ ‚ù§Ô∏è –ø—ñ–¥ –Ω–∏–º —É –∫–∞–Ω–∞–ª—ñ.")
            return

        bot.send_message(chat_id, "‚≠ê *–í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:*", parse_mode='Markdown')
        for fav in favorites:
            channel_link_part = str(CHANNEL_ID).replace("-100", "")
            url = f"https://t.me/c/{channel_link_part}/{fav['channel_message_id']}"
            text = f"*{fav['product_name']}*\nüí∞ {fav['price']}"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ –∫–∞–Ω–∞–ª—ñ", url=url))
            bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup, disable_web_page_preview=True)
    finally:
        if conn:
            conn.close()

@error_handler
def send_help_message(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó."""
    help_text = (
        "üÜò *–î–æ–≤—ñ–¥–∫–∞*\n\n"
        "ü§ñ –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫. –û—Å—å —â–æ —è –≤–º—ñ—é:\n"
        "üì¶ *–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä* - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n"
        "üìã *–ú–æ—ó —Ç–æ–≤–∞—Ä–∏* - –∫–µ—Ä—É–≤–∞—Ç–∏ –≤–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n"
        "‚≠ê *–û–±—Ä–∞–Ω—ñ* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –≤–∏ –ª–∞–π–∫–Ω—É–ª–∏.\n"
        "üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n"
        "ü§ñ *AI –ü–æ–º—ñ—á–Ω–∏–∫* - –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ AI.\n\n"
        "‚úçÔ∏è *–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤—ñ—Å—É*:\n"
        "‚Äì –î–æ—Å—Ç–∞–≤–∫—É –æ–ø–ª–∞—á—É—î *–ø–æ–∫—É–ø–µ—Ü—å*.\n"
        "‚Äì –ö–æ–º—ñ—Å—ñ—é —Å–µ—Ä–≤—ñ—Å—É —Å–ø–ª–∞—á—É—î *–ø—Ä–æ–¥–∞–≤–µ—Ü—å*.\n\n"
        f"–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é", callback_data="show_commission_info"))
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=markup)

@error_handler
def send_commission_info(call):
    """–ù–∞–¥—Å–∏–ª–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é."""
    commission_rate_percent = 10
    text = (
        f"üí∞ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é*\n\n"
        f"–ó–∞ —É—Å–ø—ñ—à–Ω–∏–π –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ —Å—Ç—è–≥—É—î—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è —É —Ä–æ–∑–º—ñ—Ä—ñ **{commission_rate_percent}%** –≤—ñ–¥ —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É.\n\n"
        f"–ö–æ–º—ñ—Å—ñ—é —Å–ø–ª–∞—á—É—î *–ø—Ä–æ–¥–∞–≤–µ—Ü—å*. –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –ø–æ–∑–Ω–∞—á–∏—Ç–µ —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ', —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö—É—î —Å—É–º—É.\n\n"
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è —Å–ø–ª–∞—Ç–∏ (Monobank):\n`{MONOBANK_CARD_NUMBER}`\n\n"
        f"–°–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å."
    )
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, text, parse_mode='Markdown')

@error_handler
def send_channel_link(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É."""
    chat_id = message.chat.id
    try:
        chat_info = bot.get_chat(CHANNEL_ID)
        channel_link = chat_info.invite_link or f"https://t.me/{chat_info.username}"
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
        referral_link = f"https://t.me/{bot.get_me().username}?start={chat_id}"
        invite_text = (
            f"üì∫ *–ù–∞—à –∫–∞–Ω–∞–ª –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏*\n\n"
            f"–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É]({channel_link})\n\n"
            f"üèÜ *–ü—Ä–∏–≤–æ–¥—å—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –≥—Ä–æ—à—ñ!*\n\n"
            f"–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –æ—Å–æ–±–∏—Å—Ç–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏. "
            f"–ö–æ–ª–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞—î—Ç–µ —É—á–∞—Å–Ω–∏–∫–æ–º "
            f"—â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö, —â–æ–º—ñ—Å—è—á–Ω–∏—Ö —Ç–∞ —â–æ—Ä—ñ—á–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤!\n\n"
            f"üîó *–í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è:*\n`{referral_link}`"
        )
        bot.send_message(chat_id, invite_text, parse_mode='Markdown', disable_web_page_preview=True)
        log_statistics('channel_visit', chat_id)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")


# --- 15. –û–±—Ä–æ–±–Ω–∏–∫–∏ Callback Query ---
@bot.callback_query_handler(func=lambda call: True)
@error_handler
def callback_inline(call):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    action = call.data.split('_')[0]
    
    # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
    if action in ['approve', 'reject']: handle_product_moderation_callbacks(call)
    elif action == 'mod': handle_moderator_actions(call)
    
    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    elif action == 'sold' and call.data.startswith('sold_my'): handle_seller_sold_product(call)
    elif action == 'delete' and call.data.startswith('delete_my'): handle_delete_my_product(call)
    elif action == 'change' and call.data.startswith('change_price'): handle_change_price_init(call)
    
    # –û–±—Ä–∞–Ω–µ (–ª–∞–π–∫–∏)
    elif action == 'toggle' and call.data.startswith('toggle_favorite'): handle_toggle_favorite(call)
    
    # –î–æ—Å—Ç–∞–≤–∫–∞
    elif action == 'shipping': handle_shipping_choice(call)
    
    # –î–æ–ø–æ–º–æ–≥–∞
    elif call.data == 'show_commission_info': send_commission_info(call)
    
    # –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
    elif action == 'admin': handle_admin_callbacks(call)
    
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")


# --- 16. –õ–æ–≥—ñ–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏ ---

@error_handler
def handle_product_moderation_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É."""
    if call.message.chat.id != ADMIN_CHAT_ID: return
    
    action, product_id_str = call.data.split('_')
    product_id = int(product_id_str)

    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM products WHERE id = %s;", (product_id,))
            product = cur.fetchone()
            if not product:
                bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            if action == 'approve':
                if product['status'] != 'pending':
                    bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å '{product['status']}'.")
                    return
                
                # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª—ñ
                publish_product_to_channel(product_id)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
                bot.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä *'{product['product_name']}'* (ID: {product_id}) –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.",
                                      call.message.chat.id, call.message.message_id, parse_mode='Markdown')

            elif action == 'reject':
                cur.execute("UPDATE products SET status = 'rejected', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP WHERE id = %s;",
                            (call.message.chat.id, product_id))
                conn.commit()
                bot.send_message(product['seller_chat_id'], f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä '{product['product_name']}' –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                bot.edit_message_text(f"‚ùå –¢–æ–≤–∞—Ä *'{product['product_name']}'* (ID: {product_id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.",
                                      call.message.chat.id, call.message.message_id, parse_mode='Markdown')
            
            log_statistics(f'product_{action}', call.message.chat.id, product_id)

    finally:
        if conn:
            conn.close()
    bot.answer_callback_query(call.id)

@error_handler
def publish_product_to_channel(product_id):
    """–ü—É–±–ª—ñ–∫—É—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª—ñ."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM products WHERE id = %s", (product_id,))
            product = cur.fetchone()
            if not product: return

            photos = json.loads(product['photos'] or '[]')
            shipping = ", ".join(json.loads(product['shipping_options'] or '[]')) or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'

            channel_text = (
                f"üì¶ *{product['product_name']}*\n\n"
                f"üí∞ *–¶—ñ–Ω–∞:* {product['price']}\n"
                f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {shipping}\n"
                f"üìç *–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è:* {'–ü—Ä–∏—Å—É—Ç–Ω—è' if product['geolocation'] else '–í—ñ–¥—Å—É—Ç–Ω—è'}\n\n"
                f"üìù *–û–ø–∏—Å:*\n{product['description']}\n\n"
                f"#{product['seller_username']} {product['hashtags']}\n\n"
                f"üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü—å:* [–ù–∞–ø–∏—Å–∞—Ç–∏](tg://user?id={product['seller_chat_id']})"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(f"‚ù§Ô∏è {product['likes_count']}", callback_data=f"toggle_favorite_{product_id}"))

            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —î (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
            if product['channel_message_id']:
                try: bot.delete_message(CHANNEL_ID, product['channel_message_id'])
                except: pass

            if photos:
                media = [types.InputMediaPhoto(p, caption=channel_text if i == 0 else '', parse_mode='Markdown') for i, p in enumerate(photos)]
                sent_messages = bot.send_media_group(CHANNEL_ID, media)
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                published_message = bot.send_message(CHANNEL_ID, "üëá", reply_markup=markup, reply_to_message_id=sent_messages[0].message_id)
                # –í–∏–¥–∞–ª—è—î–º–æ "–ø—É—Å—Ç–µ" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ —á–∞—Ç. –°–∞–º—ñ –∫–Ω–æ–ø–∫–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –ø—ñ–¥ –º–µ–¥—ñ–∞ –≥—Ä—É–ø–æ—é.
                bot.delete_message(CHANNEL_ID, published_message.message_id)
                # –ì–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –ø–µ—Ä—à–µ –∑ –º–µ–¥—ñ–∞–≥—Ä—É–ø–∏
                published_message = sent_messages[0]

            else:
                published_message = bot.send_message(CHANNEL_ID, channel_text, parse_mode='Markdown', reply_markup=markup)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ –ë–î
            cur.execute("""
                UPDATE products SET status = 'approved', moderator_id = %s, moderated_at = CURRENT_TIMESTAMP, channel_message_id = %s
                WHERE id = %s;
            """, (ADMIN_CHAT_ID, published_message.message_id, product_id))
            conn.commit()
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ –ø—Ä–æ–¥–∞–≤—Ü—è
            if product['status'] == 'pending':
                bot.send_message(product['seller_chat_id'], f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä '{product['product_name']}' –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É {product_id} –≤ –∫–∞–Ω–∞–ª: {e}", exc_info=True)
        conn.rollback()
    finally:
        if conn:
            conn.close()


@error_handler
def handle_seller_sold_product(call):
    """–û–±—Ä–æ–±–ª—è—î, –∫–æ–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü—å –≤—ñ–¥–º—ñ—á–∞—î —Ç–æ–≤–∞—Ä —è–∫ '–ü—Ä–æ–¥–∞–Ω–æ'."""
    #...
    pass

@error_handler
def handle_delete_my_product(call):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –ø—Ä–æ–¥–∞–≤—Ü–µ–º."""
    #...
    pass

@error_handler
def handle_change_price_init(call):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏."""
    chat_id = call.message.chat.id
    product_id = int(call.data.split('_')[2])
    
    user_data[chat_id] = {
        'flow': 'change_price',
        'product_id': product_id
    }
    
    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:", reply_markup=types.ForceReply(selective=True))
    bot.register_next_step_handler(call.message, process_new_price)

@error_handler
def process_new_price(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—É —Ü—ñ–Ω—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ç–æ–≤–∞—Ä."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'change_price':
        return
        
    product_id = user_data[chat_id]['product_id']
    new_price = message.text
    
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º
            cur.execute("SELECT seller_chat_id FROM products WHERE id = %s", (product_id,))
            product = cur.fetchone()
            if not product or product['seller_chat_id'] != chat_id:
                bot.send_message(chat_id, "–¶–µ –Ω–µ –≤–∞—à —Ç–æ–≤–∞—Ä.")
                return

            cur.execute("UPDATE products SET price = %s, updated_at = CURRENT_TIMESTAMP WHERE id = %s", (new_price, product_id))
            conn.commit()
        
        bot.send_message(chat_id, f"‚úÖ –¶—ñ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: *{new_price}*", parse_mode='Markdown')
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ñ
        publish_product_to_channel(product_id)
    finally:
        if conn:
            conn.close()
        del user_data[chat_id]

# --- 17. –õ–æ–≥—ñ–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ---
@error_handler
def handle_moderator_actions(call):
    """–û–±—Ä–æ–±–ª—è—î –¥—ñ—ó –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è."""
    if call.message.chat.id != ADMIN_CHAT_ID: return
    
    _, action, product_id_str = call.data.split('_', 2)
    product_id = int(product_id_str)

    if action == 'edit' and call.data.startswith('mod_edit_tags'):
        user_data[ADMIN_CHAT_ID] = {'flow': 'mod_edit_tags', 'product_id': product_id}
        bot.answer_callback_query(call.id)
        bot.send_message(ADMIN_CHAT_ID, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id}:", reply_markup=types.ForceReply(selective=True))
        bot.register_next_step_handler(call.message, process_new_hashtags_mod)

    elif action == 'rotate' and call.data.startswith('mod_rotate_photo'):
        conn = get_db_connection()
        if not conn: return
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT seller_chat_id, product_name FROM products WHERE id = %s", (product_id,))
                product = cur.fetchone()
                if product:
                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    bot.send_message(product['seller_chat_id'], f"‚ùóÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product['product_name']}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–¥–∞–ª—ñ—Ç—å –π–æ–≥–æ —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏.")
                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
                    bot.edit_message_text(f"–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
        finally:
            if conn:
                conn.close()

@error_handler
def process_new_hashtags_mod(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""
    chat_id = message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('flow') != 'mod_edit_tags':
        return
    
    product_id = user_data[chat_id]['product_id']
    new_hashtags = message.text
    
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            cur.execute("UPDATE products SET hashtags = %s WHERE id = %s", (new_hashtags, product_id))
            conn.commit()
        bot.send_message(chat_id, f"‚úÖ –•–µ—à—Ç–µ–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {product_id} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        send_product_for_admin_review(product_id)
    finally:
        if conn:
            conn.close()
        del user_data[chat_id]

# --- 18. –õ–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ---
@error_handler
def handle_toggle_favorite(call):
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–æ–≥–æ (–ª–∞–π–∫)."""
    user_chat_id = call.from_user.id
    product_id = int(call.data.split('_')[2])
    
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ª–∞–π–∫ –≤–∂–µ —ñ—Å–Ω—É—î
            cur.execute("SELECT id FROM favorites WHERE user_chat_id = %s AND product_id = %s", (user_chat_id, product_id))
            is_favorited = cur.fetchone()

            if is_favorited:
                # –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–π–∫
                cur.execute("DELETE FROM favorites WHERE id = %s", (is_favorited['id'],))
                cur.execute("UPDATE products SET likes_count = likes_count - 1 WHERE id = %s RETURNING likes_count", (product_id,))
                bot.answer_callback_query(call.id, "üíî –í–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ")
            else:
                # –î–æ–¥–∞—î–º–æ –ª–∞–π–∫
                cur.execute("INSERT INTO favorites (user_chat_id, product_id) VALUES (%s, %s)", (user_chat_id, product_id))
                cur.execute("UPDATE products SET likes_count = likes_count + 1 WHERE id = %s RETURNING likes_count", (product_id,))
                bot.answer_callback_query(call.id, "‚ù§Ô∏è –î–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ!")
            
            likes_count = cur.fetchone()['likes_count']
            conn.commit()

            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–Ω–∞–ª—ñ
            new_markup = types.InlineKeyboardMarkup()
            new_markup.add(types.InlineKeyboardButton(f"‚ù§Ô∏è {likes_count}", callback_data=f"toggle_favorite_{product_id}"))
            try:
                bot.edit_message_reply_markup(chat_id=CHANNEL_ID, message_id=call.message.message_id, reply_markup=new_markup)
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ª–∞–π–∫—ñ–≤ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {call.message.message_id}: {e}")

    finally:
        if conn:
            conn.close()

@error_handler
def handle_shipping_choice(call):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    chat_id = call.message.chat.id
    if chat_id not in user_data or user_data[chat_id].get('step') != 'waiting_shipping':
        bot.answer_callback_query(call.id, "–¶—è –¥—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞.")
        return

    if call.data == 'shipping_next':
        go_to_next_step(chat_id)
        bot.delete_message(chat_id, call.message.message_id) # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        return
        
    option = call.data.replace('shipping_', '')
    selected = user_data[chat_id]['data']['shipping_options']

    if option in selected:
        selected.remove(option)
    else:
        selected.append(option)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä
    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    options = ["–ù–∞–ª–æ–∂–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", "–ù–∞–ª–æ–∂–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞"]
    buttons = [types.InlineKeyboardButton(f"{'‚úÖ ' if opt in selected else ''}{opt}", callback_data=f"shipping_{opt}") for opt in options]
    inline_markup.add(*buttons)
    inline_markup.add(types.InlineKeyboardButton("–î–∞–ª—ñ ‚û°Ô∏è", callback_data="shipping_next"))
    
    try:
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=inline_markup)
    except telebot.apihelper.ApiTelegramException: # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å
        pass
    
    bot.answer_callback_query(call.id)
    
# --- 19. –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å: –†–µ—Ñ–µ—Ä–∞–ª–∏ ---
@error_handler
def send_admin_referrals(call):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î —Ä–æ–∑—ñ–≥—Ä–∞—à."""
    conn = get_db_connection()
    if not conn: return
    try:
        with conn.cursor() as cur:
            # –¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤
            cur.execute("""
                SELECT referrer_id, COUNT(*) as referrals_count
                FROM users
                WHERE referrer_id IS NOT NULL
                GROUP BY referrer_id
                ORDER BY referrals_count DESC
                LIMIT 5;
            """)
            top_referrers = cur.fetchall()

            # –£—á–∞—Å–Ω–∏–∫–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
            cur.execute("""
                SELECT DISTINCT referrer_id FROM users
                WHERE referrer_id IS NOT NULL AND joined_at >= NOW() - INTERVAL '7 days';
            """)
            weekly_participants = [row['referrer_id'] for row in cur.fetchall()]
        
        text = "üèÜ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞*\n\n*–¢–æ–ø-5 —Ä–µ—Ñ–µ—Ä–µ—Ä—ñ–≤ –∑–∞ –≤–µ—Å—å —á–∞—Å:*\n"
        if top_referrers:
            for i, r in enumerate(top_referrers, 1):
                try: user_info = bot.get_chat(r['referrer_id'])
                except: user_info = None
                username = f"@{user_info.username}" if user_info and user_info.username else f"ID: {r['referrer_id']}"
                text += f"{i}. {username} - {r['referrals_count']} –∑–∞–ø—Ä–æ—à–µ–Ω—å\n"
        else:
            text += "_–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö_\n"
        
        text += f"\n*–£—á–∞—Å–Ω–∏–∫—ñ–≤ —É —â–æ—Ç–∏–∂–Ω–µ–≤–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:* {len(weekly_participants)}\n"
        
        winner_text = ""
        if weekly_participants:
            winner_id = random.choice(weekly_participants)
            try: winner_info = bot.get_chat(winner_id)
            except: winner_info = None
            winner_username = f"@{winner_info.username}" if winner_info and winner_info.username else f"ID: {winner_id}"
            winner_text = f"\nüéâ *–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è:* {winner_username}!"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel_main"))

        bot.edit_message_text(text + winner_text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')

    finally:
        if conn:
            conn.close()

# –†–æ–∑—à–∏—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∞–¥–º—ñ–Ω-–∫–æ–ª–±–µ–∫—ñ–≤
@error_handler
def handle_admin_callbacks(call):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    if call.message.chat.id != ADMIN_CHAT_ID: return
    
    action = call.data.split('_')[1]

    if action == "stats": pass # send_admin_statistics(call)
    elif action == "pending": pass # send_pending_products_for_moderation(call)
    elif action == "users": pass # send_users_list(call)
    elif action == "block": pass # process_user_for_block_unblock(call)
    elif action == "referrals": send_admin_referrals(call)
    elif action == "panel" and call.data == "admin_panel_main":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            types.InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="admin_pending"),
            types.InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            types.InlineKeyboardButton("üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="admin_block"),
            types.InlineKeyboardButton("üèÜ –†–µ—Ñ–µ—Ä–∞–ª–∏", callback_data="admin_referrals")
        )
        bot.edit_message_text("üîß *–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å*", call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')

    bot.answer_callback_query(call.id)

# --- 20. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...")
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")

    if WEBHOOK_URL and TOKEN:
        try:
            bot.remove_webhook()
            full_webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
            bot.set_webhook(url=full_webhook_url)
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}", exc_info=True)
            exit(1)
    else:
        logger.critical("WEBHOOK_URL –∞–±–æ TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        exit(1)

    @app.route(f'/{TOKEN}', methods=['POST'])
    def webhook_handler():
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return '!', 200
        else:
            return 'Content-Type must be application/json', 403

    port = int(os.environ.get("PORT", 8443))
    app.run(host="0.0.0.0", port=port)
